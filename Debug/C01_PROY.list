
C01_PROY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a094  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  0800a264  0800a264  0001a264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a798  0800a798  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800a798  0800a798  0001a798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7a0  0800a7a0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7a0  0800a7a0  0001a7a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7a4  0800a7a4  0001a7a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800a7a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003304  20000070  0800a818  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20003374  0800a818  00023374  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015384  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d28  00000000  00000000  00035424  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ef0  00000000  00000000  00038150  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000da8  00000000  00000000  00039040  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027626  00000000  00000000  00039de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f6ca  00000000  00000000  0006140e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ea44a  00000000  00000000  00070ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015af22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f98  00000000  00000000  0015afa0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a24c 	.word	0x0800a24c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800a24c 	.word	0x0800a24c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <HAL_RTC_AlarmAEventCallback>:
UINT byteswritten;				/* File write counts */

uint8_t persistEvent;			/* Flag to indicate that the event should be persisted */

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	HAL_RTC_GetTime(hrtc, &time, RTC_FORMAT_BIN);
 80005b8:	2200      	movs	r2, #0
 80005ba:	4908      	ldr	r1, [pc, #32]	; (80005dc <HAL_RTC_AlarmAEventCallback+0x2c>)
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f002 fa3d 	bl	8002a3c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &date, RTC_FORMAT_BIN);
 80005c2:	2200      	movs	r2, #0
 80005c4:	4906      	ldr	r1, [pc, #24]	; (80005e0 <HAL_RTC_AlarmAEventCallback+0x30>)
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f002 fb3e 	bl	8002c48 <HAL_RTC_GetDate>

	persistEvent = 1;
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <HAL_RTC_AlarmAEventCallback+0x34>)
 80005ce:	2201      	movs	r2, #1
 80005d0:	701a      	strb	r2, [r3, #0]
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000090 	.word	0x20000090
 80005e0:	200000a8 	.word	0x200000a8
 80005e4:	20000274 	.word	0x20000274

080005e8 <setDHT11Mode>:

// DHT11 Code

GPIO_InitTypeDef GPIO_DHT11_InitStruct = {0};

void setDHT11Mode(uint32_t mode) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  GPIO_DHT11_InitStruct.Pin = DHT11_Pin;
 80005f0:	4b09      	ldr	r3, [pc, #36]	; (8000618 <setDHT11Mode+0x30>)
 80005f2:	2240      	movs	r2, #64	; 0x40
 80005f4:	601a      	str	r2, [r3, #0]
  GPIO_DHT11_InitStruct.Mode = mode;
 80005f6:	4a08      	ldr	r2, [pc, #32]	; (8000618 <setDHT11Mode+0x30>)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6053      	str	r3, [r2, #4]
  GPIO_DHT11_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <setDHT11Mode+0x30>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  GPIO_DHT11_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000602:	4b05      	ldr	r3, [pc, #20]	; (8000618 <setDHT11Mode+0x30>)
 8000604:	2200      	movs	r2, #0
 8000606:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_DHT11_InitStruct);
 8000608:	4903      	ldr	r1, [pc, #12]	; (8000618 <setDHT11Mode+0x30>)
 800060a:	4804      	ldr	r0, [pc, #16]	; (800061c <setDHT11Mode+0x34>)
 800060c:	f000 feee 	bl	80013ec <HAL_GPIO_Init>
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	200000ac 	.word	0x200000ac
 800061c:	40021400 	.word	0x40021400

08000620 <setDHT11ToOutputMode>:

void setDHT11ToOutputMode() {
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  setDHT11Mode(GPIO_MODE_OUTPUT_PP);
 8000624:	2001      	movs	r0, #1
 8000626:	f7ff ffdf 	bl	80005e8 <setDHT11Mode>
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}

0800062e <setDHT11ToInputMode>:

void setDHT11ToInputMode() {
 800062e:	b580      	push	{r7, lr}
 8000630:	af00      	add	r7, sp, #0
  setDHT11Mode(GPIO_MODE_INPUT);
 8000632:	2000      	movs	r0, #0
 8000634:	f7ff ffd8 	bl	80005e8 <setDHT11Mode>
}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}

0800063c <setDHT11Pin>:

void setDHT11Pin(GPIO_PinState pinState) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, pinState);
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	461a      	mov	r2, r3
 800064a:	2140      	movs	r1, #64	; 0x40
 800064c:	4803      	ldr	r0, [pc, #12]	; (800065c <setDHT11Pin+0x20>)
 800064e:	f001 f88f 	bl	8001770 <HAL_GPIO_WritePin>
}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40021400 	.word	0x40021400

08000660 <getDHT11Pin>:

GPIO_PinState getDHT11Pin() {
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin);
 8000664:	2140      	movs	r1, #64	; 0x40
 8000666:	4803      	ldr	r0, [pc, #12]	; (8000674 <getDHT11Pin+0x14>)
 8000668:	f001 f86a 	bl	8001740 <HAL_GPIO_ReadPin>
 800066c:	4603      	mov	r3, r0
}
 800066e:	4618      	mov	r0, r3
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40021400 	.word	0x40021400

08000678 <waitForDHT11PullUp>:

uint32_t waitForDHT11PullUp() {
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
  uint32_t downCycles = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	607b      	str	r3, [r7, #4]
  if (getDHT11Pin() == 1) {
 8000682:	f7ff ffed 	bl	8000660 <getDHT11Pin>
 8000686:	4603      	mov	r3, r0
 8000688:	2b01      	cmp	r3, #1
 800068a:	d109      	bne.n	80006a0 <waitForDHT11PullUp+0x28>
    while (getDHT11Pin() == 1) { /* wait until down first */ }
 800068c:	bf00      	nop
 800068e:	f7ff ffe7 	bl	8000660 <getDHT11Pin>
 8000692:	4603      	mov	r3, r0
 8000694:	2b01      	cmp	r3, #1
 8000696:	d0fa      	beq.n	800068e <waitForDHT11PullUp+0x16>
  }
  while (getDHT11Pin() == 0) { // wait for pull up
 8000698:	e002      	b.n	80006a0 <waitForDHT11PullUp+0x28>
    downCycles++;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	3301      	adds	r3, #1
 800069e:	607b      	str	r3, [r7, #4]
  while (getDHT11Pin() == 0) { // wait for pull up
 80006a0:	f7ff ffde 	bl	8000660 <getDHT11Pin>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d0f7      	beq.n	800069a <waitForDHT11PullUp+0x22>
  }
  return downCycles;
 80006aa:	687b      	ldr	r3, [r7, #4]
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <waitForDHT11PullDown>:

uint32_t waitForDHT11PullDown() {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
  uint32_t upCycles = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
  if (getDHT11Pin() == 0) {
 80006be:	f7ff ffcf 	bl	8000660 <getDHT11Pin>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d109      	bne.n	80006dc <waitForDHT11PullDown+0x28>
    while (getDHT11Pin() == 0) { /* wait until up first */ }
 80006c8:	bf00      	nop
 80006ca:	f7ff ffc9 	bl	8000660 <getDHT11Pin>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d0fa      	beq.n	80006ca <waitForDHT11PullDown+0x16>
  }
  while (getDHT11Pin() == 1) { // wait for pull down
 80006d4:	e002      	b.n	80006dc <waitForDHT11PullDown+0x28>
	  upCycles++;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	3301      	adds	r3, #1
 80006da:	607b      	str	r3, [r7, #4]
  while (getDHT11Pin() == 1) { // wait for pull down
 80006dc:	f7ff ffc0 	bl	8000660 <getDHT11Pin>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d0f7      	beq.n	80006d6 <waitForDHT11PullDown+0x22>
  }
  return upCycles;
 80006e6:	687b      	ldr	r3, [r7, #4]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <readData>:

uint8_t readData(uint32_t thresholdCycles) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  uint8_t i,j;
  for (j=0; j<8; j++) {
 80006f8:	2300      	movs	r3, #0
 80006fa:	73bb      	strb	r3, [r7, #14]
 80006fc:	e026      	b.n	800074c <readData+0x5c>
    waitForDHT11PullUp();
 80006fe:	f7ff ffbb 	bl	8000678 <waitForDHT11PullUp>
	uint32_t upCycles = waitForDHT11PullDown();
 8000702:	f7ff ffd7 	bl	80006b4 <waitForDHT11PullDown>
 8000706:	60b8      	str	r0, [r7, #8]
	if (upCycles > thresholdCycles) {
 8000708:	68ba      	ldr	r2, [r7, #8]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	429a      	cmp	r2, r3
 800070e:	d90c      	bls.n	800072a <readData+0x3a>
      i|= (1<<(7-j));	// bit is 1
 8000710:	7bbb      	ldrb	r3, [r7, #14]
 8000712:	f1c3 0307 	rsb	r3, r3, #7
 8000716:	2201      	movs	r2, #1
 8000718:	fa02 f303 	lsl.w	r3, r2, r3
 800071c:	b25a      	sxtb	r2, r3
 800071e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000722:	4313      	orrs	r3, r2
 8000724:	b25b      	sxtb	r3, r3
 8000726:	73fb      	strb	r3, [r7, #15]
 8000728:	e00d      	b.n	8000746 <readData+0x56>
	} else {
      i&= ~(1<<(7-j));  // bit is 0
 800072a:	7bbb      	ldrb	r3, [r7, #14]
 800072c:	f1c3 0307 	rsb	r3, r3, #7
 8000730:	2201      	movs	r2, #1
 8000732:	fa02 f303 	lsl.w	r3, r2, r3
 8000736:	b25b      	sxtb	r3, r3
 8000738:	43db      	mvns	r3, r3
 800073a:	b25a      	sxtb	r2, r3
 800073c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000740:	4013      	ands	r3, r2
 8000742:	b25b      	sxtb	r3, r3
 8000744:	73fb      	strb	r3, [r7, #15]
  for (j=0; j<8; j++) {
 8000746:	7bbb      	ldrb	r3, [r7, #14]
 8000748:	3301      	adds	r3, #1
 800074a:	73bb      	strb	r3, [r7, #14]
 800074c:	7bbb      	ldrb	r3, [r7, #14]
 800074e:	2b07      	cmp	r3, #7
 8000750:	d9d5      	bls.n	80006fe <readData+0xe>
	}
  }
  return i;
 8000752:	7bfb      	ldrb	r3, [r7, #15]
}
 8000754:	4618      	mov	r0, r3
 8000756:	3710      	adds	r7, #16
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <getClimate>:

uint8_t getClimate() {
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
	uint8_t integralTempData;
	uint8_t decimalTempData;
	uint8_t checkSum;

	// initial state for DHT11
	setDHT11ToInputMode();
 8000762:	f7ff ff64 	bl	800062e <setDHT11ToInputMode>
	HAL_Delay(1000); // to pass unstable status of the DHT11 sensor
 8000766:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800076a:	f000 fce9 	bl	8001140 <HAL_Delay>

	// start communication
	setDHT11ToOutputMode();
 800076e:	f7ff ff57 	bl	8000620 <setDHT11ToOutputMode>
	setDHT11Pin(0);
 8000772:	2000      	movs	r0, #0
 8000774:	f7ff ff62 	bl	800063c <setDHT11Pin>
	HAL_Delay(18);
 8000778:	2012      	movs	r0, #18
 800077a:	f000 fce1 	bl	8001140 <HAL_Delay>
	setDHT11Pin(1);
 800077e:	2001      	movs	r0, #1
 8000780:	f7ff ff5c 	bl	800063c <setDHT11Pin>

	// wait for DHT11 response
	setDHT11ToInputMode();
 8000784:	f7ff ff53 	bl	800062e <setDHT11ToInputMode>
	waitForDHT11PullUp();
 8000788:	f7ff ff76 	bl	8000678 <waitForDHT11PullUp>
	uint32_t upCycles = waitForDHT11PullDown();
 800078c:	f7ff ff92 	bl	80006b4 <waitForDHT11PullDown>
 8000790:	60f8      	str	r0, [r7, #12]
	// upCycles of last pull-down is equivalent to 80 microseconds
	// Use this to interpolate data transmission bit responses knowing that:
	//   - bit 0: 26-28 microseconds
	//   - bit 1: 70 microseconds
	//
	uint32_t thresholdCycles = (upCycles / 2) + (10 * upCycles / 80); // ~50 microseconds
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	0859      	lsrs	r1, r3, #1
 8000796:	68fa      	ldr	r2, [r7, #12]
 8000798:	4613      	mov	r3, r2
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	4413      	add	r3, r2
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	461a      	mov	r2, r3
 80007a2:	4b20      	ldr	r3, [pc, #128]	; (8000824 <getClimate+0xc8>)
 80007a4:	fba3 2302 	umull	r2, r3, r3, r2
 80007a8:	099b      	lsrs	r3, r3, #6
 80007aa:	440b      	add	r3, r1
 80007ac:	60bb      	str	r3, [r7, #8]

	// start sensor data transmission
	integralHumidityData = readData(thresholdCycles);
 80007ae:	68b8      	ldr	r0, [r7, #8]
 80007b0:	f7ff ff9e 	bl	80006f0 <readData>
 80007b4:	4603      	mov	r3, r0
 80007b6:	71fb      	strb	r3, [r7, #7]
	decimalHumidityData = readData(thresholdCycles);
 80007b8:	68b8      	ldr	r0, [r7, #8]
 80007ba:	f7ff ff99 	bl	80006f0 <readData>
 80007be:	4603      	mov	r3, r0
 80007c0:	71bb      	strb	r3, [r7, #6]
	integralTempData = readData(thresholdCycles);
 80007c2:	68b8      	ldr	r0, [r7, #8]
 80007c4:	f7ff ff94 	bl	80006f0 <readData>
 80007c8:	4603      	mov	r3, r0
 80007ca:	717b      	strb	r3, [r7, #5]
	decimalTempData = readData(thresholdCycles);
 80007cc:	68b8      	ldr	r0, [r7, #8]
 80007ce:	f7ff ff8f 	bl	80006f0 <readData>
 80007d2:	4603      	mov	r3, r0
 80007d4:	713b      	strb	r3, [r7, #4]
	checkSum = readData(thresholdCycles);
 80007d6:	68b8      	ldr	r0, [r7, #8]
 80007d8:	f7ff ff8a 	bl	80006f0 <readData>
 80007dc:	4603      	mov	r3, r0
 80007de:	70fb      	strb	r3, [r7, #3]

	uint8_t dataSum  = integralHumidityData + decimalHumidityData + integralTempData + decimalTempData;
 80007e0:	79fa      	ldrb	r2, [r7, #7]
 80007e2:	79bb      	ldrb	r3, [r7, #6]
 80007e4:	4413      	add	r3, r2
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	797b      	ldrb	r3, [r7, #5]
 80007ea:	4413      	add	r3, r2
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	793b      	ldrb	r3, [r7, #4]
 80007f0:	4413      	add	r3, r2
 80007f2:	70bb      	strb	r3, [r7, #2]

	if (checkSum != dataSum) {
 80007f4:	78fa      	ldrb	r2, [r7, #3]
 80007f6:	78bb      	ldrb	r3, [r7, #2]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d001      	beq.n	8000800 <getClimate+0xa4>
	  return 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	e00c      	b.n	800081a <getClimate+0xbe>
	}

	climateEvent.integralTemp = integralTempData;
 8000800:	4a09      	ldr	r2, [pc, #36]	; (8000828 <getClimate+0xcc>)
 8000802:	797b      	ldrb	r3, [r7, #5]
 8000804:	7093      	strb	r3, [r2, #2]
	climateEvent.decimalTemp = decimalTempData;
 8000806:	4a08      	ldr	r2, [pc, #32]	; (8000828 <getClimate+0xcc>)
 8000808:	793b      	ldrb	r3, [r7, #4]
 800080a:	70d3      	strb	r3, [r2, #3]
	climateEvent.integralHumidity = integralHumidityData;
 800080c:	4a06      	ldr	r2, [pc, #24]	; (8000828 <getClimate+0xcc>)
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	7013      	strb	r3, [r2, #0]
	climateEvent.decimalHumidity = decimalHumidityData;
 8000812:	4a05      	ldr	r2, [pc, #20]	; (8000828 <getClimate+0xcc>)
 8000814:	79bb      	ldrb	r3, [r7, #6]
 8000816:	7053      	strb	r3, [r2, #1]

	return 1;
 8000818:	2301      	movs	r3, #1
}
 800081a:	4618      	mov	r0, r3
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	cccccccd 	.word	0xcccccccd
 8000828:	2000008c 	.word	0x2000008c

0800082c <writeClimateEventToMicroSD>:

// microSD code

void writeClimateEventToMicroSD()
{
 800082c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800082e:	b08d      	sub	sp, #52	; 0x34
 8000830:	af08      	add	r7, sp, #32
	// See hack in: BSP_PlatformIsDetected
	fRes = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 8000832:	2200      	movs	r2, #0
 8000834:	4937      	ldr	r1, [pc, #220]	; (8000914 <writeClimateEventToMicroSD+0xe8>)
 8000836:	4838      	ldr	r0, [pc, #224]	; (8000918 <writeClimateEventToMicroSD+0xec>)
 8000838:	f008 f98a 	bl	8008b50 <f_mount>
 800083c:	4603      	mov	r3, r0
 800083e:	461a      	mov	r2, r3
 8000840:	4b36      	ldr	r3, [pc, #216]	; (800091c <writeClimateEventToMicroSD+0xf0>)
 8000842:	701a      	strb	r2, [r3, #0]
	if (fRes != FR_OK)
 8000844:	4b35      	ldr	r3, [pc, #212]	; (800091c <writeClimateEventToMicroSD+0xf0>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <writeClimateEventToMicroSD+0x24>
	{
		Error_Handler();
 800084c:	f000 fa92 	bl	8000d74 <Error_Handler>
	}

	sprintf(filename, "%04d%02d%02d%02d.CSV", 2000 + date.Year, date.Month, date.Date, time.Hours);
 8000850:	4b33      	ldr	r3, [pc, #204]	; (8000920 <writeClimateEventToMicroSD+0xf4>)
 8000852:	78db      	ldrb	r3, [r3, #3]
 8000854:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8000858:	4b31      	ldr	r3, [pc, #196]	; (8000920 <writeClimateEventToMicroSD+0xf4>)
 800085a:	785b      	ldrb	r3, [r3, #1]
 800085c:	4618      	mov	r0, r3
 800085e:	4b30      	ldr	r3, [pc, #192]	; (8000920 <writeClimateEventToMicroSD+0xf4>)
 8000860:	789b      	ldrb	r3, [r3, #2]
 8000862:	4619      	mov	r1, r3
 8000864:	4b2f      	ldr	r3, [pc, #188]	; (8000924 <writeClimateEventToMicroSD+0xf8>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	9301      	str	r3, [sp, #4]
 800086a:	9100      	str	r1, [sp, #0]
 800086c:	4603      	mov	r3, r0
 800086e:	492e      	ldr	r1, [pc, #184]	; (8000928 <writeClimateEventToMicroSD+0xfc>)
 8000870:	482e      	ldr	r0, [pc, #184]	; (800092c <writeClimateEventToMicroSD+0x100>)
 8000872:	f009 f8e5 	bl	8009a40 <siprintf>

	fRes = f_open(&MyFile, filename, FA_OPEN_APPEND|FA_WRITE);
 8000876:	2232      	movs	r2, #50	; 0x32
 8000878:	492c      	ldr	r1, [pc, #176]	; (800092c <writeClimateEventToMicroSD+0x100>)
 800087a:	482d      	ldr	r0, [pc, #180]	; (8000930 <writeClimateEventToMicroSD+0x104>)
 800087c:	f008 f9ae 	bl	8008bdc <f_open>
 8000880:	4603      	mov	r3, r0
 8000882:	461a      	mov	r2, r3
 8000884:	4b25      	ldr	r3, [pc, #148]	; (800091c <writeClimateEventToMicroSD+0xf0>)
 8000886:	701a      	strb	r2, [r3, #0]
	if (fRes != FR_OK)
 8000888:	4b24      	ldr	r3, [pc, #144]	; (800091c <writeClimateEventToMicroSD+0xf0>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <writeClimateEventToMicroSD+0x68>
	{
		Error_Handler();
 8000890:	f000 fa70 	bl	8000d74 <Error_Handler>
	}

	int length = sprintf((char*)writeBuffer, "%04d-%02d-%02dT%02d:%02d:%02d,%d.%d°C,%d.%d%%\n",
			2000 + date.Year, date.Month, date.Date,
 8000894:	4b22      	ldr	r3, [pc, #136]	; (8000920 <writeClimateEventToMicroSD+0xf4>)
 8000896:	78db      	ldrb	r3, [r3, #3]
	int length = sprintf((char*)writeBuffer, "%04d-%02d-%02dT%02d:%02d:%02d,%d.%d°C,%d.%d%%\n",
 8000898:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
			2000 + date.Year, date.Month, date.Date,
 800089c:	4b20      	ldr	r3, [pc, #128]	; (8000920 <writeClimateEventToMicroSD+0xf4>)
 800089e:	785b      	ldrb	r3, [r3, #1]
	int length = sprintf((char*)writeBuffer, "%04d-%02d-%02dT%02d:%02d:%02d,%d.%d°C,%d.%d%%\n",
 80008a0:	469c      	mov	ip, r3
			2000 + date.Year, date.Month, date.Date,
 80008a2:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <writeClimateEventToMicroSD+0xf4>)
 80008a4:	789b      	ldrb	r3, [r3, #2]
	int length = sprintf((char*)writeBuffer, "%04d-%02d-%02dT%02d:%02d:%02d,%d.%d°C,%d.%d%%\n",
 80008a6:	4619      	mov	r1, r3
			time.Hours, time.Minutes, time.Seconds,
 80008a8:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <writeClimateEventToMicroSD+0xf8>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
	int length = sprintf((char*)writeBuffer, "%04d-%02d-%02dT%02d:%02d:%02d,%d.%d°C,%d.%d%%\n",
 80008ac:	4618      	mov	r0, r3
			time.Hours, time.Minutes, time.Seconds,
 80008ae:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <writeClimateEventToMicroSD+0xf8>)
 80008b0:	785b      	ldrb	r3, [r3, #1]
	int length = sprintf((char*)writeBuffer, "%04d-%02d-%02dT%02d:%02d:%02d,%d.%d°C,%d.%d%%\n",
 80008b2:	461c      	mov	r4, r3
			time.Hours, time.Minutes, time.Seconds,
 80008b4:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <writeClimateEventToMicroSD+0xf8>)
 80008b6:	789b      	ldrb	r3, [r3, #2]
	int length = sprintf((char*)writeBuffer, "%04d-%02d-%02dT%02d:%02d:%02d,%d.%d°C,%d.%d%%\n",
 80008b8:	461d      	mov	r5, r3
			climateEvent.integralTemp, climateEvent.decimalTemp,
 80008ba:	4b1e      	ldr	r3, [pc, #120]	; (8000934 <writeClimateEventToMicroSD+0x108>)
 80008bc:	789b      	ldrb	r3, [r3, #2]
	int length = sprintf((char*)writeBuffer, "%04d-%02d-%02dT%02d:%02d:%02d,%d.%d°C,%d.%d%%\n",
 80008be:	461e      	mov	r6, r3
			climateEvent.integralTemp, climateEvent.decimalTemp,
 80008c0:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <writeClimateEventToMicroSD+0x108>)
 80008c2:	78db      	ldrb	r3, [r3, #3]
	int length = sprintf((char*)writeBuffer, "%04d-%02d-%02dT%02d:%02d:%02d,%d.%d°C,%d.%d%%\n",
 80008c4:	607b      	str	r3, [r7, #4]
			climateEvent.integralHumidity, climateEvent.decimalHumidity);
 80008c6:	4b1b      	ldr	r3, [pc, #108]	; (8000934 <writeClimateEventToMicroSD+0x108>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
	int length = sprintf((char*)writeBuffer, "%04d-%02d-%02dT%02d:%02d:%02d,%d.%d°C,%d.%d%%\n",
 80008ca:	603b      	str	r3, [r7, #0]
			climateEvent.integralHumidity, climateEvent.decimalHumidity);
 80008cc:	4b19      	ldr	r3, [pc, #100]	; (8000934 <writeClimateEventToMicroSD+0x108>)
 80008ce:	785b      	ldrb	r3, [r3, #1]
	int length = sprintf((char*)writeBuffer, "%04d-%02d-%02dT%02d:%02d:%02d,%d.%d°C,%d.%d%%\n",
 80008d0:	9307      	str	r3, [sp, #28]
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	9306      	str	r3, [sp, #24]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	9305      	str	r3, [sp, #20]
 80008da:	9604      	str	r6, [sp, #16]
 80008dc:	9503      	str	r5, [sp, #12]
 80008de:	9402      	str	r4, [sp, #8]
 80008e0:	9001      	str	r0, [sp, #4]
 80008e2:	9100      	str	r1, [sp, #0]
 80008e4:	4663      	mov	r3, ip
 80008e6:	4914      	ldr	r1, [pc, #80]	; (8000938 <writeClimateEventToMicroSD+0x10c>)
 80008e8:	4814      	ldr	r0, [pc, #80]	; (800093c <writeClimateEventToMicroSD+0x110>)
 80008ea:	f009 f8a9 	bl	8009a40 <siprintf>
 80008ee:	60f8      	str	r0, [r7, #12]

	f_write(&MyFile, writeBuffer, length, &byteswritten);
 80008f0:	68fa      	ldr	r2, [r7, #12]
 80008f2:	4b13      	ldr	r3, [pc, #76]	; (8000940 <writeClimateEventToMicroSD+0x114>)
 80008f4:	4911      	ldr	r1, [pc, #68]	; (800093c <writeClimateEventToMicroSD+0x110>)
 80008f6:	480e      	ldr	r0, [pc, #56]	; (8000930 <writeClimateEventToMicroSD+0x104>)
 80008f8:	f008 fc2b 	bl	8009152 <f_write>

	f_close(&MyFile);
 80008fc:	480c      	ldr	r0, [pc, #48]	; (8000930 <writeClimateEventToMicroSD+0x104>)
 80008fe:	f008 ff20 	bl	8009742 <f_close>

	f_mount(0, (TCHAR const*)SDPath, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	4903      	ldr	r1, [pc, #12]	; (8000914 <writeClimateEventToMicroSD+0xe8>)
 8000906:	2000      	movs	r0, #0
 8000908:	f008 f922 	bl	8008b50 <f_mount>
}
 800090c:	bf00      	nop
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000914:	20000250 	.word	0x20000250
 8000918:	200012d0 	.word	0x200012d0
 800091c:	2000023c 	.word	0x2000023c
 8000920:	200000a8 	.word	0x200000a8
 8000924:	20000090 	.word	0x20000090
 8000928:	0800a264 	.word	0x0800a264
 800092c:	20000240 	.word	0x20000240
 8000930:	20000278 	.word	0x20000278
 8000934:	2000008c 	.word	0x2000008c
 8000938:	0800a27c 	.word	0x0800a27c
 800093c:	20000180 	.word	0x20000180
 8000940:	200001b4 	.word	0x200001b4

08000944 <doPersistClimateEvent>:

// main event handler

void doPersistClimateEvent() {
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000948:	2201      	movs	r2, #1
 800094a:	2102      	movs	r1, #2
 800094c:	4808      	ldr	r0, [pc, #32]	; (8000970 <doPersistClimateEvent+0x2c>)
 800094e:	f000 ff0f 	bl	8001770 <HAL_GPIO_WritePin>
	if (getClimate()) {
 8000952:	f7ff ff03 	bl	800075c <getClimate>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <doPersistClimateEvent+0x1c>
		writeClimateEventToMicroSD();
 800095c:	f7ff ff66 	bl	800082c <writeClimateEventToMicroSD>
	}
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000960:	2200      	movs	r2, #0
 8000962:	2102      	movs	r1, #2
 8000964:	4802      	ldr	r0, [pc, #8]	; (8000970 <doPersistClimateEvent+0x2c>)
 8000966:	f000 ff03 	bl	8001770 <HAL_GPIO_WritePin>
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40022000 	.word	0x40022000

08000974 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000978:	f000 fb85 	bl	8001086 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097c:	f000 f818 	bl	80009b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000980:	f000 f974 	bl	8000c6c <MX_GPIO_Init>
  MX_RTC_Init();
 8000984:	f000 f8a8 	bl	8000ad8 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8000988:	f000 f950 	bl	8000c2c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800098c:	f004 fb86 	bl	800509c <MX_FATFS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_Delay(1000);
 8000990:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000994:	f000 fbd4 	bl	8001140 <HAL_Delay>

	if (persistEvent == 1)
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <main+0x38>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d1f7      	bne.n	8000990 <main+0x1c>
	{
		persistEvent = 0;
 80009a0:	4b02      	ldr	r3, [pc, #8]	; (80009ac <main+0x38>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	701a      	strb	r2, [r3, #0]
		doPersistClimateEvent();
 80009a6:	f7ff ffcd 	bl	8000944 <doPersistClimateEvent>
	HAL_Delay(1000);
 80009aa:	e7f1      	b.n	8000990 <main+0x1c>
 80009ac:	20000274 	.word	0x20000274

080009b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b0b4      	sub	sp, #208	; 0xd0
 80009b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80009ba:	2230      	movs	r2, #48	; 0x30
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f009 f836 	bl	8009a30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009d4:	f107 0308 	add.w	r3, r7, #8
 80009d8:	2284      	movs	r2, #132	; 0x84
 80009da:	2100      	movs	r1, #0
 80009dc:	4618      	mov	r0, r3
 80009de:	f009 f827 	bl	8009a30 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e2:	4b3a      	ldr	r3, [pc, #232]	; (8000acc <SystemClock_Config+0x11c>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	4a39      	ldr	r2, [pc, #228]	; (8000acc <SystemClock_Config+0x11c>)
 80009e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ec:	6413      	str	r3, [r2, #64]	; 0x40
 80009ee:	4b37      	ldr	r3, [pc, #220]	; (8000acc <SystemClock_Config+0x11c>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009fa:	4b35      	ldr	r3, [pc, #212]	; (8000ad0 <SystemClock_Config+0x120>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a02:	4a33      	ldr	r2, [pc, #204]	; (8000ad0 <SystemClock_Config+0x120>)
 8000a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a08:	6013      	str	r3, [r2, #0]
 8000a0a:	4b31      	ldr	r3, [pc, #196]	; (8000ad0 <SystemClock_Config+0x120>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000a16:	2309      	movs	r3, #9
 8000a18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a24:	2301      	movs	r3, #1
 8000a26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a30:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000a38:	230c      	movs	r3, #12
 8000a3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000a3e:	233c      	movs	r3, #60	; 0x3c
 8000a40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a44:	2302      	movs	r3, #2
 8000a46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000a4a:	2305      	movs	r3, #5
 8000a4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a50:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f000 febf 	bl	80017d8 <HAL_RCC_OscConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a60:	f000 f988 	bl	8000d74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a64:	230f      	movs	r3, #15
 8000a66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a7a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a84:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000a88:	2102      	movs	r1, #2
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f001 f914 	bl	8001cb8 <HAL_RCC_ClockConfig>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000a96:	f000 f96d 	bl	8000d74 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_SDMMC1
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <SystemClock_Config+0x124>)
 8000a9c:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000a9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aa2:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ab0:	f107 0308 	add.w	r3, r7, #8
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f001 fa99 	bl	8001fec <HAL_RCCEx_PeriphCLKConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8000ac0:	f000 f958 	bl	8000d74 <Error_Handler>
  }
}
 8000ac4:	bf00      	nop
 8000ac6:	37d0      	adds	r7, #208	; 0xd0
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40007000 	.word	0x40007000
 8000ad4:	00a00020 	.word	0x00a00020

08000ad8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b092      	sub	sp, #72	; 0x48
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000ade:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
 8000aec:	611a      	str	r2, [r3, #16]
 8000aee:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000af0:	2300      	movs	r3, #0
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8000af4:	463b      	mov	r3, r7
 8000af6:	222c      	movs	r2, #44	; 0x2c
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f008 ff98 	bl	8009a30 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000b00:	4b47      	ldr	r3, [pc, #284]	; (8000c20 <MX_RTC_Init+0x148>)
 8000b02:	4a48      	ldr	r2, [pc, #288]	; (8000c24 <MX_RTC_Init+0x14c>)
 8000b04:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b06:	4b46      	ldr	r3, [pc, #280]	; (8000c20 <MX_RTC_Init+0x148>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b0c:	4b44      	ldr	r3, [pc, #272]	; (8000c20 <MX_RTC_Init+0x148>)
 8000b0e:	227f      	movs	r2, #127	; 0x7f
 8000b10:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b12:	4b43      	ldr	r3, [pc, #268]	; (8000c20 <MX_RTC_Init+0x148>)
 8000b14:	22ff      	movs	r2, #255	; 0xff
 8000b16:	60da      	str	r2, [r3, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b18:	4841      	ldr	r0, [pc, #260]	; (8000c20 <MX_RTC_Init+0x148>)
 8000b1a:	f001 fe55 	bl	80027c8 <HAL_RTC_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_RTC_Init+0x50>
  {
    Error_Handler();
 8000b24:	f000 f926 	bl	8000d74 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */

  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) == 0x777) {
 8000b28:	2101      	movs	r1, #1
 8000b2a:	483d      	ldr	r0, [pc, #244]	; (8000c20 <MX_RTC_Init+0x148>)
 8000b2c:	f002 fb94 	bl	8003258 <HAL_RTCEx_BKUPRead>
 8000b30:	4602      	mov	r2, r0
 8000b32:	f240 7377 	movw	r3, #1911	; 0x777
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d112      	bne.n	8000b60 <MX_RTC_Init+0x88>
	  // If clock has been already initialized, only set the alarm interrupt
	  HAL_RTC_GetAlarm(&hrtc, &sAlarm, RTC_ALARM_A, RTC_FORMAT_BIN);
 8000b3a:	4639      	mov	r1, r7
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b42:	4837      	ldr	r0, [pc, #220]	; (8000c20 <MX_RTC_Init+0x148>)
 8000b44:	f002 fa08 	bl	8002f58 <HAL_RTC_GetAlarm>
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK) {
 8000b48:	463b      	mov	r3, r7
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4834      	ldr	r0, [pc, #208]	; (8000c20 <MX_RTC_Init+0x148>)
 8000b50:	f002 f8ca 	bl	8002ce8 <HAL_RTC_SetAlarm_IT>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d05d      	beq.n	8000c16 <MX_RTC_Init+0x13e>
		  Error_Handler();
 8000b5a:	f000 f90b 	bl	8000d74 <Error_Handler>
 8000b5e:	e05b      	b.n	8000c18 <MX_RTC_Init+0x140>
	  }
	  return;
  } else {
	  // Store already-initialized status code in a backup register
	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x777);
 8000b60:	f240 7277 	movw	r2, #1911	; 0x777
 8000b64:	2101      	movs	r1, #1
 8000b66:	482e      	ldr	r0, [pc, #184]	; (8000c20 <MX_RTC_Init+0x148>)
 8000b68:	f002 fb5c 	bl	8003224 <HAL_RTCEx_BKUPWrite>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 22;
 8000b6c:	2316      	movs	r3, #22
 8000b6e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 24;
 8000b72:	2318      	movs	r3, #24
 8000b74:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 30;
 8000b78:	231e      	movs	r3, #30
 8000b7a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b82:	2300      	movs	r3, #0
 8000b84:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000b86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4824      	ldr	r0, [pc, #144]	; (8000c20 <MX_RTC_Init+0x148>)
 8000b90:	f001 fe96 	bl	80028c0 <HAL_RTC_SetTime>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 8000b9a:	f000 f8eb 	bl	8000d74 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8000b9e:	2307      	movs	r3, #7
 8000ba0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 26;
 8000baa:	231a      	movs	r3, #26
 8000bac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 20;
 8000bb0:	2314      	movs	r3, #20
 8000bb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000bb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bba:	2200      	movs	r2, #0
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4818      	ldr	r0, [pc, #96]	; (8000c20 <MX_RTC_Init+0x148>)
 8000bc0:	f001 ff9a 	bl	8002af8 <HAL_RTC_SetDate>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_RTC_Init+0xf6>
  {
    Error_Handler();
 8000bca:	f000 f8d3 	bl	8000d74 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <MX_RTC_Init+0x150>)
 8000be8:	61bb      	str	r3, [r7, #24]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 1;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8000bf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000bfe:	463b      	mov	r3, r7
 8000c00:	2200      	movs	r2, #0
 8000c02:	4619      	mov	r1, r3
 8000c04:	4806      	ldr	r0, [pc, #24]	; (8000c20 <MX_RTC_Init+0x148>)
 8000c06:	f002 f86f 	bl	8002ce8 <HAL_RTC_SetAlarm_IT>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d003      	beq.n	8000c18 <MX_RTC_Init+0x140>
  {
    Error_Handler();
 8000c10:	f000 f8b0 	bl	8000d74 <Error_Handler>
 8000c14:	e000      	b.n	8000c18 <MX_RTC_Init+0x140>
	  return;
 8000c16:	bf00      	nop
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c18:	3748      	adds	r7, #72	; 0x48
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000254 	.word	0x20000254
 8000c24:	40002800 	.word	0x40002800
 8000c28:	80808000 	.word	0x80808000

08000c2c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <MX_SDMMC1_SD_Init+0x38>)
 8000c32:	4a0d      	ldr	r2, [pc, #52]	; (8000c68 <MX_SDMMC1_SD_Init+0x3c>)
 8000c34:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000c36:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <MX_SDMMC1_SD_Init+0x38>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000c3c:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <MX_SDMMC1_SD_Init+0x38>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000c42:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <MX_SDMMC1_SD_Init+0x38>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <MX_SDMMC1_SD_Init+0x38>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c4e:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <MX_SDMMC1_SD_Init+0x38>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000c54:	4b03      	ldr	r3, [pc, #12]	; (8000c64 <MX_SDMMC1_SD_Init+0x38>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	200001b8 	.word	0x200001b8
 8000c68:	40012c00 	.word	0x40012c00

08000c6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	; 0x28
 8000c70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c72:	f107 0314 	add.w	r3, r7, #20
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
 8000c7e:	60da      	str	r2, [r3, #12]
 8000c80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c82:	4b39      	ldr	r3, [pc, #228]	; (8000d68 <MX_GPIO_Init+0xfc>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a38      	ldr	r2, [pc, #224]	; (8000d68 <MX_GPIO_Init+0xfc>)
 8000c88:	f043 0304 	orr.w	r3, r3, #4
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b36      	ldr	r3, [pc, #216]	; (8000d68 <MX_GPIO_Init+0xfc>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0304 	and.w	r3, r3, #4
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c9a:	4b33      	ldr	r3, [pc, #204]	; (8000d68 <MX_GPIO_Init+0xfc>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a32      	ldr	r2, [pc, #200]	; (8000d68 <MX_GPIO_Init+0xfc>)
 8000ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b30      	ldr	r3, [pc, #192]	; (8000d68 <MX_GPIO_Init+0xfc>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb2:	4b2d      	ldr	r3, [pc, #180]	; (8000d68 <MX_GPIO_Init+0xfc>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a2c      	ldr	r2, [pc, #176]	; (8000d68 <MX_GPIO_Init+0xfc>)
 8000cb8:	f043 0308 	orr.w	r3, r3, #8
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b2a      	ldr	r3, [pc, #168]	; (8000d68 <MX_GPIO_Init+0xfc>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0308 	and.w	r3, r3, #8
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cca:	4b27      	ldr	r3, [pc, #156]	; (8000d68 <MX_GPIO_Init+0xfc>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a26      	ldr	r2, [pc, #152]	; (8000d68 <MX_GPIO_Init+0xfc>)
 8000cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b24      	ldr	r3, [pc, #144]	; (8000d68 <MX_GPIO_Init+0xfc>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ce2:	4b21      	ldr	r3, [pc, #132]	; (8000d68 <MX_GPIO_Init+0xfc>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a20      	ldr	r2, [pc, #128]	; (8000d68 <MX_GPIO_Init+0xfc>)
 8000ce8:	f043 0320 	orr.w	r3, r3, #32
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b1e      	ldr	r3, [pc, #120]	; (8000d68 <MX_GPIO_Init+0xfc>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0320 	and.w	r3, r3, #32
 8000cf6:	603b      	str	r3, [r7, #0]
 8000cf8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2102      	movs	r1, #2
 8000cfe:	481b      	ldr	r0, [pc, #108]	; (8000d6c <MX_GPIO_Init+0x100>)
 8000d00:	f000 fd36 	bl	8001770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2140      	movs	r1, #64	; 0x40
 8000d08:	4819      	ldr	r0, [pc, #100]	; (8000d70 <MX_GPIO_Init+0x104>)
 8000d0a:	f000 fd31 	bl	8001770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4619      	mov	r1, r3
 8000d22:	4812      	ldr	r0, [pc, #72]	; (8000d6c <MX_GPIO_Init+0x100>)
 8000d24:	f000 fb62 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	480b      	ldr	r0, [pc, #44]	; (8000d6c <MX_GPIO_Init+0x100>)
 8000d40:	f000 fb54 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8000d44:	2340      	movs	r3, #64	; 0x40
 8000d46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4805      	ldr	r0, [pc, #20]	; (8000d70 <MX_GPIO_Init+0x104>)
 8000d5c:	f000 fb46 	bl	80013ec <HAL_GPIO_Init>

}
 8000d60:	bf00      	nop
 8000d62:	3728      	adds	r7, #40	; 0x28
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40022000 	.word	0x40022000
 8000d70:	40021400 	.word	0x40021400

08000d74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while (1) {
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000d78:	2102      	movs	r1, #2
 8000d7a:	4804      	ldr	r0, [pc, #16]	; (8000d8c <Error_Handler+0x18>)
 8000d7c:	f000 fd11 	bl	80017a2 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000d80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d84:	f000 f9dc 	bl	8001140 <HAL_Delay>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000d88:	e7f6      	b.n	8000d78 <Error_Handler+0x4>
 8000d8a:	bf00      	nop
 8000d8c:	40022000 	.word	0x40022000

08000d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <HAL_MspInit+0x44>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	4a0e      	ldr	r2, [pc, #56]	; (8000dd4 <HAL_MspInit+0x44>)
 8000d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da0:	6413      	str	r3, [r2, #64]	; 0x40
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <HAL_MspInit+0x44>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <HAL_MspInit+0x44>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	4a08      	ldr	r2, [pc, #32]	; (8000dd4 <HAL_MspInit+0x44>)
 8000db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_MspInit+0x44>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	40023800 	.word	0x40023800

08000dd8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <HAL_RTC_MspInit+0x38>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d10d      	bne.n	8000e06 <HAL_RTC_MspInit+0x2e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <HAL_RTC_MspInit+0x3c>)
 8000dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dee:	4a09      	ldr	r2, [pc, #36]	; (8000e14 <HAL_RTC_MspInit+0x3c>)
 8000df0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000df4:	6713      	str	r3, [r2, #112]	; 0x70
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2100      	movs	r1, #0
 8000dfa:	2029      	movs	r0, #41	; 0x29
 8000dfc:	f000 fa9d 	bl	800133a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000e00:	2029      	movs	r0, #41	; 0x29
 8000e02:	f000 fab6 	bl	8001372 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40002800 	.word	0x40002800
 8000e14:	40023800 	.word	0x40023800

08000e18 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	; 0x28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a29      	ldr	r2, [pc, #164]	; (8000edc <HAL_SD_MspInit+0xc4>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d14c      	bne.n	8000ed4 <HAL_SD_MspInit+0xbc>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000e3a:	4b29      	ldr	r3, [pc, #164]	; (8000ee0 <HAL_SD_MspInit+0xc8>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3e:	4a28      	ldr	r2, [pc, #160]	; (8000ee0 <HAL_SD_MspInit+0xc8>)
 8000e40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e44:	6453      	str	r3, [r2, #68]	; 0x44
 8000e46:	4b26      	ldr	r3, [pc, #152]	; (8000ee0 <HAL_SD_MspInit+0xc8>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e52:	4b23      	ldr	r3, [pc, #140]	; (8000ee0 <HAL_SD_MspInit+0xc8>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a22      	ldr	r2, [pc, #136]	; (8000ee0 <HAL_SD_MspInit+0xc8>)
 8000e58:	f043 0304 	orr.w	r3, r3, #4
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b20      	ldr	r3, [pc, #128]	; (8000ee0 <HAL_SD_MspInit+0xc8>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0304 	and.w	r3, r3, #4
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ee0 <HAL_SD_MspInit+0xc8>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a1c      	ldr	r2, [pc, #112]	; (8000ee0 <HAL_SD_MspInit+0xc8>)
 8000e70:	f043 0308 	orr.w	r3, r3, #8
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b1a      	ldr	r3, [pc, #104]	; (8000ee0 <HAL_SD_MspInit+0xc8>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0308 	and.w	r3, r3, #8
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration    
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8000e82:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e90:	2303      	movs	r3, #3
 8000e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000e94:	230c      	movs	r3, #12
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4811      	ldr	r0, [pc, #68]	; (8000ee4 <HAL_SD_MspInit+0xcc>)
 8000ea0:	f000 faa4 	bl	80013ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ea4:	2304      	movs	r3, #4
 8000ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000eb4:	230c      	movs	r3, #12
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	480a      	ldr	r0, [pc, #40]	; (8000ee8 <HAL_SD_MspInit+0xd0>)
 8000ec0:	f000 fa94 	bl	80013ec <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	2031      	movs	r0, #49	; 0x31
 8000eca:	f000 fa36 	bl	800133a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000ece:	2031      	movs	r0, #49	; 0x31
 8000ed0:	f000 fa4f 	bl	8001372 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000ed4:	bf00      	nop
 8000ed6:	3728      	adds	r7, #40	; 0x28
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40012c00 	.word	0x40012c00
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020800 	.word	0x40020800
 8000ee8:	40020c00 	.word	0x40020c00

08000eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000efe:	e7fe      	b.n	8000efe <HardFault_Handler+0x4>

08000f00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <MemManage_Handler+0x4>

08000f06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <BusFault_Handler+0x4>

08000f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <UsageFault_Handler+0x4>

08000f12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f40:	f000 f8de 	bl	8001100 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms (A and B) interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000f4c:	4802      	ldr	r0, [pc, #8]	; (8000f58 <RTC_Alarm_IRQHandler+0x10>)
 8000f4e:	f002 f893 	bl	8003078 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000254 	.word	0x20000254

08000f5c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8000f60:	4802      	ldr	r0, [pc, #8]	; (8000f6c <SDMMC1_IRQHandler+0x10>)
 8000f62:	f002 fd27 	bl	80039b4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200001b8 	.word	0x200001b8

08000f70 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <_sbrk+0x50>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d102      	bne.n	8000f86 <_sbrk+0x16>
		heap_end = &end;
 8000f80:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <_sbrk+0x50>)
 8000f82:	4a10      	ldr	r2, [pc, #64]	; (8000fc4 <_sbrk+0x54>)
 8000f84:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <_sbrk+0x50>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <_sbrk+0x50>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4413      	add	r3, r2
 8000f94:	466a      	mov	r2, sp
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d907      	bls.n	8000faa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000f9a:	f008 fd1f 	bl	80099dc <__errno>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	230c      	movs	r3, #12
 8000fa2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa8:	e006      	b.n	8000fb8 <_sbrk+0x48>
	}

	heap_end += incr;
 8000faa:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <_sbrk+0x50>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	4a03      	ldr	r2, [pc, #12]	; (8000fc0 <_sbrk+0x50>)
 8000fb4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	200000c0 	.word	0x200000c0
 8000fc4:	20003378 	.word	0x20003378

08000fc8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fcc:	4b15      	ldr	r3, [pc, #84]	; (8001024 <SystemInit+0x5c>)
 8000fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fd2:	4a14      	ldr	r2, [pc, #80]	; (8001024 <SystemInit+0x5c>)
 8000fd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <SystemInit+0x60>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a11      	ldr	r2, [pc, #68]	; (8001028 <SystemInit+0x60>)
 8000fe2:	f043 0301 	orr.w	r3, r3, #1
 8000fe6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <SystemInit+0x60>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <SystemInit+0x60>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	490d      	ldr	r1, [pc, #52]	; (8001028 <SystemInit+0x60>)
 8000ff4:	4b0d      	ldr	r3, [pc, #52]	; (800102c <SystemInit+0x64>)
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <SystemInit+0x60>)
 8000ffc:	4a0c      	ldr	r2, [pc, #48]	; (8001030 <SystemInit+0x68>)
 8000ffe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <SystemInit+0x60>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a08      	ldr	r2, [pc, #32]	; (8001028 <SystemInit+0x60>)
 8001006:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800100a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <SystemInit+0x60>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001012:	4b04      	ldr	r3, [pc, #16]	; (8001024 <SystemInit+0x5c>)
 8001014:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001018:	609a      	str	r2, [r3, #8]
#endif
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000ed00 	.word	0xe000ed00
 8001028:	40023800 	.word	0x40023800
 800102c:	fef6ffff 	.word	0xfef6ffff
 8001030:	24003010 	.word	0x24003010

08001034 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001034:	f8df d034 	ldr.w	sp, [pc, #52]	; 800106c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001038:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800103a:	e003      	b.n	8001044 <LoopCopyDataInit>

0800103c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800103e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001040:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001042:	3104      	adds	r1, #4

08001044 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001044:	480b      	ldr	r0, [pc, #44]	; (8001074 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001046:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001048:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800104a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800104c:	d3f6      	bcc.n	800103c <CopyDataInit>
  ldr  r2, =_sbss
 800104e:	4a0b      	ldr	r2, [pc, #44]	; (800107c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001050:	e002      	b.n	8001058 <LoopFillZerobss>

08001052 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001052:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001054:	f842 3b04 	str.w	r3, [r2], #4

08001058 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001058:	4b09      	ldr	r3, [pc, #36]	; (8001080 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800105a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800105c:	d3f9      	bcc.n	8001052 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800105e:	f7ff ffb3 	bl	8000fc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001062:	f008 fcc1 	bl	80099e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001066:	f7ff fc85 	bl	8000974 <main>
  bx  lr    
 800106a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800106c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001070:	0800a7a8 	.word	0x0800a7a8
  ldr  r0, =_sdata
 8001074:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001078:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 800107c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001080:	20003374 	.word	0x20003374

08001084 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001084:	e7fe      	b.n	8001084 <ADC_IRQHandler>

08001086 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108a:	2003      	movs	r0, #3
 800108c:	f000 f94a 	bl	8001324 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001090:	2000      	movs	r0, #0
 8001092:	f000 f805 	bl	80010a0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001096:	f7ff fe7b 	bl	8000d90 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	bd80      	pop	{r7, pc}

080010a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <HAL_InitTick+0x54>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <HAL_InitTick+0x58>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	4619      	mov	r1, r3
 80010b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 f965 	bl	800138e <HAL_SYSTICK_Config>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e00e      	b.n	80010ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b0f      	cmp	r3, #15
 80010d2:	d80a      	bhi.n	80010ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d4:	2200      	movs	r2, #0
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	f04f 30ff 	mov.w	r0, #4294967295
 80010dc:	f000 f92d 	bl	800133a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e0:	4a06      	ldr	r2, [pc, #24]	; (80010fc <HAL_InitTick+0x5c>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010e6:	2300      	movs	r3, #0
 80010e8:	e000      	b.n	80010ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000008 	.word	0x20000008
 80010fc:	20000004 	.word	0x20000004

08001100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_IncTick+0x20>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	461a      	mov	r2, r3
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <HAL_IncTick+0x24>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4413      	add	r3, r2
 8001110:	4a04      	ldr	r2, [pc, #16]	; (8001124 <HAL_IncTick+0x24>)
 8001112:	6013      	str	r3, [r2, #0]
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	20000008 	.word	0x20000008
 8001124:	2000230c 	.word	0x2000230c

08001128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  return uwTick;
 800112c:	4b03      	ldr	r3, [pc, #12]	; (800113c <HAL_GetTick+0x14>)
 800112e:	681b      	ldr	r3, [r3, #0]
}
 8001130:	4618      	mov	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	2000230c 	.word	0x2000230c

08001140 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001148:	f7ff ffee 	bl	8001128 <HAL_GetTick>
 800114c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001158:	d005      	beq.n	8001166 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <HAL_Delay+0x40>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	461a      	mov	r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4413      	add	r3, r2
 8001164:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001166:	bf00      	nop
 8001168:	f7ff ffde 	bl	8001128 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	429a      	cmp	r2, r3
 8001176:	d8f7      	bhi.n	8001168 <HAL_Delay+0x28>
  {
  }
}
 8001178:	bf00      	nop
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000008 	.word	0x20000008

08001184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <__NVIC_SetPriorityGrouping+0x40>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011a0:	4013      	ands	r3, r2
 80011a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 80011ae:	4313      	orrs	r3, r2
 80011b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b2:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <__NVIC_SetPriorityGrouping+0x40>)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	60d3      	str	r3, [r2, #12]
}
 80011b8:	bf00      	nop
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00
 80011c8:	05fa0000 	.word	0x05fa0000

080011cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <__NVIC_GetPriorityGrouping+0x18>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	0a1b      	lsrs	r3, r3, #8
 80011d6:	f003 0307 	and.w	r3, r3, #7
}
 80011da:	4618      	mov	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	db0b      	blt.n	8001212 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	f003 021f 	and.w	r2, r3, #31
 8001200:	4907      	ldr	r1, [pc, #28]	; (8001220 <__NVIC_EnableIRQ+0x38>)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	095b      	lsrs	r3, r3, #5
 8001208:	2001      	movs	r0, #1
 800120a:	fa00 f202 	lsl.w	r2, r0, r2
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000e100 	.word	0xe000e100

08001224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	6039      	str	r1, [r7, #0]
 800122e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001234:	2b00      	cmp	r3, #0
 8001236:	db0a      	blt.n	800124e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	b2da      	uxtb	r2, r3
 800123c:	490c      	ldr	r1, [pc, #48]	; (8001270 <__NVIC_SetPriority+0x4c>)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	0112      	lsls	r2, r2, #4
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	440b      	add	r3, r1
 8001248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800124c:	e00a      	b.n	8001264 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4908      	ldr	r1, [pc, #32]	; (8001274 <__NVIC_SetPriority+0x50>)
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	3b04      	subs	r3, #4
 800125c:	0112      	lsls	r2, r2, #4
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	440b      	add	r3, r1
 8001262:	761a      	strb	r2, [r3, #24]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000e100 	.word	0xe000e100
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001278:	b480      	push	{r7}
 800127a:	b089      	sub	sp, #36	; 0x24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f1c3 0307 	rsb	r3, r3, #7
 8001292:	2b04      	cmp	r3, #4
 8001294:	bf28      	it	cs
 8001296:	2304      	movcs	r3, #4
 8001298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3304      	adds	r3, #4
 800129e:	2b06      	cmp	r3, #6
 80012a0:	d902      	bls.n	80012a8 <NVIC_EncodePriority+0x30>
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3b03      	subs	r3, #3
 80012a6:	e000      	b.n	80012aa <NVIC_EncodePriority+0x32>
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	f04f 32ff 	mov.w	r2, #4294967295
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43da      	mvns	r2, r3
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	401a      	ands	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c0:	f04f 31ff 	mov.w	r1, #4294967295
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ca:	43d9      	mvns	r1, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	4313      	orrs	r3, r2
         );
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3724      	adds	r7, #36	; 0x24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012f0:	d301      	bcc.n	80012f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012f2:	2301      	movs	r3, #1
 80012f4:	e00f      	b.n	8001316 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f6:	4a0a      	ldr	r2, [pc, #40]	; (8001320 <SysTick_Config+0x40>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012fe:	210f      	movs	r1, #15
 8001300:	f04f 30ff 	mov.w	r0, #4294967295
 8001304:	f7ff ff8e 	bl	8001224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <SysTick_Config+0x40>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130e:	4b04      	ldr	r3, [pc, #16]	; (8001320 <SysTick_Config+0x40>)
 8001310:	2207      	movs	r2, #7
 8001312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	e000e010 	.word	0xe000e010

08001324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff ff29 	bl	8001184 <__NVIC_SetPriorityGrouping>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800133a:	b580      	push	{r7, lr}
 800133c:	b086      	sub	sp, #24
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800134c:	f7ff ff3e 	bl	80011cc <__NVIC_GetPriorityGrouping>
 8001350:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	68b9      	ldr	r1, [r7, #8]
 8001356:	6978      	ldr	r0, [r7, #20]
 8001358:	f7ff ff8e 	bl	8001278 <NVIC_EncodePriority>
 800135c:	4602      	mov	r2, r0
 800135e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001362:	4611      	mov	r1, r2
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff5d 	bl	8001224 <__NVIC_SetPriority>
}
 800136a:	bf00      	nop
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	4603      	mov	r3, r0
 800137a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff31 	bl	80011e8 <__NVIC_EnableIRQ>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff ffa2 	bl	80012e0 <SysTick_Config>
 800139c:	4603      	mov	r3, r0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d004      	beq.n	80013c4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2280      	movs	r2, #128	; 0x80
 80013be:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e00c      	b.n	80013de <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2205      	movs	r2, #5
 80013c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f022 0201 	bic.w	r2, r2, #1
 80013da:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
	...

080013ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b089      	sub	sp, #36	; 0x24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001402:	2300      	movs	r3, #0
 8001404:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
 800140a:	e175      	b.n	80016f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800140c:	2201      	movs	r2, #1
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	697a      	ldr	r2, [r7, #20]
 800141c:	4013      	ands	r3, r2
 800141e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	429a      	cmp	r2, r3
 8001426:	f040 8164 	bne.w	80016f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b02      	cmp	r3, #2
 8001430:	d003      	beq.n	800143a <HAL_GPIO_Init+0x4e>
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b12      	cmp	r3, #18
 8001438:	d123      	bne.n	8001482 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	08da      	lsrs	r2, r3, #3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	3208      	adds	r2, #8
 8001442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	220f      	movs	r2, #15
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4013      	ands	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	691a      	ldr	r2, [r3, #16]
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	f003 0307 	and.w	r3, r3, #7
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	08da      	lsrs	r2, r3, #3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3208      	adds	r2, #8
 800147c:	69b9      	ldr	r1, [r7, #24]
 800147e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	2203      	movs	r2, #3
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43db      	mvns	r3, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4013      	ands	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 0203 	and.w	r2, r3, #3
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d00b      	beq.n	80014d6 <HAL_GPIO_Init+0xea>
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d007      	beq.n	80014d6 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014ca:	2b11      	cmp	r3, #17
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b12      	cmp	r3, #18
 80014d4:	d130      	bne.n	8001538 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	2203      	movs	r2, #3
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43db      	mvns	r3, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4013      	ands	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	68da      	ldr	r2, [r3, #12]
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800150c:	2201      	movs	r2, #1
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	091b      	lsrs	r3, r3, #4
 8001522:	f003 0201 	and.w	r2, r3, #1
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4313      	orrs	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	2203      	movs	r2, #3
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4313      	orrs	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001570:	2b00      	cmp	r3, #0
 8001572:	f000 80be 	beq.w	80016f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001576:	4b65      	ldr	r3, [pc, #404]	; (800170c <HAL_GPIO_Init+0x320>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	4a64      	ldr	r2, [pc, #400]	; (800170c <HAL_GPIO_Init+0x320>)
 800157c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001580:	6453      	str	r3, [r2, #68]	; 0x44
 8001582:	4b62      	ldr	r3, [pc, #392]	; (800170c <HAL_GPIO_Init+0x320>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800158e:	4a60      	ldr	r2, [pc, #384]	; (8001710 <HAL_GPIO_Init+0x324>)
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	089b      	lsrs	r3, r3, #2
 8001594:	3302      	adds	r3, #2
 8001596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800159a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	220f      	movs	r2, #15
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4013      	ands	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a57      	ldr	r2, [pc, #348]	; (8001714 <HAL_GPIO_Init+0x328>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d037      	beq.n	800162a <HAL_GPIO_Init+0x23e>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a56      	ldr	r2, [pc, #344]	; (8001718 <HAL_GPIO_Init+0x32c>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d031      	beq.n	8001626 <HAL_GPIO_Init+0x23a>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a55      	ldr	r2, [pc, #340]	; (800171c <HAL_GPIO_Init+0x330>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d02b      	beq.n	8001622 <HAL_GPIO_Init+0x236>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a54      	ldr	r2, [pc, #336]	; (8001720 <HAL_GPIO_Init+0x334>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d025      	beq.n	800161e <HAL_GPIO_Init+0x232>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a53      	ldr	r2, [pc, #332]	; (8001724 <HAL_GPIO_Init+0x338>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d01f      	beq.n	800161a <HAL_GPIO_Init+0x22e>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a52      	ldr	r2, [pc, #328]	; (8001728 <HAL_GPIO_Init+0x33c>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d019      	beq.n	8001616 <HAL_GPIO_Init+0x22a>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a51      	ldr	r2, [pc, #324]	; (800172c <HAL_GPIO_Init+0x340>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d013      	beq.n	8001612 <HAL_GPIO_Init+0x226>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a50      	ldr	r2, [pc, #320]	; (8001730 <HAL_GPIO_Init+0x344>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d00d      	beq.n	800160e <HAL_GPIO_Init+0x222>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a4f      	ldr	r2, [pc, #316]	; (8001734 <HAL_GPIO_Init+0x348>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d007      	beq.n	800160a <HAL_GPIO_Init+0x21e>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a4e      	ldr	r2, [pc, #312]	; (8001738 <HAL_GPIO_Init+0x34c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d101      	bne.n	8001606 <HAL_GPIO_Init+0x21a>
 8001602:	2309      	movs	r3, #9
 8001604:	e012      	b.n	800162c <HAL_GPIO_Init+0x240>
 8001606:	230a      	movs	r3, #10
 8001608:	e010      	b.n	800162c <HAL_GPIO_Init+0x240>
 800160a:	2308      	movs	r3, #8
 800160c:	e00e      	b.n	800162c <HAL_GPIO_Init+0x240>
 800160e:	2307      	movs	r3, #7
 8001610:	e00c      	b.n	800162c <HAL_GPIO_Init+0x240>
 8001612:	2306      	movs	r3, #6
 8001614:	e00a      	b.n	800162c <HAL_GPIO_Init+0x240>
 8001616:	2305      	movs	r3, #5
 8001618:	e008      	b.n	800162c <HAL_GPIO_Init+0x240>
 800161a:	2304      	movs	r3, #4
 800161c:	e006      	b.n	800162c <HAL_GPIO_Init+0x240>
 800161e:	2303      	movs	r3, #3
 8001620:	e004      	b.n	800162c <HAL_GPIO_Init+0x240>
 8001622:	2302      	movs	r3, #2
 8001624:	e002      	b.n	800162c <HAL_GPIO_Init+0x240>
 8001626:	2301      	movs	r3, #1
 8001628:	e000      	b.n	800162c <HAL_GPIO_Init+0x240>
 800162a:	2300      	movs	r3, #0
 800162c:	69fa      	ldr	r2, [r7, #28]
 800162e:	f002 0203 	and.w	r2, r2, #3
 8001632:	0092      	lsls	r2, r2, #2
 8001634:	4093      	lsls	r3, r2
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4313      	orrs	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800163c:	4934      	ldr	r1, [pc, #208]	; (8001710 <HAL_GPIO_Init+0x324>)
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	089b      	lsrs	r3, r3, #2
 8001642:	3302      	adds	r3, #2
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800164a:	4b3c      	ldr	r3, [pc, #240]	; (800173c <HAL_GPIO_Init+0x350>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	43db      	mvns	r3, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4013      	ands	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800166e:	4a33      	ldr	r2, [pc, #204]	; (800173c <HAL_GPIO_Init+0x350>)
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001674:	4b31      	ldr	r3, [pc, #196]	; (800173c <HAL_GPIO_Init+0x350>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	43db      	mvns	r3, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001698:	4a28      	ldr	r2, [pc, #160]	; (800173c <HAL_GPIO_Init+0x350>)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800169e:	4b27      	ldr	r3, [pc, #156]	; (800173c <HAL_GPIO_Init+0x350>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	43db      	mvns	r3, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4013      	ands	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	4313      	orrs	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016c2:	4a1e      	ldr	r2, [pc, #120]	; (800173c <HAL_GPIO_Init+0x350>)
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016c8:	4b1c      	ldr	r3, [pc, #112]	; (800173c <HAL_GPIO_Init+0x350>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016ec:	4a13      	ldr	r2, [pc, #76]	; (800173c <HAL_GPIO_Init+0x350>)
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3301      	adds	r3, #1
 80016f6:	61fb      	str	r3, [r7, #28]
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	2b0f      	cmp	r3, #15
 80016fc:	f67f ae86 	bls.w	800140c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001700:	bf00      	nop
 8001702:	3724      	adds	r7, #36	; 0x24
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	40023800 	.word	0x40023800
 8001710:	40013800 	.word	0x40013800
 8001714:	40020000 	.word	0x40020000
 8001718:	40020400 	.word	0x40020400
 800171c:	40020800 	.word	0x40020800
 8001720:	40020c00 	.word	0x40020c00
 8001724:	40021000 	.word	0x40021000
 8001728:	40021400 	.word	0x40021400
 800172c:	40021800 	.word	0x40021800
 8001730:	40021c00 	.word	0x40021c00
 8001734:	40022000 	.word	0x40022000
 8001738:	40022400 	.word	0x40022400
 800173c:	40013c00 	.word	0x40013c00

08001740 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	691a      	ldr	r2, [r3, #16]
 8001750:	887b      	ldrh	r3, [r7, #2]
 8001752:	4013      	ands	r3, r2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d002      	beq.n	800175e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001758:	2301      	movs	r3, #1
 800175a:	73fb      	strb	r3, [r7, #15]
 800175c:	e001      	b.n	8001762 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800175e:	2300      	movs	r3, #0
 8001760:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001762:	7bfb      	ldrb	r3, [r7, #15]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	460b      	mov	r3, r1
 800177a:	807b      	strh	r3, [r7, #2]
 800177c:	4613      	mov	r3, r2
 800177e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001780:	787b      	ldrb	r3, [r7, #1]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001786:	887a      	ldrh	r2, [r7, #2]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800178c:	e003      	b.n	8001796 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800178e:	887b      	ldrh	r3, [r7, #2]
 8001790:	041a      	lsls	r2, r3, #16
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	619a      	str	r2, [r3, #24]
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	460b      	mov	r3, r1
 80017ac:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	695a      	ldr	r2, [r3, #20]
 80017b2:	887b      	ldrh	r3, [r7, #2]
 80017b4:	401a      	ands	r2, r3
 80017b6:	887b      	ldrh	r3, [r7, #2]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d104      	bne.n	80017c6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80017bc:	887b      	ldrh	r3, [r7, #2]
 80017be:	041a      	lsls	r2, r3, #16
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80017c4:	e002      	b.n	80017cc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80017c6:	887a      	ldrh	r2, [r7, #2]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	619a      	str	r2, [r3, #24]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80017e0:	2300      	movs	r3, #0
 80017e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e25c      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 8087 	beq.w	800190a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017fc:	4b96      	ldr	r3, [pc, #600]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f003 030c 	and.w	r3, r3, #12
 8001804:	2b04      	cmp	r3, #4
 8001806:	d00c      	beq.n	8001822 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001808:	4b93      	ldr	r3, [pc, #588]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f003 030c 	and.w	r3, r3, #12
 8001810:	2b08      	cmp	r3, #8
 8001812:	d112      	bne.n	800183a <HAL_RCC_OscConfig+0x62>
 8001814:	4b90      	ldr	r3, [pc, #576]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800181c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001820:	d10b      	bne.n	800183a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001822:	4b8d      	ldr	r3, [pc, #564]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d06c      	beq.n	8001908 <HAL_RCC_OscConfig+0x130>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d168      	bne.n	8001908 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e236      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001842:	d106      	bne.n	8001852 <HAL_RCC_OscConfig+0x7a>
 8001844:	4b84      	ldr	r3, [pc, #528]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a83      	ldr	r2, [pc, #524]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 800184a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	e02e      	b.n	80018b0 <HAL_RCC_OscConfig+0xd8>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10c      	bne.n	8001874 <HAL_RCC_OscConfig+0x9c>
 800185a:	4b7f      	ldr	r3, [pc, #508]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a7e      	ldr	r2, [pc, #504]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001864:	6013      	str	r3, [r2, #0]
 8001866:	4b7c      	ldr	r3, [pc, #496]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a7b      	ldr	r2, [pc, #492]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 800186c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	e01d      	b.n	80018b0 <HAL_RCC_OscConfig+0xd8>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800187c:	d10c      	bne.n	8001898 <HAL_RCC_OscConfig+0xc0>
 800187e:	4b76      	ldr	r3, [pc, #472]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a75      	ldr	r2, [pc, #468]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	4b73      	ldr	r3, [pc, #460]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a72      	ldr	r2, [pc, #456]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	e00b      	b.n	80018b0 <HAL_RCC_OscConfig+0xd8>
 8001898:	4b6f      	ldr	r3, [pc, #444]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a6e      	ldr	r2, [pc, #440]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 800189e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	4b6c      	ldr	r3, [pc, #432]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a6b      	ldr	r2, [pc, #428]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 80018aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d013      	beq.n	80018e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b8:	f7ff fc36 	bl	8001128 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018c0:	f7ff fc32 	bl	8001128 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b64      	cmp	r3, #100	; 0x64
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e1ea      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d2:	4b61      	ldr	r3, [pc, #388]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0f0      	beq.n	80018c0 <HAL_RCC_OscConfig+0xe8>
 80018de:	e014      	b.n	800190a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e0:	f7ff fc22 	bl	8001128 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018e8:	f7ff fc1e 	bl	8001128 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b64      	cmp	r3, #100	; 0x64
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e1d6      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018fa:	4b57      	ldr	r3, [pc, #348]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f0      	bne.n	80018e8 <HAL_RCC_OscConfig+0x110>
 8001906:	e000      	b.n	800190a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d069      	beq.n	80019ea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001916:	4b50      	ldr	r3, [pc, #320]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 030c 	and.w	r3, r3, #12
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00b      	beq.n	800193a <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001922:	4b4d      	ldr	r3, [pc, #308]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 030c 	and.w	r3, r3, #12
 800192a:	2b08      	cmp	r3, #8
 800192c:	d11c      	bne.n	8001968 <HAL_RCC_OscConfig+0x190>
 800192e:	4b4a      	ldr	r3, [pc, #296]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d116      	bne.n	8001968 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800193a:	4b47      	ldr	r3, [pc, #284]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d005      	beq.n	8001952 <HAL_RCC_OscConfig+0x17a>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d001      	beq.n	8001952 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e1aa      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001952:	4b41      	ldr	r3, [pc, #260]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	493d      	ldr	r1, [pc, #244]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001962:	4313      	orrs	r3, r2
 8001964:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001966:	e040      	b.n	80019ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d023      	beq.n	80019b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001970:	4b39      	ldr	r3, [pc, #228]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a38      	ldr	r2, [pc, #224]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197c:	f7ff fbd4 	bl	8001128 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001984:	f7ff fbd0 	bl	8001128 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e188      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001996:	4b30      	ldr	r3, [pc, #192]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d0f0      	beq.n	8001984 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a2:	4b2d      	ldr	r3, [pc, #180]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	4929      	ldr	r1, [pc, #164]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	600b      	str	r3, [r1, #0]
 80019b6:	e018      	b.n	80019ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019b8:	4b27      	ldr	r3, [pc, #156]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a26      	ldr	r2, [pc, #152]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 80019be:	f023 0301 	bic.w	r3, r3, #1
 80019c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c4:	f7ff fbb0 	bl	8001128 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019cc:	f7ff fbac 	bl	8001128 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e164      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019de:	4b1e      	ldr	r3, [pc, #120]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f0      	bne.n	80019cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0308 	and.w	r3, r3, #8
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d038      	beq.n	8001a68 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d019      	beq.n	8001a32 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019fe:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a02:	4a15      	ldr	r2, [pc, #84]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a0a:	f7ff fb8d 	bl	8001128 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a12:	f7ff fb89 	bl	8001128 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e141      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a24:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0f0      	beq.n	8001a12 <HAL_RCC_OscConfig+0x23a>
 8001a30:	e01a      	b.n	8001a68 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a32:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a36:	4a08      	ldr	r2, [pc, #32]	; (8001a58 <HAL_RCC_OscConfig+0x280>)
 8001a38:	f023 0301 	bic.w	r3, r3, #1
 8001a3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a3e:	f7ff fb73 	bl	8001128 <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a44:	e00a      	b.n	8001a5c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a46:	f7ff fb6f 	bl	8001128 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d903      	bls.n	8001a5c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e127      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4d0>
 8001a58:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a5c:	4b94      	ldr	r3, [pc, #592]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1ee      	bne.n	8001a46 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 80a4 	beq.w	8001bbe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a76:	4b8e      	ldr	r3, [pc, #568]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10d      	bne.n	8001a9e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a82:	4b8b      	ldr	r3, [pc, #556]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	4a8a      	ldr	r2, [pc, #552]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a8e:	4b88      	ldr	r3, [pc, #544]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a9e:	4b85      	ldr	r3, [pc, #532]	; (8001cb4 <HAL_RCC_OscConfig+0x4dc>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d118      	bne.n	8001adc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001aaa:	4b82      	ldr	r3, [pc, #520]	; (8001cb4 <HAL_RCC_OscConfig+0x4dc>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a81      	ldr	r2, [pc, #516]	; (8001cb4 <HAL_RCC_OscConfig+0x4dc>)
 8001ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ab6:	f7ff fb37 	bl	8001128 <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001abe:	f7ff fb33 	bl	8001128 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b64      	cmp	r3, #100	; 0x64
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e0eb      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ad0:	4b78      	ldr	r3, [pc, #480]	; (8001cb4 <HAL_RCC_OscConfig+0x4dc>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d0f0      	beq.n	8001abe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d106      	bne.n	8001af2 <HAL_RCC_OscConfig+0x31a>
 8001ae4:	4b72      	ldr	r3, [pc, #456]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae8:	4a71      	ldr	r2, [pc, #452]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	6713      	str	r3, [r2, #112]	; 0x70
 8001af0:	e02d      	b.n	8001b4e <HAL_RCC_OscConfig+0x376>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10c      	bne.n	8001b14 <HAL_RCC_OscConfig+0x33c>
 8001afa:	4b6d      	ldr	r3, [pc, #436]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001afe:	4a6c      	ldr	r2, [pc, #432]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001b00:	f023 0301 	bic.w	r3, r3, #1
 8001b04:	6713      	str	r3, [r2, #112]	; 0x70
 8001b06:	4b6a      	ldr	r3, [pc, #424]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0a:	4a69      	ldr	r2, [pc, #420]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001b0c:	f023 0304 	bic.w	r3, r3, #4
 8001b10:	6713      	str	r3, [r2, #112]	; 0x70
 8001b12:	e01c      	b.n	8001b4e <HAL_RCC_OscConfig+0x376>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	2b05      	cmp	r3, #5
 8001b1a:	d10c      	bne.n	8001b36 <HAL_RCC_OscConfig+0x35e>
 8001b1c:	4b64      	ldr	r3, [pc, #400]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b20:	4a63      	ldr	r2, [pc, #396]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001b22:	f043 0304 	orr.w	r3, r3, #4
 8001b26:	6713      	str	r3, [r2, #112]	; 0x70
 8001b28:	4b61      	ldr	r3, [pc, #388]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2c:	4a60      	ldr	r2, [pc, #384]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	6713      	str	r3, [r2, #112]	; 0x70
 8001b34:	e00b      	b.n	8001b4e <HAL_RCC_OscConfig+0x376>
 8001b36:	4b5e      	ldr	r3, [pc, #376]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3a:	4a5d      	ldr	r2, [pc, #372]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001b3c:	f023 0301 	bic.w	r3, r3, #1
 8001b40:	6713      	str	r3, [r2, #112]	; 0x70
 8001b42:	4b5b      	ldr	r3, [pc, #364]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b46:	4a5a      	ldr	r2, [pc, #360]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001b48:	f023 0304 	bic.w	r3, r3, #4
 8001b4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d015      	beq.n	8001b82 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b56:	f7ff fae7 	bl	8001128 <HAL_GetTick>
 8001b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b5c:	e00a      	b.n	8001b74 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b5e:	f7ff fae3 	bl	8001128 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e099      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b74:	4b4e      	ldr	r3, [pc, #312]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b78:	f003 0302 	and.w	r3, r3, #2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d0ee      	beq.n	8001b5e <HAL_RCC_OscConfig+0x386>
 8001b80:	e014      	b.n	8001bac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b82:	f7ff fad1 	bl	8001128 <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b88:	e00a      	b.n	8001ba0 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b8a:	f7ff facd 	bl	8001128 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e083      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba0:	4b43      	ldr	r3, [pc, #268]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1ee      	bne.n	8001b8a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bac:	7dfb      	ldrb	r3, [r7, #23]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d105      	bne.n	8001bbe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bb2:	4b3f      	ldr	r3, [pc, #252]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	4a3e      	ldr	r2, [pc, #248]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001bb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bbc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d06f      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bc6:	4b3a      	ldr	r3, [pc, #232]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 030c 	and.w	r3, r3, #12
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d067      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d149      	bne.n	8001c6e <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bda:	4b35      	ldr	r3, [pc, #212]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a34      	ldr	r2, [pc, #208]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001be0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be6:	f7ff fa9f 	bl	8001128 <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bec:	e008      	b.n	8001c00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bee:	f7ff fa9b 	bl	8001128 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e053      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c00:	4b2b      	ldr	r3, [pc, #172]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1f0      	bne.n	8001bee <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	69da      	ldr	r2, [r3, #28]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	431a      	orrs	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1a:	019b      	lsls	r3, r3, #6
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c22:	085b      	lsrs	r3, r3, #1
 8001c24:	3b01      	subs	r3, #1
 8001c26:	041b      	lsls	r3, r3, #16
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2e:	061b      	lsls	r3, r3, #24
 8001c30:	4313      	orrs	r3, r2
 8001c32:	4a1f      	ldr	r2, [pc, #124]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001c34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001c38:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a1c      	ldr	r2, [pc, #112]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001c40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c46:	f7ff fa6f 	bl	8001128 <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c4e:	f7ff fa6b 	bl	8001128 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e023      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c60:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0f0      	beq.n	8001c4e <HAL_RCC_OscConfig+0x476>
 8001c6c:	e01b      	b.n	8001ca6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a0f      	ldr	r2, [pc, #60]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001c74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7a:	f7ff fa55 	bl	8001128 <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c82:	f7ff fa51 	bl	8001128 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e009      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_RCC_OscConfig+0x4d8>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1f0      	bne.n	8001c82 <HAL_RCC_OscConfig+0x4aa>
 8001ca0:	e001      	b.n	8001ca6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40007000 	.word	0x40007000

08001cb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e0ce      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cd0:	4b69      	ldr	r3, [pc, #420]	; (8001e78 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 030f 	and.w	r3, r3, #15
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d910      	bls.n	8001d00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cde:	4b66      	ldr	r3, [pc, #408]	; (8001e78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f023 020f 	bic.w	r2, r3, #15
 8001ce6:	4964      	ldr	r1, [pc, #400]	; (8001e78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cee:	4b62      	ldr	r3, [pc, #392]	; (8001e78 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d001      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e0b6      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d020      	beq.n	8001d4e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d005      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d18:	4b58      	ldr	r3, [pc, #352]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	4a57      	ldr	r2, [pc, #348]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0308 	and.w	r3, r3, #8
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d005      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d30:	4b52      	ldr	r3, [pc, #328]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	4a51      	ldr	r2, [pc, #324]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d3c:	4b4f      	ldr	r3, [pc, #316]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	494c      	ldr	r1, [pc, #304]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d040      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d107      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d62:	4b46      	ldr	r3, [pc, #280]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d115      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e07d      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d107      	bne.n	8001d8a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d7a:	4b40      	ldr	r3, [pc, #256]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d109      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e071      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d8a:	4b3c      	ldr	r3, [pc, #240]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e069      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d9a:	4b38      	ldr	r3, [pc, #224]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f023 0203 	bic.w	r2, r3, #3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	4935      	ldr	r1, [pc, #212]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dac:	f7ff f9bc 	bl	8001128 <HAL_GetTick>
 8001db0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db2:	e00a      	b.n	8001dca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db4:	f7ff f9b8 	bl	8001128 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e051      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dca:	4b2c      	ldr	r3, [pc, #176]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 020c 	and.w	r2, r3, #12
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d1eb      	bne.n	8001db4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ddc:	4b26      	ldr	r3, [pc, #152]	; (8001e78 <HAL_RCC_ClockConfig+0x1c0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 030f 	and.w	r3, r3, #15
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d210      	bcs.n	8001e0c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dea:	4b23      	ldr	r3, [pc, #140]	; (8001e78 <HAL_RCC_ClockConfig+0x1c0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f023 020f 	bic.w	r2, r3, #15
 8001df2:	4921      	ldr	r1, [pc, #132]	; (8001e78 <HAL_RCC_ClockConfig+0x1c0>)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dfa:	4b1f      	ldr	r3, [pc, #124]	; (8001e78 <HAL_RCC_ClockConfig+0x1c0>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d001      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e030      	b.n	8001e6e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d008      	beq.n	8001e2a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e18:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	4915      	ldr	r1, [pc, #84]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0308 	and.w	r3, r3, #8
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d009      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e36:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	490d      	ldr	r1, [pc, #52]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e4a:	f000 f81d 	bl	8001e88 <HAL_RCC_GetSysClockFreq>
 8001e4e:	4601      	mov	r1, r0
 8001e50:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	091b      	lsrs	r3, r3, #4
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	4a09      	ldr	r2, [pc, #36]	; (8001e80 <HAL_RCC_ClockConfig+0x1c8>)
 8001e5c:	5cd3      	ldrb	r3, [r2, r3]
 8001e5e:	fa21 f303 	lsr.w	r3, r1, r3
 8001e62:	4a08      	ldr	r2, [pc, #32]	; (8001e84 <HAL_RCC_ClockConfig+0x1cc>)
 8001e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e66:	2000      	movs	r0, #0
 8001e68:	f7ff f91a 	bl	80010a0 <HAL_InitTick>

  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40023c00 	.word	0x40023c00
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	0800a300 	.word	0x0800a300
 8001e84:	20000000 	.word	0x20000000

08001e88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	607b      	str	r3, [r7, #4]
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	2300      	movs	r3, #0
 8001e98:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e9e:	4b50      	ldr	r3, [pc, #320]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 030c 	and.w	r3, r3, #12
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	d007      	beq.n	8001eba <HAL_RCC_GetSysClockFreq+0x32>
 8001eaa:	2b08      	cmp	r3, #8
 8001eac:	d008      	beq.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x38>
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f040 808d 	bne.w	8001fce <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001eb4:	4b4b      	ldr	r3, [pc, #300]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001eb6:	60bb      	str	r3, [r7, #8]
       break;
 8001eb8:	e08c      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001eba:	4b4b      	ldr	r3, [pc, #300]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ebc:	60bb      	str	r3, [r7, #8]
      break;
 8001ebe:	e089      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ec0:	4b47      	ldr	r3, [pc, #284]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ec8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001eca:	4b45      	ldr	r3, [pc, #276]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d023      	beq.n	8001f1e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ed6:	4b42      	ldr	r3, [pc, #264]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	099b      	lsrs	r3, r3, #6
 8001edc:	f04f 0400 	mov.w	r4, #0
 8001ee0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ee4:	f04f 0200 	mov.w	r2, #0
 8001ee8:	ea03 0501 	and.w	r5, r3, r1
 8001eec:	ea04 0602 	and.w	r6, r4, r2
 8001ef0:	4a3d      	ldr	r2, [pc, #244]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ef2:	fb02 f106 	mul.w	r1, r2, r6
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	fb02 f205 	mul.w	r2, r2, r5
 8001efc:	440a      	add	r2, r1
 8001efe:	493a      	ldr	r1, [pc, #232]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f00:	fba5 0101 	umull	r0, r1, r5, r1
 8001f04:	1853      	adds	r3, r2, r1
 8001f06:	4619      	mov	r1, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f04f 0400 	mov.w	r4, #0
 8001f0e:	461a      	mov	r2, r3
 8001f10:	4623      	mov	r3, r4
 8001f12:	f7fe f9cd 	bl	80002b0 <__aeabi_uldivmod>
 8001f16:	4603      	mov	r3, r0
 8001f18:	460c      	mov	r4, r1
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	e049      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f1e:	4b30      	ldr	r3, [pc, #192]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	099b      	lsrs	r3, r3, #6
 8001f24:	f04f 0400 	mov.w	r4, #0
 8001f28:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	ea03 0501 	and.w	r5, r3, r1
 8001f34:	ea04 0602 	and.w	r6, r4, r2
 8001f38:	4629      	mov	r1, r5
 8001f3a:	4632      	mov	r2, r6
 8001f3c:	f04f 0300 	mov.w	r3, #0
 8001f40:	f04f 0400 	mov.w	r4, #0
 8001f44:	0154      	lsls	r4, r2, #5
 8001f46:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f4a:	014b      	lsls	r3, r1, #5
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4622      	mov	r2, r4
 8001f50:	1b49      	subs	r1, r1, r5
 8001f52:	eb62 0206 	sbc.w	r2, r2, r6
 8001f56:	f04f 0300 	mov.w	r3, #0
 8001f5a:	f04f 0400 	mov.w	r4, #0
 8001f5e:	0194      	lsls	r4, r2, #6
 8001f60:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001f64:	018b      	lsls	r3, r1, #6
 8001f66:	1a5b      	subs	r3, r3, r1
 8001f68:	eb64 0402 	sbc.w	r4, r4, r2
 8001f6c:	f04f 0100 	mov.w	r1, #0
 8001f70:	f04f 0200 	mov.w	r2, #0
 8001f74:	00e2      	lsls	r2, r4, #3
 8001f76:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001f7a:	00d9      	lsls	r1, r3, #3
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4614      	mov	r4, r2
 8001f80:	195b      	adds	r3, r3, r5
 8001f82:	eb44 0406 	adc.w	r4, r4, r6
 8001f86:	f04f 0100 	mov.w	r1, #0
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	02a2      	lsls	r2, r4, #10
 8001f90:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001f94:	0299      	lsls	r1, r3, #10
 8001f96:	460b      	mov	r3, r1
 8001f98:	4614      	mov	r4, r2
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	4621      	mov	r1, r4
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f04f 0400 	mov.w	r4, #0
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4623      	mov	r3, r4
 8001fa8:	f7fe f982 	bl	80002b0 <__aeabi_uldivmod>
 8001fac:	4603      	mov	r3, r0
 8001fae:	460c      	mov	r4, r1
 8001fb0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001fb2:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	0c1b      	lsrs	r3, r3, #16
 8001fb8:	f003 0303 	and.w	r3, r3, #3
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fca:	60bb      	str	r3, [r7, #8]
      break;
 8001fcc:	e002      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fce:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001fd0:	60bb      	str	r3, [r7, #8]
      break;
 8001fd2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fd4:	68bb      	ldr	r3, [r7, #8]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	00f42400 	.word	0x00f42400
 8001fe8:	017d7840 	.word	0x017d7840

08001fec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002000:	2300      	movs	r3, #0
 8002002:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002004:	2300      	movs	r3, #0
 8002006:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b00      	cmp	r3, #0
 8002012:	d012      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002014:	4b69      	ldr	r3, [pc, #420]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	4a68      	ldr	r2, [pc, #416]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800201a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800201e:	6093      	str	r3, [r2, #8]
 8002020:	4b66      	ldr	r3, [pc, #408]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002028:	4964      	ldr	r1, [pc, #400]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800202a:	4313      	orrs	r3, r2
 800202c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002036:	2301      	movs	r3, #1
 8002038:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d017      	beq.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002046:	4b5d      	ldr	r3, [pc, #372]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002048:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800204c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002054:	4959      	ldr	r1, [pc, #356]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002056:	4313      	orrs	r3, r2
 8002058:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002060:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002064:	d101      	bne.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002066:	2301      	movs	r3, #1
 8002068:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002072:	2301      	movs	r3, #1
 8002074:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d017      	beq.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002082:	4b4e      	ldr	r3, [pc, #312]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002084:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002088:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002090:	494a      	ldr	r1, [pc, #296]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002092:	4313      	orrs	r3, r2
 8002094:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020a0:	d101      	bne.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80020a2:	2301      	movs	r3, #1
 80020a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80020ae:	2301      	movs	r3, #1
 80020b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80020be:	2301      	movs	r3, #1
 80020c0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0320 	and.w	r3, r3, #32
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 808b 	beq.w	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80020d0:	4b3a      	ldr	r3, [pc, #232]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d4:	4a39      	ldr	r2, [pc, #228]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020da:	6413      	str	r3, [r2, #64]	; 0x40
 80020dc:	4b37      	ldr	r3, [pc, #220]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80020e8:	4b35      	ldr	r3, [pc, #212]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a34      	ldr	r2, [pc, #208]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020f4:	f7ff f818 	bl	8001128 <HAL_GetTick>
 80020f8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80020fa:	e008      	b.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020fc:	f7ff f814 	bl	8001128 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b64      	cmp	r3, #100	; 0x64
 8002108:	d901      	bls.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e355      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800210e:	4b2c      	ldr	r3, [pc, #176]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0f0      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800211a:	4b28      	ldr	r3, [pc, #160]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800211c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002122:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d035      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	429a      	cmp	r2, r3
 8002136:	d02e      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002138:	4b20      	ldr	r3, [pc, #128]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800213a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002140:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002142:	4b1e      	ldr	r3, [pc, #120]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002146:	4a1d      	ldr	r2, [pc, #116]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800214e:	4b1b      	ldr	r3, [pc, #108]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002152:	4a1a      	ldr	r2, [pc, #104]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002158:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800215a:	4a18      	ldr	r2, [pc, #96]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002160:	4b16      	ldr	r3, [pc, #88]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b01      	cmp	r3, #1
 800216a:	d114      	bne.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216c:	f7fe ffdc 	bl	8001128 <HAL_GetTick>
 8002170:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002172:	e00a      	b.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002174:	f7fe ffd8 	bl	8001128 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002182:	4293      	cmp	r3, r2
 8002184:	d901      	bls.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e317      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218a:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800218c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0ee      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800219e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80021a2:	d111      	bne.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80021a4:	4b05      	ldr	r3, [pc, #20]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021b0:	4b04      	ldr	r3, [pc, #16]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80021b2:	400b      	ands	r3, r1
 80021b4:	4901      	ldr	r1, [pc, #4]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	608b      	str	r3, [r1, #8]
 80021ba:	e00b      	b.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40007000 	.word	0x40007000
 80021c4:	0ffffcff 	.word	0x0ffffcff
 80021c8:	4bb0      	ldr	r3, [pc, #704]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	4aaf      	ldr	r2, [pc, #700]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80021ce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80021d2:	6093      	str	r3, [r2, #8]
 80021d4:	4bad      	ldr	r3, [pc, #692]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80021d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021e0:	49aa      	ldr	r1, [pc, #680]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0310 	and.w	r3, r3, #16
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d010      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80021f2:	4ba6      	ldr	r3, [pc, #664]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80021f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021f8:	4aa4      	ldr	r2, [pc, #656]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80021fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002202:	4ba2      	ldr	r3, [pc, #648]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002204:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220c:	499f      	ldr	r1, [pc, #636]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800220e:	4313      	orrs	r3, r2
 8002210:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00a      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002220:	4b9a      	ldr	r3, [pc, #616]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002226:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800222e:	4997      	ldr	r1, [pc, #604]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002230:	4313      	orrs	r3, r2
 8002232:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00a      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002242:	4b92      	ldr	r3, [pc, #584]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002248:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002250:	498e      	ldr	r1, [pc, #568]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002252:	4313      	orrs	r3, r2
 8002254:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00a      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002264:	4b89      	ldr	r3, [pc, #548]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800226a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002272:	4986      	ldr	r1, [pc, #536]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002274:	4313      	orrs	r3, r2
 8002276:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00a      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002286:	4b81      	ldr	r3, [pc, #516]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002294:	497d      	ldr	r1, [pc, #500]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002296:	4313      	orrs	r3, r2
 8002298:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00a      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022a8:	4b78      	ldr	r3, [pc, #480]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80022aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ae:	f023 0203 	bic.w	r2, r3, #3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	4975      	ldr	r1, [pc, #468]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00a      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022ca:	4b70      	ldr	r3, [pc, #448]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80022cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d0:	f023 020c 	bic.w	r2, r3, #12
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022d8:	496c      	ldr	r1, [pc, #432]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00a      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022ec:	4b67      	ldr	r3, [pc, #412]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80022ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fa:	4964      	ldr	r1, [pc, #400]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00a      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800230e:	4b5f      	ldr	r3, [pc, #380]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002314:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800231c:	495b      	ldr	r1, [pc, #364]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800231e:	4313      	orrs	r3, r2
 8002320:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00a      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002330:	4b56      	ldr	r3, [pc, #344]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002336:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800233e:	4953      	ldr	r1, [pc, #332]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002340:	4313      	orrs	r3, r2
 8002342:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00a      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002352:	4b4e      	ldr	r3, [pc, #312]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002358:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002360:	494a      	ldr	r1, [pc, #296]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002362:	4313      	orrs	r3, r2
 8002364:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00a      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002374:	4b45      	ldr	r3, [pc, #276]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002382:	4942      	ldr	r1, [pc, #264]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002384:	4313      	orrs	r3, r2
 8002386:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00a      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002396:	4b3d      	ldr	r3, [pc, #244]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023a4:	4939      	ldr	r1, [pc, #228]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00a      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80023b8:	4b34      	ldr	r3, [pc, #208]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80023ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023c6:	4931      	ldr	r1, [pc, #196]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d011      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80023da:	4b2c      	ldr	r3, [pc, #176]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80023dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023e8:	4928      	ldr	r1, [pc, #160]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023f8:	d101      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80023fa:	2301      	movs	r3, #1
 80023fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800240a:	2301      	movs	r3, #1
 800240c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00a      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800241a:	4b1c      	ldr	r3, [pc, #112]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800241c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002420:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002428:	4918      	ldr	r1, [pc, #96]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800242a:	4313      	orrs	r3, r2
 800242c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00b      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800243c:	4b13      	ldr	r3, [pc, #76]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800243e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002442:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800244c:	490f      	ldr	r1, [pc, #60]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800244e:	4313      	orrs	r3, r2
 8002450:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d005      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002462:	f040 80d8 	bne.w	8002616 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002466:	4b09      	ldr	r3, [pc, #36]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a08      	ldr	r2, [pc, #32]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800246c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002470:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002472:	f7fe fe59 	bl	8001128 <HAL_GetTick>
 8002476:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002478:	e00a      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800247a:	f7fe fe55 	bl	8001128 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b64      	cmp	r3, #100	; 0x64
 8002486:	d903      	bls.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e196      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800248c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002490:	4b6c      	ldr	r3, [pc, #432]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1ee      	bne.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d021      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x500>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d11d      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80024b0:	4b64      	ldr	r3, [pc, #400]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80024b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024b6:	0c1b      	lsrs	r3, r3, #16
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80024be:	4b61      	ldr	r3, [pc, #388]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80024c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024c4:	0e1b      	lsrs	r3, r3, #24
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	019a      	lsls	r2, r3, #6
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	041b      	lsls	r3, r3, #16
 80024d6:	431a      	orrs	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	061b      	lsls	r3, r3, #24
 80024dc:	431a      	orrs	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	071b      	lsls	r3, r3, #28
 80024e4:	4957      	ldr	r1, [pc, #348]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d004      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x516>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002500:	d00a      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800250a:	2b00      	cmp	r3, #0
 800250c:	d02e      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002516:	d129      	bne.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002518:	4b4a      	ldr	r3, [pc, #296]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800251a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800251e:	0c1b      	lsrs	r3, r3, #16
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002526:	4b47      	ldr	r3, [pc, #284]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002528:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800252c:	0f1b      	lsrs	r3, r3, #28
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	019a      	lsls	r2, r3, #6
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	041b      	lsls	r3, r3, #16
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	061b      	lsls	r3, r3, #24
 8002546:	431a      	orrs	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	071b      	lsls	r3, r3, #28
 800254c:	493d      	ldr	r1, [pc, #244]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800254e:	4313      	orrs	r3, r2
 8002550:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002554:	4b3b      	ldr	r3, [pc, #236]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002556:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800255a:	f023 021f 	bic.w	r2, r3, #31
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	3b01      	subs	r3, #1
 8002564:	4937      	ldr	r1, [pc, #220]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002566:	4313      	orrs	r3, r2
 8002568:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d01d      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002578:	4b32      	ldr	r3, [pc, #200]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800257a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800257e:	0e1b      	lsrs	r3, r3, #24
 8002580:	f003 030f 	and.w	r3, r3, #15
 8002584:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002586:	4b2f      	ldr	r3, [pc, #188]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002588:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800258c:	0f1b      	lsrs	r3, r3, #28
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	019a      	lsls	r2, r3, #6
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	041b      	lsls	r3, r3, #16
 80025a0:	431a      	orrs	r2, r3
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	061b      	lsls	r3, r3, #24
 80025a6:	431a      	orrs	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	071b      	lsls	r3, r3, #28
 80025ac:	4925      	ldr	r1, [pc, #148]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d011      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	019a      	lsls	r2, r3, #6
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	041b      	lsls	r3, r3, #16
 80025cc:	431a      	orrs	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	061b      	lsls	r3, r3, #24
 80025d4:	431a      	orrs	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	071b      	lsls	r3, r3, #28
 80025dc:	4919      	ldr	r1, [pc, #100]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80025e4:	4b17      	ldr	r3, [pc, #92]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a16      	ldr	r2, [pc, #88]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80025ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025f0:	f7fe fd9a 	bl	8001128 <HAL_GetTick>
 80025f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80025f8:	f7fe fd96 	bl	8001128 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b64      	cmp	r3, #100	; 0x64
 8002604:	d901      	bls.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e0d7      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800260a:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0f0      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	2b01      	cmp	r3, #1
 800261a:	f040 80cd 	bne.w	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800261e:	4b09      	ldr	r3, [pc, #36]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a08      	ldr	r2, [pc, #32]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002628:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800262a:	f7fe fd7d 	bl	8001128 <HAL_GetTick>
 800262e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002630:	e00a      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002632:	f7fe fd79 	bl	8001128 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b64      	cmp	r3, #100	; 0x64
 800263e:	d903      	bls.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e0ba      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8002644:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002648:	4b5e      	ldr	r3, [pc, #376]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002650:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002654:	d0ed      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002666:	2b00      	cmp	r3, #0
 8002668:	d009      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002672:	2b00      	cmp	r3, #0
 8002674:	d02e      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	2b00      	cmp	r3, #0
 800267c:	d12a      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800267e:	4b51      	ldr	r3, [pc, #324]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002684:	0c1b      	lsrs	r3, r3, #16
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800268c:	4b4d      	ldr	r3, [pc, #308]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800268e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002692:	0f1b      	lsrs	r3, r3, #28
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	019a      	lsls	r2, r3, #6
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	041b      	lsls	r3, r3, #16
 80026a4:	431a      	orrs	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	061b      	lsls	r3, r3, #24
 80026ac:	431a      	orrs	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	071b      	lsls	r3, r3, #28
 80026b2:	4944      	ldr	r1, [pc, #272]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80026ba:	4b42      	ldr	r3, [pc, #264]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80026bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026c0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c8:	3b01      	subs	r3, #1
 80026ca:	021b      	lsls	r3, r3, #8
 80026cc:	493d      	ldr	r1, [pc, #244]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d022      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026e8:	d11d      	bne.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80026ea:	4b36      	ldr	r3, [pc, #216]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80026ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f0:	0e1b      	lsrs	r3, r3, #24
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80026f8:	4b32      	ldr	r3, [pc, #200]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80026fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fe:	0f1b      	lsrs	r3, r3, #28
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	019a      	lsls	r2, r3, #6
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	041b      	lsls	r3, r3, #16
 8002712:	431a      	orrs	r2, r3
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	061b      	lsls	r3, r3, #24
 8002718:	431a      	orrs	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	071b      	lsls	r3, r3, #28
 800271e:	4929      	ldr	r1, [pc, #164]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002720:	4313      	orrs	r3, r2
 8002722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0308 	and.w	r3, r3, #8
 800272e:	2b00      	cmp	r3, #0
 8002730:	d028      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002732:	4b24      	ldr	r3, [pc, #144]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002738:	0e1b      	lsrs	r3, r3, #24
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002740:	4b20      	ldr	r3, [pc, #128]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002746:	0c1b      	lsrs	r3, r3, #16
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	019a      	lsls	r2, r3, #6
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	041b      	lsls	r3, r3, #16
 8002758:	431a      	orrs	r2, r3
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	061b      	lsls	r3, r3, #24
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	69db      	ldr	r3, [r3, #28]
 8002764:	071b      	lsls	r3, r3, #28
 8002766:	4917      	ldr	r1, [pc, #92]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002768:	4313      	orrs	r3, r2
 800276a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800276e:	4b15      	ldr	r3, [pc, #84]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002770:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002774:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277c:	4911      	ldr	r1, [pc, #68]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800277e:	4313      	orrs	r3, r2
 8002780:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002784:	4b0f      	ldr	r3, [pc, #60]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a0e      	ldr	r2, [pc, #56]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800278a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800278e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002790:	f7fe fcca 	bl	8001128 <HAL_GetTick>
 8002794:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002796:	e008      	b.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002798:	f7fe fcc6 	bl	8001128 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b64      	cmp	r3, #100	; 0x64
 80027a4:	d901      	bls.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e007      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80027aa:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027b6:	d1ef      	bne.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3720      	adds	r7, #32
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40023800 	.word	0x40023800

080027c8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e06b      	b.n	80028b2 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	7f5b      	ldrb	r3, [r3, #29]
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d105      	bne.n	80027f0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7fe faf4 	bl	8000dd8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2202      	movs	r2, #2
 80027f4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	22ca      	movs	r2, #202	; 0xca
 80027fc:	625a      	str	r2, [r3, #36]	; 0x24
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2253      	movs	r2, #83	; 0x53
 8002804:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 fca4 	bl	8003154 <RTC_EnterInitMode>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d008      	beq.n	8002824 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	22ff      	movs	r2, #255	; 0xff
 8002818:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2204      	movs	r2, #4
 800281e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e046      	b.n	80028b2 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6899      	ldr	r1, [r3, #8]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	4b23      	ldr	r3, [pc, #140]	; (80028bc <HAL_RTC_Init+0xf4>)
 8002830:	400b      	ands	r3, r1
 8002832:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6899      	ldr	r1, [r3, #8]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	431a      	orrs	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	68d2      	ldr	r2, [r2, #12]
 800285a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6919      	ldr	r1, [r3, #16]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	041a      	lsls	r2, r3, #16
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800287e:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 0208 	bic.w	r2, r2, #8
 800288e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	699a      	ldr	r2, [r3, #24]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	430a      	orrs	r2, r1
 80028a0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	22ff      	movs	r2, #255	; 0xff
 80028a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80028b0:	2300      	movs	r3, #0
  }
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	ff8fffbf 	.word	0xff8fffbf

080028c0 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80028c0:	b590      	push	{r4, r7, lr}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	7f1b      	ldrb	r3, [r3, #28]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d101      	bne.n	80028dc <HAL_RTC_SetTime+0x1c>
 80028d8:	2302      	movs	r3, #2
 80028da:	e0a8      	b.n	8002a2e <HAL_RTC_SetTime+0x16e>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2201      	movs	r2, #1
 80028e0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2202      	movs	r2, #2
 80028e6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d126      	bne.n	800293c <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d102      	bne.n	8002902 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	2200      	movs	r2, #0
 8002900:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f000 fc50 	bl	80031ac <RTC_ByteToBcd2>
 800290c:	4603      	mov	r3, r0
 800290e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	785b      	ldrb	r3, [r3, #1]
 8002914:	4618      	mov	r0, r3
 8002916:	f000 fc49 	bl	80031ac <RTC_ByteToBcd2>
 800291a:	4603      	mov	r3, r0
 800291c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800291e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	789b      	ldrb	r3, [r3, #2]
 8002924:	4618      	mov	r0, r3
 8002926:	f000 fc41 	bl	80031ac <RTC_ByteToBcd2>
 800292a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800292c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	7b1b      	ldrb	r3, [r3, #12]
 8002934:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002936:	4313      	orrs	r3, r2
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	e018      	b.n	800296e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002946:	2b00      	cmp	r3, #0
 8002948:	d102      	bne.n	8002950 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2200      	movs	r2, #0
 800294e:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	785b      	ldrb	r3, [r3, #1]
 800295a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800295c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8002962:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	7b1b      	ldrb	r3, [r3, #12]
 8002968:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800296a:	4313      	orrs	r3, r2
 800296c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	22ca      	movs	r2, #202	; 0xca
 8002974:	625a      	str	r2, [r3, #36]	; 0x24
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2253      	movs	r2, #83	; 0x53
 800297c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 fbe8 	bl	8003154 <RTC_EnterInitMode>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00b      	beq.n	80029a2 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	22ff      	movs	r2, #255	; 0xff
 8002990:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2204      	movs	r2, #4
 8002996:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e045      	b.n	8002a2e <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	6979      	ldr	r1, [r7, #20]
 80029a8:	4b23      	ldr	r3, [pc, #140]	; (8002a38 <HAL_RTC_SetTime+0x178>)
 80029aa:	400b      	ands	r3, r1
 80029ac:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029bc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6899      	ldr	r1, [r3, #8]
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	691a      	ldr	r2, [r3, #16]
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	431a      	orrs	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029e4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 0320 	and.w	r3, r3, #32
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d111      	bne.n	8002a18 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 fb85 	bl	8003104 <HAL_RTC_WaitForSynchro>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00b      	beq.n	8002a18 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	22ff      	movs	r2, #255	; 0xff
 8002a06:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2204      	movs	r2, #4
 8002a0c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e00a      	b.n	8002a2e <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	22ff      	movs	r2, #255	; 0xff
 8002a1e:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2201      	movs	r2, #1
 8002a24:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
  }
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	371c      	adds	r7, #28
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd90      	pop	{r4, r7, pc}
 8002a36:	bf00      	nop
 8002a38:	007f7f7f 	.word	0x007f7f7f

08002a3c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	4b22      	ldr	r3, [pc, #136]	; (8002af4 <HAL_RTC_GetTime+0xb8>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	0c1b      	lsrs	r3, r3, #16
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a7a:	b2da      	uxtb	r2, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	0a1b      	lsrs	r3, r3, #8
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	0c1b      	lsrs	r3, r3, #16
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d11a      	bne.n	8002aea <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f000 fb95 	bl	80031e8 <RTC_Bcd2ToByte>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	785b      	ldrb	r3, [r3, #1]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 fb8c 	bl	80031e8 <RTC_Bcd2ToByte>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	789b      	ldrb	r3, [r3, #2]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 fb83 	bl	80031e8 <RTC_Bcd2ToByte>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	007f7f7f 	.word	0x007f7f7f

08002af8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002af8:	b590      	push	{r4, r7, lr}
 8002afa:	b087      	sub	sp, #28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8002b04:	2300      	movs	r3, #0
 8002b06:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	7f1b      	ldrb	r3, [r3, #28]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d101      	bne.n	8002b14 <HAL_RTC_SetDate+0x1c>
 8002b10:	2302      	movs	r3, #2
 8002b12:	e092      	b.n	8002c3a <HAL_RTC_SetDate+0x142>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2201      	movs	r2, #1
 8002b18:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10e      	bne.n	8002b44 <HAL_RTC_SetDate+0x4c>
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	785b      	ldrb	r3, [r3, #1]
 8002b2a:	f003 0310 	and.w	r3, r3, #16
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d008      	beq.n	8002b44 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	785b      	ldrb	r3, [r3, #1]
 8002b36:	f023 0310 	bic.w	r3, r3, #16
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	330a      	adds	r3, #10
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d11c      	bne.n	8002b84 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	78db      	ldrb	r3, [r3, #3]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 fb2c 	bl	80031ac <RTC_ByteToBcd2>
 8002b54:	4603      	mov	r3, r0
 8002b56:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	785b      	ldrb	r3, [r3, #1]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f000 fb25 	bl	80031ac <RTC_ByteToBcd2>
 8002b62:	4603      	mov	r3, r0
 8002b64:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8002b66:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	789b      	ldrb	r3, [r3, #2]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 fb1d 	bl	80031ac <RTC_ByteToBcd2>
 8002b72:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8002b74:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	617b      	str	r3, [r7, #20]
 8002b82:	e00e      	b.n	8002ba2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	78db      	ldrb	r3, [r3, #3]
 8002b88:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	785b      	ldrb	r3, [r3, #1]
 8002b8e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8002b90:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8002b96:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	22ca      	movs	r2, #202	; 0xca
 8002ba8:	625a      	str	r2, [r3, #36]	; 0x24
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2253      	movs	r2, #83	; 0x53
 8002bb0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 face 	bl	8003154 <RTC_EnterInitMode>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00b      	beq.n	8002bd6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	22ff      	movs	r2, #255	; 0xff
 8002bc4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2204      	movs	r2, #4
 8002bca:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e031      	b.n	8002c3a <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	6979      	ldr	r1, [r7, #20]
 8002bdc:	4b19      	ldr	r3, [pc, #100]	; (8002c44 <HAL_RTC_SetDate+0x14c>)
 8002bde:	400b      	ands	r3, r1
 8002be0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68da      	ldr	r2, [r3, #12]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bf0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 0320 	and.w	r3, r3, #32
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d111      	bne.n	8002c24 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f000 fa7f 	bl	8003104 <HAL_RTC_WaitForSynchro>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00b      	beq.n	8002c24 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	22ff      	movs	r2, #255	; 0xff
 8002c12:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2204      	movs	r2, #4
 8002c18:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e00a      	b.n	8002c3a <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	22ff      	movs	r2, #255	; 0xff
 8002c2a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002c38:	2300      	movs	r3, #0
  }
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	371c      	adds	r7, #28
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd90      	pop	{r4, r7, pc}
 8002c42:	bf00      	nop
 8002c44:	00ffff3f 	.word	0x00ffff3f

08002c48 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8002c54:	2300      	movs	r3, #0
 8002c56:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	4b21      	ldr	r3, [pc, #132]	; (8002ce4 <HAL_RTC_GetDate+0x9c>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	0c1b      	lsrs	r3, r3, #16
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	0a1b      	lsrs	r3, r3, #8
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	f003 031f 	and.w	r3, r3, #31
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	0b5b      	lsrs	r3, r3, #13
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d11a      	bne.n	8002cd8 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	78db      	ldrb	r3, [r3, #3]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 fa9e 	bl	80031e8 <RTC_Bcd2ToByte>
 8002cac:	4603      	mov	r3, r0
 8002cae:	461a      	mov	r2, r3
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	785b      	ldrb	r3, [r3, #1]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f000 fa95 	bl	80031e8 <RTC_Bcd2ToByte>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	789b      	ldrb	r3, [r3, #2]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 fa8c 	bl	80031e8 <RTC_Bcd2ToByte>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3718      	adds	r7, #24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	00ffff3f 	.word	0x00ffff3f

08002ce8 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002ce8:	b590      	push	{r4, r7, lr}
 8002cea:	b089      	sub	sp, #36	; 0x24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	61fb      	str	r3, [r7, #28]
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8002cfc:	4b93      	ldr	r3, [pc, #588]	; (8002f4c <HAL_RTC_SetAlarm_IT+0x264>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a93      	ldr	r2, [pc, #588]	; (8002f50 <HAL_RTC_SetAlarm_IT+0x268>)
 8002d02:	fba2 2303 	umull	r2, r3, r2, r3
 8002d06:	0adb      	lsrs	r3, r3, #11
 8002d08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d0c:	fb02 f303 	mul.w	r3, r2, r3
 8002d10:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	7f1b      	ldrb	r3, [r3, #28]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <HAL_RTC_SetAlarm_IT+0x36>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e111      	b.n	8002f42 <HAL_RTC_SetAlarm_IT+0x25a>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2201      	movs	r2, #1
 8002d22:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2202      	movs	r2, #2
 8002d28:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d137      	bne.n	8002da0 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d102      	bne.n	8002d44 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2200      	movs	r2, #0
 8002d42:	731a      	strb	r2, [r3, #12]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 fa2f 	bl	80031ac <RTC_ByteToBcd2>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	785b      	ldrb	r3, [r3, #1]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 fa28 	bl	80031ac <RTC_ByteToBcd2>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002d60:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	789b      	ldrb	r3, [r3, #2]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 fa20 	bl	80031ac <RTC_ByteToBcd2>
 8002d6c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002d6e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	7b1b      	ldrb	r3, [r3, #12]
 8002d76:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002d78:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 fa12 	bl	80031ac <RTC_ByteToBcd2>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002d8c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002d94:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	61fb      	str	r3, [r7, #28]
 8002d9e:	e023      	b.n	8002de8 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d102      	bne.n	8002db4 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2200      	movs	r2, #0
 8002db2:	731a      	strb	r2, [r3, #12]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	785b      	ldrb	r3, [r3, #1]
 8002dbe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002dc0:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002dc6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	7b1b      	ldrb	r3, [r3, #12]
 8002dcc:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002dce:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002dd6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002dd8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002dde:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002de4:	4313      	orrs	r3, r2
 8002de6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	69db      	ldr	r3, [r3, #28]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	22ca      	movs	r2, #202	; 0xca
 8002dfa:	625a      	str	r2, [r3, #36]	; 0x24
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2253      	movs	r2, #83	; 0x53
 8002e02:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e0c:	d141      	bne.n	8002e92 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e1c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	b2da      	uxtb	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002e2e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	1e5a      	subs	r2, r3, #1
 8002e34:	617a      	str	r2, [r7, #20]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10b      	bne.n	8002e52 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	22ff      	movs	r2, #255	; 0xff
 8002e40:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2203      	movs	r2, #3
 8002e46:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e077      	b.n	8002f42 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0e7      	beq.n	8002e30 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	69fa      	ldr	r2, [r7, #28]
 8002e66:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689a      	ldr	r2, [r3, #8]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e7e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e8e:	609a      	str	r2, [r3, #8]
 8002e90:	e040      	b.n	8002f14 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ea0:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002eb2:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	1e5a      	subs	r2, r3, #1
 8002eb8:	617a      	str	r2, [r7, #20]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10b      	bne.n	8002ed6 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	22ff      	movs	r2, #255	; 0xff
 8002ec4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2203      	movs	r2, #3
 8002eca:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e035      	b.n	8002f42 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0e7      	beq.n	8002eb4 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	69fa      	ldr	r2, [r7, #28]
 8002eea:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f02:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f12:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002f14:	4b0f      	ldr	r3, [pc, #60]	; (8002f54 <HAL_RTC_SetAlarm_IT+0x26c>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a0e      	ldr	r2, [pc, #56]	; (8002f54 <HAL_RTC_SetAlarm_IT+0x26c>)
 8002f1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f1e:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8002f20:	4b0c      	ldr	r3, [pc, #48]	; (8002f54 <HAL_RTC_SetAlarm_IT+0x26c>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	4a0b      	ldr	r2, [pc, #44]	; (8002f54 <HAL_RTC_SetAlarm_IT+0x26c>)
 8002f26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f2a:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	22ff      	movs	r2, #255	; 0xff
 8002f32:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2201      	movs	r2, #1
 8002f38:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3724      	adds	r7, #36	; 0x24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd90      	pop	{r4, r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	20000000 	.word	0x20000000
 8002f50:	10624dd3 	.word	0x10624dd3
 8002f54:	40013c00 	.word	0x40013c00

08002f58 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
 8002f64:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8002f66:	2300      	movs	r3, #0
 8002f68:	617b      	str	r3, [r7, #20]
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f74:	d10e      	bne.n	8002f94 <HAL_RTC_GetAlarm+0x3c>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f7c:	629a      	str	r2, [r3, #40]	; 0x28

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	e00d      	b.n	8002fb0 <HAL_RTC_GetAlarm+0x58>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f9a:	629a      	str	r2, [r3, #40]	; 0x28

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002faa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002fae:	613b      	str	r3, [r7, #16]
  }

  /* Fill the structure with the read parameters */
  sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16);
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	0c1b      	lsrs	r3, r3, #16
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8);
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	0a1b      	lsrs	r3, r3, #8
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	709a      	strb	r2, [r3, #2]
  sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	0c1b      	lsrs	r3, r3, #16
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	731a      	strb	r2, [r3, #12]
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	605a      	str	r2, [r3, #4]
  sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	0e1b      	lsrs	r3, r3, #24
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	621a      	str	r2, [r3, #32]
  sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	619a      	str	r2, [r3, #24]

  if(Format == RTC_FORMAT_BIN)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d125      	bne.n	800306c <HAL_RTC_GetAlarm+0x114>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	4618      	mov	r0, r3
 8003026:	f000 f8df 	bl	80031e8 <RTC_Bcd2ToByte>
 800302a:	4603      	mov	r3, r0
 800302c:	461a      	mov	r2, r3
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	785b      	ldrb	r3, [r3, #1]
 8003036:	4618      	mov	r0, r3
 8003038:	f000 f8d6 	bl	80031e8 <RTC_Bcd2ToByte>
 800303c:	4603      	mov	r3, r0
 800303e:	461a      	mov	r2, r3
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	789b      	ldrb	r3, [r3, #2]
 8003048:	4618      	mov	r0, r3
 800304a:	f000 f8cd 	bl	80031e8 <RTC_Bcd2ToByte>
 800304e:	4603      	mov	r3, r0
 8003050:	461a      	mov	r2, r3
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800305c:	4618      	mov	r0, r3
 800305e:	f000 f8c3 	bl	80031e8 <RTC_Bcd2ToByte>
 8003062:	4603      	mov	r3, r0
 8003064:	461a      	mov	r2, r3
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
	...

08003078 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRA))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308a:	2b00      	cmp	r3, #0
 800308c:	d012      	beq.n	80030b4 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the status of the Interrupt */
    if((uint32_t)(hrtc->Instance->CR & RTC_IT_ALRA) != (uint32_t)RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00b      	beq.n	80030b4 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f7fd fa87 	bl	80005b0 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80030b2:	60da      	str	r2, [r3, #12]
    }
  }

  if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRB))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d012      	beq.n	80030e8 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the status of the Interrupt */
    if((uint32_t)(hrtc->Instance->CR & RTC_IT_ALRB) != (uint32_t)RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00b      	beq.n	80030e8 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 f8d9 	bl	8003288 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f462 7220 	orn	r2, r2, #640	; 0x280
 80030e6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80030e8:	4b05      	ldr	r3, [pc, #20]	; (8003100 <HAL_RTC_AlarmIRQHandler+0x88>)
 80030ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030ee:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	775a      	strb	r2, [r3, #29]
}
 80030f6:	bf00      	nop
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40013c00 	.word	0x40013c00

08003104 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800310c:	2300      	movs	r3, #0
 800310e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800311e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003120:	f7fe f802 	bl	8001128 <HAL_GetTick>
 8003124:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003126:	e009      	b.n	800313c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003128:	f7fd fffe 	bl	8001128 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003136:	d901      	bls.n	800313c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e007      	b.n	800314c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	f003 0320 	and.w	r3, r3, #32
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0ee      	beq.n	8003128 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800315c:	2300      	movs	r3, #0
 800315e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316a:	2b00      	cmp	r3, #0
 800316c:	d119      	bne.n	80031a2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f04f 32ff 	mov.w	r2, #4294967295
 8003176:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003178:	f7fd ffd6 	bl	8001128 <HAL_GetTick>
 800317c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800317e:	e009      	b.n	8003194 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003180:	f7fd ffd2 	bl	8001128 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800318e:	d901      	bls.n	8003194 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e007      	b.n	80031a4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d0ee      	beq.n	8003180 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4603      	mov	r3, r0
 80031b4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80031b6:	2300      	movs	r3, #0
 80031b8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80031ba:	e005      	b.n	80031c8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	3301      	adds	r3, #1
 80031c0:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80031c2:	79fb      	ldrb	r3, [r7, #7]
 80031c4:	3b0a      	subs	r3, #10
 80031c6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80031c8:	79fb      	ldrb	r3, [r7, #7]
 80031ca:	2b09      	cmp	r3, #9
 80031cc:	d8f6      	bhi.n	80031bc <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	011b      	lsls	r3, r3, #4
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	79fb      	ldrb	r3, [r7, #7]
 80031d8:	4313      	orrs	r3, r2
 80031da:	b2db      	uxtb	r3, r3
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	4603      	mov	r3, r0
 80031f0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80031f6:	79fb      	ldrb	r3, [r7, #7]
 80031f8:	091b      	lsrs	r3, r3, #4
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	461a      	mov	r2, r3
 80031fe:	4613      	mov	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003208:	79fb      	ldrb	r3, [r7, #7]
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	b2da      	uxtb	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	b2db      	uxtb	r3, r3
 8003214:	4413      	add	r3, r2
 8003216:	b2db      	uxtb	r3, r3
}
 8003218:	4618      	mov	r0, r3
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003224:	b480      	push	{r7}
 8003226:	b087      	sub	sp, #28
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 8003230:	2300      	movs	r3, #0
 8003232:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	3350      	adds	r3, #80	; 0x50
 800323a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4);
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	4413      	add	r3, r2
 8003244:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	601a      	str	r2, [r3, #0]
}
 800324c:	bf00      	nop
 800324e:	371c      	adds	r7, #28
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 8003262:	2300      	movs	r3, #0
 8003264:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	3350      	adds	r3, #80	; 0x50
 800326c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	4413      	add	r3, r2
 8003276:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3714      	adds	r7, #20
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e01d      	b.n	80032ea <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d105      	bne.n	80032c6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7fd fda9 	bl	8000e18 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2203      	movs	r2, #3
 80032ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f80f 	bl	80032f2 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80032f2:	b5b0      	push	{r4, r5, r7, lr}
 80032f4:	b08e      	sub	sp, #56	; 0x38
 80032f6:	af04      	add	r7, sp, #16
 80032f8:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80032fa:	2300      	movs	r3, #0
 80032fc:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80032fe:	2300      	movs	r3, #0
 8003300:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8003302:	2300      	movs	r3, #0
 8003304:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800330a:	2300      	movs	r3, #0
 800330c:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800330e:	2300      	movs	r3, #0
 8003310:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8003312:	2376      	movs	r3, #118	; 0x76
 8003314:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681d      	ldr	r5, [r3, #0]
 800331a:	466c      	mov	r4, sp
 800331c:	f107 0318 	add.w	r3, r7, #24
 8003320:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003324:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003328:	f107 030c 	add.w	r3, r7, #12
 800332c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800332e:	4628      	mov	r0, r5
 8003330:	f001 f99a 	bl	8004668 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003342:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	f001 f9d7 	bl	80046fc <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800335c:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 800335e:	2002      	movs	r0, #2
 8003360:	f7fd feee 	bl	8001140 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f001 f85f 	bl	8004428 <SD_PowerON>
 800336a:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00b      	beq.n	800338a <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	431a      	orrs	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e013      	b.n	80033b2 <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 ff83 	bl	8004296 <SD_InitCard>
 8003390:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00b      	beq.n	80033b0 <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e000      	b.n	80033b2 <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3728      	adds	r7, #40	; 0x28
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bdb0      	pop	{r4, r5, r7, pc}

080033ba <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80033ba:	b590      	push	{r4, r7, lr}
 80033bc:	b08f      	sub	sp, #60	; 0x3c
 80033be:	af00      	add	r7, sp, #0
 80033c0:	60f8      	str	r0, [r7, #12]
 80033c2:	60b9      	str	r1, [r7, #8]
 80033c4:	607a      	str	r2, [r7, #4]
 80033c6:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80033c8:	2300      	movs	r3, #0
 80033ca:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 80033cc:	f7fd feac 	bl	8001128 <HAL_GetTick>
 80033d0:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0, *tempbuff = (uint32_t *)pData;
 80033d2:	2300      	movs	r3, #0
 80033d4:	633b      	str	r3, [r7, #48]	; 0x30
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d107      	bne.n	80033f0 <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e176      	b.n	80036de <HAL_SD_ReadBlocks+0x324>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	f040 8169 	bne.w	80036d0 <HAL_SD_ReadBlocks+0x316>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	441a      	add	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800340e:	429a      	cmp	r2, r3
 8003410:	d907      	bls.n	8003422 <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003416:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e15d      	b.n	80036de <HAL_SD_ReadBlocks+0x324>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2203      	movs	r2, #3
 8003426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2200      	movs	r2, #0
 8003430:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003436:	2b01      	cmp	r3, #1
 8003438:	d002      	beq.n	8003440 <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	025b      	lsls	r3, r3, #9
 800343e:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003448:	4618      	mov	r0, r3
 800344a:	f001 f9eb 	bl	8004824 <SDMMC_CmdBlockLength>
 800344e:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8003450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003452:	2b00      	cmp	r3, #0
 8003454:	d010      	beq.n	8003478 <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);      
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800345e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003466:	431a      	orrs	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e132      	b.n	80036de <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003478:	f04f 33ff 	mov.w	r3, #4294967295
 800347c:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	025b      	lsls	r3, r3, #9
 8003482:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003484:	2390      	movs	r3, #144	; 0x90
 8003486:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003488:	2302      	movs	r3, #2
 800348a:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800348c:	2300      	movs	r3, #0
 800348e:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8003490:	2301      	movs	r3, #1
 8003492:	627b      	str	r3, [r7, #36]	; 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f107 0210 	add.w	r2, r7, #16
 800349c:	4611      	mov	r1, r2
 800349e:	4618      	mov	r0, r3
 80034a0:	f001 f994 	bl	80047cc <SDMMC_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d90a      	bls.n	80034c0 <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2202      	movs	r2, #2
 80034ae:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f001 f9fc 	bl	80048b4 <SDMMC_CmdReadMultiBlock>
 80034bc:	6378      	str	r0, [r7, #52]	; 0x34
 80034be:	e009      	b.n	80034d4 <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2201      	movs	r2, #1
 80034c4:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f001 f9cd 	bl	800486c <SDMMC_CmdReadSingleBlock>
 80034d2:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80034d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d04a      	beq.n	8003570 <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80034e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ea:	431a      	orrs	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e0f0      	b.n	80036de <HAL_SD_ReadBlocks+0x324>
    }
      
    /* Poll on SDMMC flags */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003502:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d016      	beq.n	8003538 <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800350a:	2300      	movs	r3, #0
 800350c:	633b      	str	r3, [r7, #48]	; 0x30
 800350e:	e00d      	b.n	800352c <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDMMC_ReadFIFO(hsd->Instance);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6819      	ldr	r1, [r3, #0]
 8003514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800351a:	18d4      	adds	r4, r2, r3
 800351c:	4608      	mov	r0, r1
 800351e:	f001 f8cf 	bl	80046c0 <SDMMC_ReadFIFO>
 8003522:	4603      	mov	r3, r0
 8003524:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 8003526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003528:	3301      	adds	r3, #1
 800352a:	633b      	str	r3, [r7, #48]	; 0x30
 800352c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352e:	2b07      	cmp	r3, #7
 8003530:	d9ee      	bls.n	8003510 <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 8003532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003534:	3320      	adds	r3, #32
 8003536:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8003538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800353a:	2b00      	cmp	r3, #0
 800353c:	d007      	beq.n	800354e <HAL_SD_ReadBlocks+0x194>
 800353e:	f7fd fdf3 	bl	8001128 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800354a:	429a      	cmp	r2, r3
 800354c:	d810      	bhi.n	8003570 <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003556:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e0b6      	b.n	80036de <HAL_SD_ReadBlocks+0x324>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003576:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0be      	beq.n	80034fc <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003588:	2b00      	cmp	r3, #0
 800358a:	d020      	beq.n	80035ce <HAL_SD_ReadBlocks+0x214>
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d91d      	bls.n	80035ce <HAL_SD_ReadBlocks+0x214>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003596:	2b03      	cmp	r3, #3
 8003598:	d019      	beq.n	80035ce <HAL_SD_ReadBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f001 f9f4 	bl	800498c <SDMMC_CmdStopTransfer>
 80035a4:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 80035a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d010      	beq.n	80035ce <HAL_SD_ReadBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80035b4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035bc:	431a      	orrs	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e087      	b.n	80036de <HAL_SD_ReadBlocks+0x324>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d4:	f003 0308 	and.w	r3, r3, #8
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d010      	beq.n	80035fe <HAL_SD_ReadBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80035e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ea:	f043 0208 	orr.w	r2, r3, #8
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e06f      	b.n	80036de <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d010      	beq.n	800362e <HAL_SD_ReadBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003614:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361a:	f043 0202 	orr.w	r2, r3, #2
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e057      	b.n	80036de <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003634:	f003 0320 	and.w	r3, r3, #32
 8003638:	2b00      	cmp	r3, #0
 800363a:	d037      	beq.n	80036ac <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003644:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364a:	f043 0220 	orr.w	r2, r3, #32
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e03f      	b.n	80036de <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
    {
      *tempbuff = SDMMC_ReadFIFO(hsd->Instance);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f001 f82c 	bl	80046c0 <SDMMC_ReadFIFO>
 8003668:	4602      	mov	r2, r0
 800366a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366c:	601a      	str	r2, [r3, #0]
      tempbuff++;
 800366e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003670:	3304      	adds	r3, #4
 8003672:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8003674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003676:	2b00      	cmp	r3, #0
 8003678:	d007      	beq.n	800368a <HAL_SD_ReadBlocks+0x2d0>
 800367a:	f7fd fd55 	bl	8001128 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003686:	429a      	cmp	r2, r3
 8003688:	d810      	bhi.n	80036ac <HAL_SD_ReadBlocks+0x2f2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);        
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003692:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003698:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e018      	b.n	80036de <HAL_SD_ReadBlocks+0x324>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1d1      	bne.n	800365e <HAL_SD_ReadBlocks+0x2a4>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80036c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 80036cc:	2300      	movs	r3, #0
 80036ce:	e006      	b.n	80036de <HAL_SD_ReadBlocks+0x324>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
  }
}
 80036de:	4618      	mov	r0, r3
 80036e0:	373c      	adds	r7, #60	; 0x3c
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd90      	pop	{r4, r7, pc}

080036e6 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b08e      	sub	sp, #56	; 0x38
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	60f8      	str	r0, [r7, #12]
 80036ee:	60b9      	str	r1, [r7, #8]
 80036f0:	607a      	str	r2, [r7, #4]
 80036f2:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80036f4:	2300      	movs	r3, #0
 80036f6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 80036f8:	f7fd fd16 	bl	8001128 <HAL_GetTick>
 80036fc:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0;
 80036fe:	2300      	movs	r3, #0
 8003700:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d107      	bne.n	800371c <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003710:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e147      	b.n	80039ac <HAL_SD_WriteBlocks+0x2c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b01      	cmp	r3, #1
 8003726:	f040 813a 	bne.w	800399e <HAL_SD_WriteBlocks+0x2b8>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	441a      	add	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373a:	429a      	cmp	r2, r3
 800373c:	d907      	bls.n	800374e <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003742:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e12e      	b.n	80039ac <HAL_SD_WriteBlocks+0x2c6>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2203      	movs	r2, #3
 8003752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2200      	movs	r2, #0
 800375c:	62da      	str	r2, [r3, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003762:	2b01      	cmp	r3, #1
 8003764:	d002      	beq.n	800376c <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	025b      	lsls	r3, r3, #9
 800376a:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003774:	4618      	mov	r0, r3
 8003776:	f001 f855 	bl	8004824 <SDMMC_CmdBlockLength>
 800377a:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 800377c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800377e:	2b00      	cmp	r3, #0
 8003780:	d010      	beq.n	80037a4 <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800378a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003792:	431a      	orrs	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e103      	b.n	80039ac <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d90a      	bls.n	80037c0 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2220      	movs	r2, #32
 80037ae:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6879      	ldr	r1, [r7, #4]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f001 f8c4 	bl	8004944 <SDMMC_CmdWriteMultiBlock>
 80037bc:	6378      	str	r0, [r7, #52]	; 0x34
 80037be:	e009      	b.n	80037d4 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2210      	movs	r2, #16
 80037c4:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f001 f895 	bl	80048fc <SDMMC_CmdWriteSingleBlock>
 80037d2:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80037d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d010      	beq.n	80037fc <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80037e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ea:	431a      	orrs	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e0d7      	b.n	80039ac <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80037fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003800:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	025b      	lsls	r3, r3, #9
 8003806:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003808:	2390      	movs	r3, #144	; 0x90
 800380a:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800380c:	2300      	movs	r3, #0
 800380e:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003810:	2300      	movs	r3, #0
 8003812:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8003814:	2301      	movs	r3, #1
 8003816:	627b      	str	r3, [r7, #36]	; 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f107 0210 	add.w	r2, r7, #16
 8003820:	4611      	mov	r1, r2
 8003822:	4618      	mov	r0, r3
 8003824:	f000 ffd2 	bl	80047cc <SDMMC_ConfigData>
    
    /* Write block(s) in polling mode */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003828:	e037      	b.n	800389a <HAL_SD_WriteBlocks+0x1b4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE))
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d014      	beq.n	8003862 <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003838:	2300      	movs	r3, #0
 800383a:	633b      	str	r3, [r7, #48]	; 0x30
 800383c:	e00b      	b.n	8003856 <HAL_SD_WriteBlocks+0x170>
        {
          SDMMC_WriteFIFO(hsd->Instance, (tempbuff + count));
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6818      	ldr	r0, [r3, #0]
 8003842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003848:	4413      	add	r3, r2
 800384a:	4619      	mov	r1, r3
 800384c:	f000 ff45 	bl	80046da <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003852:	3301      	adds	r3, #1
 8003854:	633b      	str	r3, [r7, #48]	; 0x30
 8003856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003858:	2b07      	cmp	r3, #7
 800385a:	d9f0      	bls.n	800383e <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 800385c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385e:	3320      	adds	r3, #32
 8003860:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8003862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003864:	2b00      	cmp	r3, #0
 8003866:	d007      	beq.n	8003878 <HAL_SD_WriteBlocks+0x192>
 8003868:	f7fd fc5e 	bl	8001128 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003874:	429a      	cmp	r2, r3
 8003876:	d810      	bhi.n	800389a <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003880:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003888:	431a      	orrs	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e088      	b.n	80039ac <HAL_SD_WriteBlocks+0x2c6>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a0:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0c0      	beq.n	800382a <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d020      	beq.n	80038f8 <HAL_SD_WriteBlocks+0x212>
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d91d      	bls.n	80038f8 <HAL_SD_WriteBlocks+0x212>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c0:	2b03      	cmp	r3, #3
 80038c2:	d019      	beq.n	80038f8 <HAL_SD_WriteBlocks+0x212>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f001 f85f 	bl	800498c <SDMMC_CmdStopTransfer>
 80038ce:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 80038d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d010      	beq.n	80038f8 <HAL_SD_WriteBlocks+0x212>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80038de:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e6:	431a      	orrs	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e059      	b.n	80039ac <HAL_SD_WriteBlocks+0x2c6>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	2b00      	cmp	r3, #0
 8003904:	d010      	beq.n	8003928 <HAL_SD_WriteBlocks+0x242>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800390e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003914:	f043 0208 	orr.w	r2, r3, #8
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e041      	b.n	80039ac <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d010      	beq.n	8003958 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800393e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003944:	f043 0202 	orr.w	r2, r3, #2
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e029      	b.n	80039ac <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800395e:	f003 0310 	and.w	r3, r3, #16
 8003962:	2b00      	cmp	r3, #0
 8003964:	d010      	beq.n	8003988 <HAL_SD_WriteBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800396e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003974:	f043 0210 	orr.w	r2, r3, #16
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e011      	b.n	80039ac <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003990:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 800399a:	2300      	movs	r3, #0
 800399c:	e006      	b.n	80039ac <HAL_SD_WriteBlocks+0x2c6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
  }
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3738      	adds	r7, #56	; 0x38
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80039bc:	2300      	movs	r3, #0
 80039be:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDMMC interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DATAEND) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 808b 	beq.w	8003ae6 <HAL_SD_IRQHandler+0x132>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND); 
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80039e8:	63da      	str	r2, [r3, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d03a      	beq.n	8003a6c <HAL_SD_IRQHandler+0xb8>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d105      	bne.n	8003a0e <HAL_SD_IRQHandler+0x5a>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	f003 0320 	and.w	r3, r3, #32
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d011      	beq.n	8003a32 <HAL_SD_IRQHandler+0x7e>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 ffba 	bl	800498c <SDMMC_CmdStopTransfer>
 8003a18:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d008      	beq.n	8003a32 <HAL_SD_IRQHandler+0x7e>
        {
          hsd->ErrorCode |= errorstate;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	431a      	orrs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f929 	bl	8003c84 <HAL_SD_ErrorCallback>
#endif
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003a3a:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d105      	bne.n	8003a5c <HAL_SD_IRQHandler+0xa8>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <HAL_SD_IRQHandler+0xb0>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 f907 	bl	8003c70 <HAL_SD_RxCpltCallback>
#else
      HAL_SD_ErrorCallback(hsd);
#endif
    }
  }
}
 8003a62:	e0f3      	b.n	8003c4c <HAL_SD_IRQHandler+0x298>
        HAL_SD_TxCpltCallback(hsd);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 f8f9 	bl	8003c5c <HAL_SD_TxCpltCallback>
}
 8003a6a:	e0ef      	b.n	8003c4c <HAL_SD_IRQHandler+0x298>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 80e9 	beq.w	8003c4c <HAL_SD_IRQHandler+0x298>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7e:	f003 0320 	and.w	r3, r3, #32
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d011      	beq.n	8003aaa <HAL_SD_IRQHandler+0xf6>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 ff7e 	bl	800498c <SDMMC_CmdStopTransfer>
 8003a90:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d008      	beq.n	8003aaa <HAL_SD_IRQHandler+0xf6>
          hsd->ErrorCode |= errorstate;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f8ed 	bl	8003c84 <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f040 80ca 	bne.w	8003c4c <HAL_SD_IRQHandler+0x298>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f040 80c3 	bne.w	8003c4c <HAL_SD_IRQHandler+0x298>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 0208 	bic.w	r2, r2, #8
 8003ad4:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f8bc 	bl	8003c5c <HAL_SD_TxCpltCallback>
}
 8003ae4:	e0b2      	b.n	8003c4c <HAL_SD_IRQHandler+0x298>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXFIFOHE) != RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d008      	beq.n	8003b06 <HAL_SD_IRQHandler+0x152>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_TXFIFOHE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003afc:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 fd8c 	bl	800461c <SD_Write_IT>
}
 8003b04:	e0a2      	b.n	8003c4c <HAL_SD_IRQHandler+0x298>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXFIFOHF) != RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d008      	beq.n	8003b26 <HAL_SD_IRQHandler+0x172>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXFIFOHF);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003b1c:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 fd54 	bl	80045cc <SD_Read_IT>
}
 8003b24:	e092      	b.n	8003c4c <HAL_SD_IRQHandler+0x298>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_TXUNDERR) != RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b2c:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 808b 	beq.w	8003c4c <HAL_SD_IRQHandler+0x298>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d005      	beq.n	8003b50 <HAL_SD_IRQHandler+0x19c>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b48:	f043 0202 	orr.w	r2, r3, #2
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b56:	f003 0308 	and.w	r3, r3, #8
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d005      	beq.n	8003b6a <HAL_SD_IRQHandler+0x1b6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b62:	f043 0208 	orr.w	r2, r3, #8
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b70:	f003 0320 	and.w	r3, r3, #32
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d005      	beq.n	8003b84 <HAL_SD_IRQHandler+0x1d0>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7c:	f043 0220 	orr.w	r2, r3, #32
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8a:	f003 0310 	and.w	r3, r3, #16
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d005      	beq.n	8003b9e <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b96:	f043 0210 	orr.w	r2, r3, #16
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003ba6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003bb6:	63da      	str	r2, [r3, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d036      	beq.n	8003c32 <HAL_SD_IRQHandler+0x27e>
      if(hsd->hdmatx != NULL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d011      	beq.n	8003bf0 <HAL_SD_IRQHandler+0x23c>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	4a20      	ldr	r2, [pc, #128]	; (8003c54 <HAL_SD_IRQHandler+0x2a0>)
 8003bd2:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7fd fbe4 	bl	80013a6 <HAL_DMA_Abort_IT>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d033      	beq.n	8003c4c <HAL_SD_IRQHandler+0x298>
          SD_DMATxAbort(hsd->hdmatx);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be8:	4618      	mov	r0, r3
 8003bea:	f000 fad8 	bl	800419e <SD_DMATxAbort>
}
 8003bee:	e02d      	b.n	8003c4c <HAL_SD_IRQHandler+0x298>
      else if(hsd->hdmarx != NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d011      	beq.n	8003c1c <HAL_SD_IRQHandler+0x268>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bfc:	4a16      	ldr	r2, [pc, #88]	; (8003c58 <HAL_SD_IRQHandler+0x2a4>)
 8003bfe:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7fd fbce 	bl	80013a6 <HAL_DMA_Abort_IT>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d01d      	beq.n	8003c4c <HAL_SD_IRQHandler+0x298>
          SD_DMARxAbort(hsd->hdmarx);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 fb00 	bl	800421a <SD_DMARxAbort>
}
 8003c1a:	e017      	b.n	8003c4c <HAL_SD_IRQHandler+0x298>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f834 	bl	8003c98 <HAL_SD_AbortCallback>
}
 8003c30:	e00c      	b.n	8003c4c <HAL_SD_IRQHandler+0x298>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c36:	f003 0308 	and.w	r3, r3, #8
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d006      	beq.n	8003c4c <HAL_SD_IRQHandler+0x298>
      hsd->State = HAL_SD_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f81c 	bl	8003c84 <HAL_SD_ErrorCallback>
}
 8003c4c:	bf00      	nop
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	0800419f 	.word	0x0800419f
 8003c58:	0800421b 	.word	0x0800421b

08003c5c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd Pointer to SD handle
  * @retval None
  */
 __weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cbe:	0e1b      	lsrs	r3, r3, #24
 8003cc0:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	099b      	lsrs	r3, r3, #6
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	f003 0303 	and.w	r3, r3, #3
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	089b      	lsrs	r3, r3, #2
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	f003 030f 	and.w	r3, r3, #15
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	f003 0303 	and.w	r3, r3, #3
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cf4:	0c1b      	lsrs	r3, r3, #16
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	b2da      	uxtb	r2, r3
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d06:	0a1b      	lsrs	r3, r3, #8
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d28:	0e1b      	lsrs	r3, r3, #24
 8003d2a:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d3c:	0c1b      	lsrs	r3, r3, #16
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	88db      	ldrh	r3, [r3, #6]
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	091b      	lsrs	r3, r3, #4
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	f003 030f 	and.w	r3, r3, #15
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	4313      	orrs	r3, r2
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	f003 030f 	and.w	r3, r3, #15
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d6e:	0a1b      	lsrs	r3, r3, #8
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	09db      	lsrs	r3, r3, #7
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	b2da      	uxtb	r2, r3
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	099b      	lsrs	r3, r3, #6
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	095b      	lsrs	r3, r3, #5
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	091b      	lsrs	r3, r3, #4
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	2200      	movs	r2, #0
 8003db8:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f040 8086 	bne.w	8003ed0 <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	029b      	lsls	r3, r3, #10
 8003dc8:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	691a      	ldr	r2, [r3, #16]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	431a      	orrs	r2, r3
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dea:	0e1b      	lsrs	r3, r3, #24
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	691a      	ldr	r2, [r3, #16]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	099b      	lsrs	r3, r3, #6
 8003df8:	f003 0303 	and.w	r3, r3, #3
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	08db      	lsrs	r3, r3, #3
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	f003 0307 	and.w	r3, r3, #7
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e24:	0c1b      	lsrs	r3, r3, #16
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	095b      	lsrs	r3, r3, #5
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	f003 0307 	and.w	r3, r3, #7
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	089b      	lsrs	r3, r3, #2
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	f003 0306 	and.w	r3, r3, #6
 8003e56:	b2da      	uxtb	r2, r3
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e60:	0a1b      	lsrs	r3, r3, #8
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	7e1b      	ldrb	r3, [r3, #24]
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	09db      	lsrs	r3, r3, #7
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	b2da      	uxtb	r2, r3
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	1c5a      	adds	r2, r3, #1
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	7e1b      	ldrb	r3, [r3, #24]
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	3302      	adds	r3, #2
 8003e92:	2201      	movs	r2, #1
 8003e94:	409a      	lsls	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9a:	fb02 f203 	mul.w	r2, r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	7a1b      	ldrb	r3, [r3, #8]
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	2301      	movs	r3, #1
 8003eac:	4093      	lsls	r3, r2
 8003eae:	461a      	mov	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003ebc:	0a52      	lsrs	r2, r2, #9
 8003ebe:	fb02 f203 	mul.w	r2, r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ecc:	661a      	str	r2, [r3, #96]	; 0x60
 8003ece:	e04d      	b.n	8003f6c <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d138      	bne.n	8003f4a <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	041b      	lsls	r3, r3, #16
 8003ee4:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ef0:	0e1b      	lsrs	r3, r3, #24
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	691a      	ldr	r2, [r3, #16]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	021b      	lsls	r3, r3, #8
 8003efe:	431a      	orrs	r2, r3
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f08:	0c1b      	lsrs	r3, r3, #16
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	691a      	ldr	r2, [r3, #16]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	431a      	orrs	r2, r3
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f1e:	0a1b      	lsrs	r3, r3, #8
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	029a      	lsls	r2, r3, #10
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	655a      	str	r2, [r3, #84]	; 0x54
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f3e:	659a      	str	r2, [r3, #88]	; 0x58
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	661a      	str	r2, [r3, #96]	; 0x60
 8003f48:	e010      	b.n	8003f6c <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003f52:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f58:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e0c1      	b.n	80040f0 <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	099b      	lsrs	r3, r3, #6
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003f88:	b2da      	uxtb	r2, r3
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	7e9b      	ldrb	r3, [r3, #26]
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	09db      	lsrs	r3, r3, #7
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc2:	0e1b      	lsrs	r3, r3, #24
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	09db      	lsrs	r3, r3, #7
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	095b      	lsrs	r3, r3, #5
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	f003 0303 	and.w	r3, r3, #3
 8003fe2:	b2da      	uxtb	r2, r3
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	089b      	lsrs	r3, r3, #2
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	f003 0307 	and.w	r3, r3, #7
 8003ff2:	b2da      	uxtb	r2, r3
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	f003 030c 	and.w	r3, r3, #12
 8004004:	b2da      	uxtb	r2, r3
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400e:	0c1b      	lsrs	r3, r3, #16
 8004010:	b2db      	uxtb	r3, r3
 8004012:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	7fdb      	ldrb	r3, [r3, #31]
 8004018:	b2da      	uxtb	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	099b      	lsrs	r3, r3, #6
 800401e:	b2db      	uxtb	r3, r3
 8004020:	f003 0303 	and.w	r3, r3, #3
 8004024:	b2db      	uxtb	r3, r3
 8004026:	4313      	orrs	r3, r2
 8004028:	b2da      	uxtb	r2, r3
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	095b      	lsrs	r3, r3, #5
 8004032:	b2db      	uxtb	r3, r3
 8004034:	f003 0301 	and.w	r3, r3, #1
 8004038:	b2da      	uxtb	r2, r3
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	b2db      	uxtb	r3, r3
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	b2da      	uxtb	r2, r3
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405c:	0a1b      	lsrs	r3, r3, #8
 800405e:	b2db      	uxtb	r3, r3
 8004060:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	09db      	lsrs	r3, r3, #7
 8004066:	b2db      	uxtb	r3, r3
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	b2da      	uxtb	r2, r3
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	099b      	lsrs	r3, r3, #6
 8004078:	b2db      	uxtb	r3, r3
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	b2da      	uxtb	r2, r3
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	095b      	lsrs	r3, r3, #5
 800408a:	b2db      	uxtb	r3, r3
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	b2da      	uxtb	r2, r3
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	091b      	lsrs	r3, r3, #4
 800409c:	b2db      	uxtb	r3, r3
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	089b      	lsrs	r3, r3, #2
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	f003 0303 	and.w	r3, r3, #3
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	f003 0303 	and.w	r3, r3, #3
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	085b      	lsrs	r3, r3, #1
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 800415c:	2304      	movs	r3, #4
 800415e:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004160:	2300      	movs	r3, #0
 8004162:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8004164:	2300      	movs	r3, #0
 8004166:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8004168:	f107 030c 	add.w	r3, r7, #12
 800416c:	4619      	mov	r1, r3
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 fa02 	bl	8004578 <SD_SendStatus>
 8004174:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d005      	beq.n	8004188 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9) & 0x0F);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	0a5b      	lsrs	r3, r3, #9
 800418c:	b2db      	uxtb	r3, r3
 800418e:	f003 030f 	and.w	r3, r3, #15
 8004192:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8004194:	7dfb      	ldrb	r3, [r7, #23]
}
 8004196:	4618      	mov	r0, r3
 8004198:	3718      	adds	r7, #24
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b084      	sub	sp, #16
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041aa:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d002      	beq.n	80041ba <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d127      	bne.n	8004212 <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f7ff ffc6 	bl	8004154 <HAL_SD_GetCardState>
 80041c8:	4603      	mov	r3, r0
 80041ca:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80041da:	7afb      	ldrb	r3, [r7, #11]
 80041dc:	2b06      	cmp	r3, #6
 80041de:	d002      	beq.n	80041e6 <SD_DMATxAbort+0x48>
 80041e0:	7afb      	ldrb	r3, [r7, #11]
 80041e2:	2b05      	cmp	r3, #5
 80041e4:	d115      	bne.n	8004212 <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 fbce 	bl	800498c <SDMMC_CmdStopTransfer>
 80041f0:	4602      	mov	r2, r0
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f6:	431a      	orrs	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004200:	2b00      	cmp	r3, #0
 8004202:	d003      	beq.n	800420c <SD_DMATxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f7ff fd47 	bl	8003c98 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 800420a:	e002      	b.n	8004212 <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f7ff fd39 	bl	8003c84 <HAL_SD_ErrorCallback>
}
 8004212:	bf00      	nop
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b084      	sub	sp, #16
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004226:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422c:	2b00      	cmp	r3, #0
 800422e:	d002      	beq.n	8004236 <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423a:	2b00      	cmp	r3, #0
 800423c:	d127      	bne.n	800428e <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f7ff ff88 	bl	8004154 <HAL_SD_GetCardState>
 8004244:	4603      	mov	r3, r0
 8004246:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004256:	7afb      	ldrb	r3, [r7, #11]
 8004258:	2b06      	cmp	r3, #6
 800425a:	d002      	beq.n	8004262 <SD_DMARxAbort+0x48>
 800425c:	7afb      	ldrb	r3, [r7, #11]
 800425e:	2b05      	cmp	r3, #5
 8004260:	d115      	bne.n	800428e <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4618      	mov	r0, r3
 8004268:	f000 fb90 	bl	800498c <SDMMC_CmdStopTransfer>
 800426c:	4602      	mov	r2, r0
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004272:	431a      	orrs	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <SD_DMARxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f7ff fd09 	bl	8003c98 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 8004286:	e002      	b.n	800428e <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f7ff fcfb 	bl	8003c84 <HAL_SD_ErrorCallback>
}
 800428e:	bf00      	nop
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004296:	b5b0      	push	{r4, r5, r7, lr}
 8004298:	b094      	sub	sp, #80	; 0x50
 800429a:	af04      	add	r7, sp, #16
 800429c:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800429e:	2300      	movs	r3, #0
 80042a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1;
 80042a2:	2301      	movs	r3, #1
 80042a4:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 fa34 	bl	8004718 <SDMMC_GetPowerState>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d102      	bne.n	80042bc <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80042b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80042ba:	e0b1      	b.n	8004420 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c0:	2b03      	cmp	r3, #3
 80042c2:	d02f      	beq.n	8004324 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 fc33 	bl	8004b34 <SDMMC_CmdSendCID>
 80042ce:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80042d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <SD_InitCard+0x44>
    {
      return errorstate;
 80042d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042d8:	e0a2      	b.n	8004420 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2100      	movs	r1, #0
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fa5e 	bl	80047a2 <SDMMC_GetResponse>
 80042e6:	4602      	mov	r2, r0
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2104      	movs	r1, #4
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 fa55 	bl	80047a2 <SDMMC_GetResponse>
 80042f8:	4602      	mov	r2, r0
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2108      	movs	r1, #8
 8004304:	4618      	mov	r0, r3
 8004306:	f000 fa4c 	bl	80047a2 <SDMMC_GetResponse>
 800430a:	4602      	mov	r2, r0
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	210c      	movs	r1, #12
 8004316:	4618      	mov	r0, r3
 8004318:	f000 fa43 	bl	80047a2 <SDMMC_GetResponse>
 800431c:	4602      	mov	r2, r0
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004328:	2b03      	cmp	r3, #3
 800432a:	d00d      	beq.n	8004348 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f107 020e 	add.w	r2, r7, #14
 8004334:	4611      	mov	r1, r2
 8004336:	4618      	mov	r0, r3
 8004338:	f000 fc3d 	bl	8004bb6 <SDMMC_CmdSetRelAdd>
 800433c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800433e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004340:	2b00      	cmp	r3, #0
 8004342:	d001      	beq.n	8004348 <SD_InitCard+0xb2>
    {
      return errorstate;
 8004344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004346:	e06b      	b.n	8004420 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434c:	2b03      	cmp	r3, #3
 800434e:	d036      	beq.n	80043be <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004350:	89fb      	ldrh	r3, [r7, #14]
 8004352:	461a      	mov	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004360:	041b      	lsls	r3, r3, #16
 8004362:	4619      	mov	r1, r3
 8004364:	4610      	mov	r0, r2
 8004366:	f000 fc05 	bl	8004b74 <SDMMC_CmdSendCSD>
 800436a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800436c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <SD_InitCard+0xe0>
    {
      return errorstate;
 8004372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004374:	e054      	b.n	8004420 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2100      	movs	r1, #0
 800437c:	4618      	mov	r0, r3
 800437e:	f000 fa10 	bl	80047a2 <SDMMC_GetResponse>
 8004382:	4602      	mov	r2, r0
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2104      	movs	r1, #4
 800438e:	4618      	mov	r0, r3
 8004390:	f000 fa07 	bl	80047a2 <SDMMC_GetResponse>
 8004394:	4602      	mov	r2, r0
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2108      	movs	r1, #8
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 f9fe 	bl	80047a2 <SDMMC_GetResponse>
 80043a6:	4602      	mov	r2, r0
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	210c      	movs	r1, #12
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 f9f5 	bl	80047a2 <SDMMC_GetResponse>
 80043b8:	4602      	mov	r2, r0
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2104      	movs	r1, #4
 80043c4:	4618      	mov	r0, r3
 80043c6:	f000 f9ec 	bl	80047a2 <SDMMC_GetResponse>
 80043ca:	4603      	mov	r3, r0
 80043cc:	0d1a      	lsrs	r2, r3, #20
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 80043d2:	f107 0310 	add.w	r3, r7, #16
 80043d6:	4619      	mov	r1, r3
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f7ff fc67 	bl	8003cac <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6819      	ldr	r1, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e6:	041b      	lsls	r3, r3, #16
 80043e8:	f04f 0400 	mov.w	r4, #0
 80043ec:	461a      	mov	r2, r3
 80043ee:	4623      	mov	r3, r4
 80043f0:	4608      	mov	r0, r1
 80043f2:	f000 faef 	bl	80049d4 <SDMMC_CmdSelDesel>
 80043f6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80043f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <SD_InitCard+0x16c>
  {
    return errorstate;
 80043fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004400:	e00e      	b.n	8004420 <SD_InitCard+0x18a>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681d      	ldr	r5, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	466c      	mov	r4, sp
 800440a:	f103 0210 	add.w	r2, r3, #16
 800440e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004410:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004414:	3304      	adds	r3, #4
 8004416:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004418:	4628      	mov	r0, r5
 800441a:	f000 f925 	bl	8004668 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3740      	adds	r7, #64	; 0x40
 8004424:	46bd      	mov	sp, r7
 8004426:	bdb0      	pop	{r4, r5, r7, pc}

08004428 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8004430:	2300      	movs	r3, #0
 8004432:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 8004434:	2300      	movs	r3, #0
 8004436:	617b      	str	r3, [r7, #20]
 8004438:	2300      	movs	r3, #0
 800443a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800443c:	2300      	movs	r3, #0
 800443e:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4618      	mov	r0, r3
 8004446:	f000 faea 	bl	8004a1e <SDMMC_CmdGoIdleState>
 800444a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <SD_PowerON+0x2e>
  {
    return errorstate;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	e08c      	b.n	8004570 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4618      	mov	r0, r3
 800445c:	f000 faff 	bl	8004a5e <SDMMC_CmdOperCond>
 8004460:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d03d      	beq.n	80044e4 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 800446e:	e032      	b.n	80044d6 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	1c5a      	adds	r2, r3, #1
 8004474:	60ba      	str	r2, [r7, #8]
 8004476:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800447a:	4293      	cmp	r3, r2
 800447c:	d102      	bne.n	8004484 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800447e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004482:	e075      	b.n	8004570 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2100      	movs	r1, #0
 800448a:	4618      	mov	r0, r3
 800448c:	f000 fb08 	bl	8004aa0 <SDMMC_CmdAppCommand>
 8004490:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d002      	beq.n	800449e <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004498:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800449c:	e068      	b.n	8004570 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2100      	movs	r1, #0
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 fb1f 	bl	8004ae8 <SDMMC_CmdAppOperCommand>
 80044aa:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80044b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80044b6:	e05b      	b.n	8004570 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2100      	movs	r1, #0
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 f96f 	bl	80047a2 <SDMMC_GetResponse>
 80044c4:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	0fdb      	lsrs	r3, r3, #31
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	bf0c      	ite	eq
 80044ce:	2301      	moveq	r3, #1
 80044d0:	2300      	movne	r3, #0
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0c9      	beq.n	8004470 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	645a      	str	r2, [r3, #68]	; 0x44
 80044e2:	e044      	b.n	800456e <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 80044ea:	e031      	b.n	8004550 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	1c5a      	adds	r2, r3, #1
 80044f0:	60ba      	str	r2, [r7, #8]
 80044f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d102      	bne.n	8004500 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80044fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044fe:	e037      	b.n	8004570 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2100      	movs	r1, #0
 8004506:	4618      	mov	r0, r3
 8004508:	f000 faca 	bl	8004aa0 <SDMMC_CmdAppCommand>
 800450c:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <SD_PowerON+0xf0>
      {
        return errorstate;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	e02b      	b.n	8004570 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004520:	4618      	mov	r0, r3
 8004522:	f000 fae1 	bl	8004ae8 <SDMMC_CmdAppOperCommand>
 8004526:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <SD_PowerON+0x10a>
      {
        return errorstate;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	e01e      	b.n	8004570 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2100      	movs	r1, #0
 8004538:	4618      	mov	r0, r3
 800453a:	f000 f932 	bl	80047a2 <SDMMC_GetResponse>
 800453e:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	0fdb      	lsrs	r3, r3, #31
 8004544:	2b01      	cmp	r3, #1
 8004546:	bf0c      	ite	eq
 8004548:	2301      	moveq	r3, #1
 800454a:	2300      	movne	r3, #0
 800454c:	b2db      	uxtb	r3, r3
 800454e:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d0ca      	beq.n	80044ec <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d003      	beq.n	8004568 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	645a      	str	r2, [r3, #68]	; 0x44
 8004566:	e002      	b.n	800456e <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3718      	adds	r7, #24
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004582:	2300      	movs	r3, #0
 8004584:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d102      	bne.n	8004592 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 800458c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004590:	e018      	b.n	80045c4 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800459a:	041b      	lsls	r3, r3, #16
 800459c:	4619      	mov	r1, r3
 800459e:	4610      	mov	r0, r2
 80045a0:	f000 fb2c 	bl	8004bfc <SDMMC_CmdSendStatus>
 80045a4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d001      	beq.n	80045b0 <SD_SendStatus+0x38>
  {
    return errorstate;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	e009      	b.n	80045c4 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2100      	movs	r1, #0
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 f8f3 	bl	80047a2 <SDMMC_GetResponse>
 80045bc:	4602      	mov	r2, r0
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80045cc:	b590      	push	{r4, r7, lr}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80045d4:	2300      	movs	r3, #0
 80045d6:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045dc:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDMMC Rx FIFO */
  for(count = 0; count < 8; count++)
 80045de:	2300      	movs	r3, #0
 80045e0:	60fb      	str	r3, [r7, #12]
 80045e2:	e00d      	b.n	8004600 <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDMMC_ReadFIFO(hsd->Instance);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6819      	ldr	r1, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	18d4      	adds	r4, r2, r3
 80045f0:	4608      	mov	r0, r1
 80045f2:	f000 f865 	bl	80046c0 <SDMMC_ReadFIFO>
 80045f6:	4603      	mov	r3, r0
 80045f8:	6023      	str	r3, [r4, #0]
  for(count = 0; count < 8; count++)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	3301      	adds	r3, #1
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2b07      	cmp	r3, #7
 8004604:	d9ee      	bls.n	80045e4 <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460a:	f103 0220 	add.w	r2, r3, #32
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	bd90      	pop	{r4, r7, pc}

0800461c <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004624:	2300      	movs	r3, #0
 8004626:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDMMC Tx FIFO */
  for(count = 0; count < 8; count++)
 800462e:	2300      	movs	r3, #0
 8004630:	60fb      	str	r3, [r7, #12]
 8004632:	e00b      	b.n	800464c <SD_Write_IT+0x30>
  {
    SDMMC_WriteFIFO(hsd->Instance, (tmp + count));
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6818      	ldr	r0, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	4413      	add	r3, r2
 8004640:	4619      	mov	r1, r3
 8004642:	f000 f84a 	bl	80046da <SDMMC_WriteFIFO>
  for(count = 0; count < 8; count++)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	3301      	adds	r3, #1
 800464a:	60fb      	str	r3, [r7, #12]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2b07      	cmp	r3, #7
 8004650:	d9f0      	bls.n	8004634 <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	f103 0220 	add.w	r2, r3, #32
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8004668:	b084      	sub	sp, #16
 800466a:	b480      	push	{r7}
 800466c:	b085      	sub	sp, #20
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
 8004672:	f107 001c 	add.w	r0, r7, #28
 8004676:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800467a:	2300      	movs	r3, #0
 800467c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800467e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004680:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004682:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004686:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004688:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800468a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800468c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800468e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004692:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	4313      	orrs	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	4b07      	ldr	r3, [pc, #28]	; (80046bc <SDMMC_Init+0x54>)
 80046a0:	4013      	ands	r3, r2
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	431a      	orrs	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	b004      	add	sp, #16
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	ffff8100 	.word	0xffff8100

080046c0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80046da:	b480      	push	{r7}
 80046dc:	b083      	sub	sp, #12
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
 80046e2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2203      	movs	r2, #3
 8004708:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0303 	and.w	r3, r3, #3
}
 8004728:	4618      	mov	r0, r3
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800473e:	2300      	movs	r3, #0
 8004740:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004752:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004758:	431a      	orrs	r2, r3
                       Command->CPSM);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800475e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	4313      	orrs	r3, r2
 8004764:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68da      	ldr	r2, [r3, #12]
 800476a:	4b06      	ldr	r3, [pc, #24]	; (8004784 <SDMMC_SendCommand+0x50>)
 800476c:	4013      	ands	r3, r2
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	431a      	orrs	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3714      	adds	r7, #20
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	fffff000 	.word	0xfffff000

08004788 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	b2db      	uxtb	r3, r3
}
 8004796:	4618      	mov	r0, r3
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr

080047a2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80047a2:	b480      	push	{r7}
 80047a4:	b085      	sub	sp, #20
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
 80047aa:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 80047ac:	2300      	movs	r3, #0
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3314      	adds	r3, #20
 80047b4:	461a      	mov	r2, r3
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	4413      	add	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
}  
 80047c0:	4618      	mov	r0, r3
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80047d6:	2300      	movs	r3, #0
 80047d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80047f2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80047f8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80047fe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	4313      	orrs	r3, r2
 8004804:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	431a      	orrs	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004816:	2300      	movs	r3, #0

}
 8004818:	4618      	mov	r0, r3
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b088      	sub	sp, #32
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800482e:	2300      	movs	r3, #0
 8004830:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004836:	2310      	movs	r3, #16
 8004838:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800483a:	2340      	movs	r3, #64	; 0x40
 800483c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800483e:	2300      	movs	r3, #0
 8004840:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004846:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004848:	f107 0308 	add.w	r3, r7, #8
 800484c:	4619      	mov	r1, r3
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7ff ff70 	bl	8004734 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8004854:	f241 3288 	movw	r2, #5000	; 0x1388
 8004858:	2110      	movs	r1, #16
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 fa1c 	bl	8004c98 <SDMMC_GetCmdResp1>
 8004860:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004862:	69fb      	ldr	r3, [r7, #28]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3720      	adds	r7, #32
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b088      	sub	sp, #32
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004876:	2300      	movs	r3, #0
 8004878:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800487e:	2311      	movs	r3, #17
 8004880:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004882:	2340      	movs	r3, #64	; 0x40
 8004884:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004886:	2300      	movs	r3, #0
 8004888:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800488a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800488e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004890:	f107 0308 	add.w	r3, r7, #8
 8004894:	4619      	mov	r1, r3
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7ff ff4c 	bl	8004734 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800489c:	f241 3288 	movw	r2, #5000	; 0x1388
 80048a0:	2111      	movs	r1, #17
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f9f8 	bl	8004c98 <SDMMC_GetCmdResp1>
 80048a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80048aa:	69fb      	ldr	r3, [r7, #28]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3720      	adds	r7, #32
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b088      	sub	sp, #32
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80048be:	2300      	movs	r3, #0
 80048c0:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80048c6:	2312      	movs	r3, #18
 80048c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80048ca:	2340      	movs	r3, #64	; 0x40
 80048cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80048ce:	2300      	movs	r3, #0
 80048d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80048d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048d6:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80048d8:	f107 0308 	add.w	r3, r7, #8
 80048dc:	4619      	mov	r1, r3
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7ff ff28 	bl	8004734 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80048e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e8:	2112      	movs	r1, #18
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 f9d4 	bl	8004c98 <SDMMC_GetCmdResp1>
 80048f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80048f2:	69fb      	ldr	r3, [r7, #28]
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3720      	adds	r7, #32
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b088      	sub	sp, #32
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004906:	2300      	movs	r3, #0
 8004908:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800490e:	2318      	movs	r3, #24
 8004910:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004912:	2340      	movs	r3, #64	; 0x40
 8004914:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004916:	2300      	movs	r3, #0
 8004918:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800491a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800491e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004920:	f107 0308 	add.w	r3, r7, #8
 8004924:	4619      	mov	r1, r3
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7ff ff04 	bl	8004734 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800492c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004930:	2118      	movs	r1, #24
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f9b0 	bl	8004c98 <SDMMC_GetCmdResp1>
 8004938:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800493a:	69fb      	ldr	r3, [r7, #28]
}
 800493c:	4618      	mov	r0, r3
 800493e:	3720      	adds	r7, #32
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b088      	sub	sp, #32
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800494e:	2300      	movs	r3, #0
 8004950:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004956:	2319      	movs	r3, #25
 8004958:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800495a:	2340      	movs	r3, #64	; 0x40
 800495c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800495e:	2300      	movs	r3, #0
 8004960:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004966:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004968:	f107 0308 	add.w	r3, r7, #8
 800496c:	4619      	mov	r1, r3
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7ff fee0 	bl	8004734 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004974:	f241 3288 	movw	r2, #5000	; 0x1388
 8004978:	2119      	movs	r1, #25
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f98c 	bl	8004c98 <SDMMC_GetCmdResp1>
 8004980:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004982:	69fb      	ldr	r3, [r7, #28]
}
 8004984:	4618      	mov	r0, r3
 8004986:	3720      	adds	r7, #32
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b088      	sub	sp, #32
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004994:	2300      	movs	r3, #0
 8004996:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0;
 8004998:	2300      	movs	r3, #0
 800499a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800499c:	230c      	movs	r3, #12
 800499e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80049a0:	2340      	movs	r3, #64	; 0x40
 80049a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80049a4:	2300      	movs	r3, #0
 80049a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80049a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049ac:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80049ae:	f107 0308 	add.w	r3, r7, #8
 80049b2:	4619      	mov	r1, r3
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f7ff febd 	bl	8004734 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 80049ba:	4a05      	ldr	r2, [pc, #20]	; (80049d0 <SDMMC_CmdStopTransfer+0x44>)
 80049bc:	210c      	movs	r1, #12
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f96a 	bl	8004c98 <SDMMC_GetCmdResp1>
 80049c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049c6:	69fb      	ldr	r3, [r7, #28]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3720      	adds	r7, #32
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	05f5e100 	.word	0x05f5e100

080049d4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b08a      	sub	sp, #40	; 0x28
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80049e0:	2300      	movs	r3, #0
 80049e2:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80049e8:	2307      	movs	r3, #7
 80049ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80049ec:	2340      	movs	r3, #64	; 0x40
 80049ee:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80049f0:	2300      	movs	r3, #0
 80049f2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80049f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049f8:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80049fa:	f107 0310 	add.w	r3, r7, #16
 80049fe:	4619      	mov	r1, r3
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f7ff fe97 	bl	8004734 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8004a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a0a:	2107      	movs	r1, #7
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	f000 f943 	bl	8004c98 <SDMMC_GetCmdResp1>
 8004a12:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3728      	adds	r7, #40	; 0x28
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b088      	sub	sp, #32
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004a26:	2300      	movs	r3, #0
 8004a28:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8004a32:	2300      	movs	r3, #0
 8004a34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004a36:	2300      	movs	r3, #0
 8004a38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004a3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a3e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004a40:	f107 0308 	add.w	r3, r7, #8
 8004a44:	4619      	mov	r1, r3
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7ff fe74 	bl	8004734 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f8f9 	bl	8004c44 <SDMMC_GetCmdError>
 8004a52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a54:	69fb      	ldr	r3, [r7, #28]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3720      	adds	r7, #32
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b088      	sub	sp, #32
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004a66:	2300      	movs	r3, #0
 8004a68:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004a6a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004a6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004a70:	2308      	movs	r3, #8
 8004a72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004a74:	2340      	movs	r3, #64	; 0x40
 8004a76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004a7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a80:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004a82:	f107 0308 	add.w	r3, r7, #8
 8004a86:	4619      	mov	r1, r3
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f7ff fe53 	bl	8004734 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 faca 	bl	8005028 <SDMMC_GetCmdResp7>
 8004a94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a96:	69fb      	ldr	r3, [r7, #28]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3720      	adds	r7, #32
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b088      	sub	sp, #32
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004ab2:	2337      	movs	r3, #55	; 0x37
 8004ab4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004ab6:	2340      	movs	r3, #64	; 0x40
 8004ab8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004aba:	2300      	movs	r3, #0
 8004abc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004abe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ac2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004ac4:	f107 0308 	add.w	r3, r7, #8
 8004ac8:	4619      	mov	r1, r3
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7ff fe32 	bl	8004734 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8004ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad4:	2137      	movs	r1, #55	; 0x37
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f8de 	bl	8004c98 <SDMMC_GetCmdResp1>
 8004adc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ade:	69fb      	ldr	r3, [r7, #28]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3720      	adds	r7, #32
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b088      	sub	sp, #32
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004af2:	2300      	movs	r3, #0
 8004af4:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8004af6:	683a      	ldr	r2, [r7, #0]
 8004af8:	4b0d      	ldr	r3, [pc, #52]	; (8004b30 <SDMMC_CmdAppOperCommand+0x48>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004afe:	2329      	movs	r3, #41	; 0x29
 8004b00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004b02:	2340      	movs	r3, #64	; 0x40
 8004b04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004b06:	2300      	movs	r3, #0
 8004b08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004b0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b0e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004b10:	f107 0308 	add.w	r3, r7, #8
 8004b14:	4619      	mov	r1, r3
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7ff fe0c 	bl	8004734 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 f9e1 	bl	8004ee4 <SDMMC_GetCmdResp3>
 8004b22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b24:	69fb      	ldr	r3, [r7, #28]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3720      	adds	r7, #32
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	80100000 	.word	0x80100000

08004b34 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b088      	sub	sp, #32
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 8004b40:	2300      	movs	r3, #0
 8004b42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004b44:	2302      	movs	r3, #2
 8004b46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004b48:	23c0      	movs	r3, #192	; 0xc0
 8004b4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004b50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b54:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004b56:	f107 0308 	add.w	r3, r7, #8
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7ff fde9 	bl	8004734 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f97e 	bl	8004e64 <SDMMC_GetCmdResp2>
 8004b68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b6a:	69fb      	ldr	r3, [r7, #28]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3720      	adds	r7, #32
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b088      	sub	sp, #32
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004b86:	2309      	movs	r3, #9
 8004b88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004b8a:	23c0      	movs	r3, #192	; 0xc0
 8004b8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004b92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b96:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004b98:	f107 0308 	add.w	r3, r7, #8
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7ff fdc8 	bl	8004734 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 f95d 	bl	8004e64 <SDMMC_GetCmdResp2>
 8004baa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004bac:	69fb      	ldr	r3, [r7, #28]
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3720      	adds	r7, #32
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b088      	sub	sp, #32
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
 8004bbe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004bcc:	2340      	movs	r3, #64	; 0x40
 8004bce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004bd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bd8:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004bda:	f107 0308 	add.w	r3, r7, #8
 8004bde:	4619      	mov	r1, r3
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f7ff fda7 	bl	8004734 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	2103      	movs	r1, #3
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f9ae 	bl	8004f4c <SDMMC_GetCmdResp6>
 8004bf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004bf2:	69fb      	ldr	r3, [r7, #28]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3720      	adds	r7, #32
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b088      	sub	sp, #32
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004c06:	2300      	movs	r3, #0
 8004c08:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004c0e:	230d      	movs	r3, #13
 8004c10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004c12:	2340      	movs	r3, #64	; 0x40
 8004c14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004c16:	2300      	movs	r3, #0
 8004c18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004c1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c1e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004c20:	f107 0308 	add.w	r3, r7, #8
 8004c24:	4619      	mov	r1, r3
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7ff fd84 	bl	8004734 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8004c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c30:	210d      	movs	r1, #13
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f830 	bl	8004c98 <SDMMC_GetCmdResp1>
 8004c38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c3a:	69fb      	ldr	r3, [r7, #28]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3720      	adds	r7, #32
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8004c44:	b490      	push	{r4, r7}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8004c4c:	4b10      	ldr	r3, [pc, #64]	; (8004c90 <SDMMC_GetCmdError+0x4c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a10      	ldr	r2, [pc, #64]	; (8004c94 <SDMMC_GetCmdError+0x50>)
 8004c52:	fba2 2303 	umull	r2, r3, r2, r3
 8004c56:	0a5b      	lsrs	r3, r3, #9
 8004c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c5c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8004c60:	4623      	mov	r3, r4
 8004c62:	1e5c      	subs	r4, r3, #1
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d102      	bne.n	8004c6e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004c68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c6c:	e00a      	b.n	8004c84 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d0f2      	beq.n	8004c60 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004c80:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3708      	adds	r7, #8
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bc90      	pop	{r4, r7}
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	20000000 	.word	0x20000000
 8004c94:	10624dd3 	.word	0x10624dd3

08004c98 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004c98:	b590      	push	{r4, r7, lr}
 8004c9a:	b087      	sub	sp, #28
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	607a      	str	r2, [r7, #4]
 8004ca4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8004ca6:	4b6c      	ldr	r3, [pc, #432]	; (8004e58 <SDMMC_GetCmdResp1+0x1c0>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a6c      	ldr	r2, [pc, #432]	; (8004e5c <SDMMC_GetCmdResp1+0x1c4>)
 8004cac:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb0:	0a5b      	lsrs	r3, r3, #9
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8004cb8:	4623      	mov	r3, r4
 8004cba:	1e5c      	subs	r4, r3, #1
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d102      	bne.n	8004cc6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004cc0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004cc4:	e0c3      	b.n	8004e4e <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cca:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d0f2      	beq.n	8004cb8 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd6:	f003 0304 	and.w	r3, r3, #4
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d004      	beq.n	8004ce8 <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2204      	movs	r2, #4
 8004ce2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004ce4:	2304      	movs	r3, #4
 8004ce6:	e0b2      	b.n	8004e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d004      	beq.n	8004cfe <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e0a7      	b.n	8004e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f7ff fd42 	bl	8004788 <SDMMC_GetCommandResponse>
 8004d04:	4603      	mov	r3, r0
 8004d06:	461a      	mov	r2, r3
 8004d08:	7afb      	ldrb	r3, [r7, #11]
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d001      	beq.n	8004d12 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e09d      	b.n	8004e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004d18:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f7ff fd40 	bl	80047a2 <SDMMC_GetResponse>
 8004d22:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	4b4e      	ldr	r3, [pc, #312]	; (8004e60 <SDMMC_GetCmdResp1+0x1c8>)
 8004d28:	4013      	ands	r3, r2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	e08d      	b.n	8004e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	da02      	bge.n	8004d3e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004d38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d3c:	e087      	b.n	8004e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004d48:	2340      	movs	r3, #64	; 0x40
 8004d4a:	e080      	b.n	8004e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004d56:	2380      	movs	r3, #128	; 0x80
 8004d58:	e079      	b.n	8004e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d002      	beq.n	8004d6a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004d64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d68:	e071      	b.n	8004e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d002      	beq.n	8004d7a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004d74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d78:	e069      	b.n	8004e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d002      	beq.n	8004d8a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004d84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d88:	e061      	b.n	8004e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d002      	beq.n	8004d9a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004d94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004d98:	e059      	b.n	8004e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d002      	beq.n	8004daa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004da8:	e051      	b.n	8004e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004db4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004db8:	e049      	b.n	8004e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d002      	beq.n	8004dca <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004dc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004dc8:	e041      	b.n	8004e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d002      	beq.n	8004dda <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8004dd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dd8:	e039      	b.n	8004e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d002      	beq.n	8004dea <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004de4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004de8:	e031      	b.n	8004e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d002      	beq.n	8004dfa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004df4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004df8:	e029      	b.n	8004e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d002      	beq.n	8004e0a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004e04:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004e08:	e021      	b.n	8004e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d002      	beq.n	8004e1a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004e14:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004e18:	e019      	b.n	8004e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d002      	beq.n	8004e2a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004e24:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004e28:	e011      	b.n	8004e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d002      	beq.n	8004e3a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004e34:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004e38:	e009      	b.n	8004e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f003 0308 	and.w	r3, r3, #8
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d002      	beq.n	8004e4a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004e44:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004e48:	e001      	b.n	8004e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004e4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	371c      	adds	r7, #28
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd90      	pop	{r4, r7, pc}
 8004e56:	bf00      	nop
 8004e58:	20000000 	.word	0x20000000
 8004e5c:	10624dd3 	.word	0x10624dd3
 8004e60:	fdffe008 	.word	0xfdffe008

08004e64 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8004e64:	b490      	push	{r4, r7}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8004e6c:	4b1b      	ldr	r3, [pc, #108]	; (8004edc <SDMMC_GetCmdResp2+0x78>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a1b      	ldr	r2, [pc, #108]	; (8004ee0 <SDMMC_GetCmdResp2+0x7c>)
 8004e72:	fba2 2303 	umull	r2, r3, r2, r3
 8004e76:	0a5b      	lsrs	r3, r3, #9
 8004e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e7c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8004e80:	4623      	mov	r3, r4
 8004e82:	1e5c      	subs	r4, r3, #1
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d102      	bne.n	8004e8e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004e88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e8c:	e020      	b.n	8004ed0 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e92:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d0f2      	beq.n	8004e80 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e9e:	f003 0304 	and.w	r3, r3, #4
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d004      	beq.n	8004eb0 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2204      	movs	r2, #4
 8004eaa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004eac:	2304      	movs	r3, #4
 8004eae:	e00f      	b.n	8004ed0 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d004      	beq.n	8004ec6 <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e004      	b.n	8004ed0 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004ecc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3708      	adds	r7, #8
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bc90      	pop	{r4, r7}
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	20000000 	.word	0x20000000
 8004ee0:	10624dd3 	.word	0x10624dd3

08004ee4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8004ee4:	b490      	push	{r4, r7}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8004eec:	4b15      	ldr	r3, [pc, #84]	; (8004f44 <SDMMC_GetCmdResp3+0x60>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a15      	ldr	r2, [pc, #84]	; (8004f48 <SDMMC_GetCmdResp3+0x64>)
 8004ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef6:	0a5b      	lsrs	r3, r3, #9
 8004ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004efc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8004f00:	4623      	mov	r3, r4
 8004f02:	1e5c      	subs	r4, r3, #1
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d102      	bne.n	8004f0e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004f08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004f0c:	e015      	b.n	8004f3a <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f12:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0f2      	beq.n	8004f00 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f1e:	f003 0304 	and.w	r3, r3, #4
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d004      	beq.n	8004f30 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2204      	movs	r2, #4
 8004f2a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004f2c:	2304      	movs	r3, #4
 8004f2e:	e004      	b.n	8004f3a <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004f36:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bc90      	pop	{r4, r7}
 8004f42:	4770      	bx	lr
 8004f44:	20000000 	.word	0x20000000
 8004f48:	10624dd3 	.word	0x10624dd3

08004f4c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004f4c:	b590      	push	{r4, r7, lr}
 8004f4e:	b087      	sub	sp, #28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	460b      	mov	r3, r1
 8004f56:	607a      	str	r2, [r7, #4]
 8004f58:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8004f5a:	4b31      	ldr	r3, [pc, #196]	; (8005020 <SDMMC_GetCmdResp6+0xd4>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a31      	ldr	r2, [pc, #196]	; (8005024 <SDMMC_GetCmdResp6+0xd8>)
 8004f60:	fba2 2303 	umull	r2, r3, r2, r3
 8004f64:	0a5b      	lsrs	r3, r3, #9
 8004f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f6a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8004f6e:	4623      	mov	r3, r4
 8004f70:	1e5c      	subs	r4, r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d102      	bne.n	8004f7c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004f76:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004f7a:	e04c      	b.n	8005016 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f80:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d0f2      	beq.n	8004f6e <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f8c:	f003 0304 	and.w	r3, r3, #4
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d004      	beq.n	8004f9e <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2204      	movs	r2, #4
 8004f98:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004f9a:	2304      	movs	r3, #4
 8004f9c:	e03b      	b.n	8005016 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d004      	beq.n	8004fb4 <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2201      	movs	r2, #1
 8004fae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e030      	b.n	8005016 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f7ff fbe7 	bl	8004788 <SDMMC_GetCommandResponse>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	7afb      	ldrb	r3, [r7, #11]
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d001      	beq.n	8004fc8 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e026      	b.n	8005016 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004fce:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f7ff fbe5 	bl	80047a2 <SDMMC_GetResponse>
 8004fd8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d106      	bne.n	8004ff2 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	0c1b      	lsrs	r3, r3, #16
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	e011      	b.n	8005016 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d002      	beq.n	8005002 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004ffc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005000:	e009      	b.n	8005016 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d002      	beq.n	8005012 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800500c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005010:	e001      	b.n	8005016 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005012:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005016:	4618      	mov	r0, r3
 8005018:	371c      	adds	r7, #28
 800501a:	46bd      	mov	sp, r7
 800501c:	bd90      	pop	{r4, r7, pc}
 800501e:	bf00      	nop
 8005020:	20000000 	.word	0x20000000
 8005024:	10624dd3 	.word	0x10624dd3

08005028 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8005028:	b490      	push	{r4, r7}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005030:	4b18      	ldr	r3, [pc, #96]	; (8005094 <SDMMC_GetCmdResp7+0x6c>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a18      	ldr	r2, [pc, #96]	; (8005098 <SDMMC_GetCmdResp7+0x70>)
 8005036:	fba2 2303 	umull	r2, r3, r2, r3
 800503a:	0a5b      	lsrs	r3, r3, #9
 800503c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005040:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8005044:	4623      	mov	r3, r4
 8005046:	1e5c      	subs	r4, r3, #1
 8005048:	2b00      	cmp	r3, #0
 800504a:	d102      	bne.n	8005052 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800504c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005050:	e01a      	b.n	8005088 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005056:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800505a:	2b00      	cmp	r3, #0
 800505c:	d0f2      	beq.n	8005044 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005062:	f003 0304 	and.w	r3, r3, #4
 8005066:	2b00      	cmp	r3, #0
 8005068:	d004      	beq.n	8005074 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2240      	movs	r2, #64	; 0x40
 800506e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005070:	2304      	movs	r3, #4
 8005072:	e009      	b.n	8005088 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507c:	2b00      	cmp	r3, #0
 800507e:	d002      	beq.n	8005086 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2240      	movs	r2, #64	; 0x40
 8005084:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005086:	2300      	movs	r3, #0
  
}
 8005088:	4618      	mov	r0, r3
 800508a:	3708      	adds	r7, #8
 800508c:	46bd      	mov	sp, r7
 800508e:	bc90      	pop	{r4, r7}
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	20000000 	.word	0x20000000
 8005098:	10624dd3 	.word	0x10624dd3

0800509c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80050a0:	4904      	ldr	r1, [pc, #16]	; (80050b4 <MX_FATFS_Init+0x18>)
 80050a2:	4805      	ldr	r0, [pc, #20]	; (80050b8 <MX_FATFS_Init+0x1c>)
 80050a4:	f004 fbc4 	bl	8009830 <FATFS_LinkDriver>
 80050a8:	4603      	mov	r3, r0
 80050aa:	461a      	mov	r2, r3
 80050ac:	4b03      	ldr	r3, [pc, #12]	; (80050bc <MX_FATFS_Init+0x20>)
 80050ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80050b0:	bf00      	nop
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	20000250 	.word	0x20000250
 80050b8:	0800a310 	.word	0x0800a310
 80050bc:	20002310 	.word	0x20002310

080050c0 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80050c0:	b480      	push	{r7}
 80050c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80050c4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80050d6:	2300      	movs	r3, #0
 80050d8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80050da:	f000 f86b 	bl	80051b4 <BSP_SD_IsDetected>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d001      	beq.n	80050e8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80050e4:	2302      	movs	r3, #2
 80050e6:	e005      	b.n	80050f4 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80050e8:	4804      	ldr	r0, [pc, #16]	; (80050fc <BSP_SD_Init+0x2c>)
 80050ea:	f7fe f8d7 	bl	800329c <HAL_SD_Init>
 80050ee:	4603      	mov	r3, r0
 80050f0:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80050f2:	79fb      	ldrb	r3, [r7, #7]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3708      	adds	r7, #8
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	200001b8 	.word	0x200001b8

08005100 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b088      	sub	sp, #32
 8005104:	af02      	add	r7, sp, #8
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
 800510c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800510e:	2300      	movs	r3, #0
 8005110:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	68f9      	ldr	r1, [r7, #12]
 800511c:	4806      	ldr	r0, [pc, #24]	; (8005138 <BSP_SD_ReadBlocks+0x38>)
 800511e:	f7fe f94c 	bl	80033ba <HAL_SD_ReadBlocks>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d001      	beq.n	800512c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800512c:	7dfb      	ldrb	r3, [r7, #23]
}
 800512e:	4618      	mov	r0, r3
 8005130:	3718      	adds	r7, #24
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	200001b8 	.word	0x200001b8

0800513c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b088      	sub	sp, #32
 8005140:	af02      	add	r7, sp, #8
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
 8005148:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800514a:	2300      	movs	r3, #0
 800514c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	68f9      	ldr	r1, [r7, #12]
 8005158:	4806      	ldr	r0, [pc, #24]	; (8005174 <BSP_SD_WriteBlocks+0x38>)
 800515a:	f7fe fac4 	bl	80036e6 <HAL_SD_WriteBlocks>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d001      	beq.n	8005168 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8005168:	7dfb      	ldrb	r3, [r7, #23]
}
 800516a:	4618      	mov	r0, r3
 800516c:	3718      	adds	r7, #24
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	200001b8 	.word	0x200001b8

08005178 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800517c:	4805      	ldr	r0, [pc, #20]	; (8005194 <BSP_SD_GetCardState+0x1c>)
 800517e:	f7fe ffe9 	bl	8004154 <HAL_SD_GetCardState>
 8005182:	4603      	mov	r3, r0
 8005184:	2b04      	cmp	r3, #4
 8005186:	bf14      	ite	ne
 8005188:	2301      	movne	r3, #1
 800518a:	2300      	moveq	r3, #0
 800518c:	b2db      	uxtb	r3, r3
}
 800518e:	4618      	mov	r0, r3
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	200001b8 	.word	0x200001b8

08005198 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80051a0:	6879      	ldr	r1, [r7, #4]
 80051a2:	4803      	ldr	r0, [pc, #12]	; (80051b0 <BSP_SD_GetCardInfo+0x18>)
 80051a4:	f7fe ffaa 	bl	80040fc <HAL_SD_GetCardInfo>
}
 80051a8:	bf00      	nop
 80051aa:	3708      	adds	r7, #8
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	200001b8 	.word	0x200001b8

080051b4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80051ba:	2301      	movs	r3, #1
 80051bc:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 80051be:	f000 f80b 	bl	80051d8 <BSP_PlatformIsDetected>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d101      	bne.n	80051cc <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80051c8:	2300      	movs	r3, #0
 80051ca:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80051cc:	79fb      	ldrb	r3, [r7, #7]
 80051ce:	b2db      	uxtb	r3, r3
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3708      	adds	r7, #8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80051de:	2301      	movs	r3, #1
 80051e0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80051e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80051e6:	4807      	ldr	r0, [pc, #28]	; (8005204 <BSP_PlatformIsDetected+0x2c>)
 80051e8:	f7fc faaa 	bl	8001740 <HAL_GPIO_ReadPin>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d001      	beq.n	80051f6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80051f2:	2300      	movs	r3, #0
 80051f4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    status = SD_PRESENT; // HACK: Assume SD always present.
 80051f6:	2301      	movs	r3, #1
 80051f8:	71fb      	strb	r3, [r7, #7]
    /* USER CODE END 1 */ 
    return status;
 80051fa:	79fb      	ldrb	r3, [r7, #7]
}  
 80051fc:	4618      	mov	r0, r3
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	40022000 	.word	0x40022000

08005208 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	4603      	mov	r3, r0
 8005210:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005212:	4b0b      	ldr	r3, [pc, #44]	; (8005240 <SD_CheckStatus+0x38>)
 8005214:	2201      	movs	r2, #1
 8005216:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005218:	f7ff ffae 	bl	8005178 <BSP_SD_GetCardState>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d107      	bne.n	8005232 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005222:	4b07      	ldr	r3, [pc, #28]	; (8005240 <SD_CheckStatus+0x38>)
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	b2db      	uxtb	r3, r3
 8005228:	f023 0301 	bic.w	r3, r3, #1
 800522c:	b2da      	uxtb	r2, r3
 800522e:	4b04      	ldr	r3, [pc, #16]	; (8005240 <SD_CheckStatus+0x38>)
 8005230:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005232:	4b03      	ldr	r3, [pc, #12]	; (8005240 <SD_CheckStatus+0x38>)
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	b2db      	uxtb	r3, r3
}
 8005238:	4618      	mov	r0, r3
 800523a:	3708      	adds	r7, #8
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	20000009 	.word	0x20000009

08005244 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	4603      	mov	r3, r0
 800524c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800524e:	4b0b      	ldr	r3, [pc, #44]	; (800527c <SD_initialize+0x38>)
 8005250:	2201      	movs	r2, #1
 8005252:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005254:	f7ff ff3c 	bl	80050d0 <BSP_SD_Init>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d107      	bne.n	800526e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800525e:	79fb      	ldrb	r3, [r7, #7]
 8005260:	4618      	mov	r0, r3
 8005262:	f7ff ffd1 	bl	8005208 <SD_CheckStatus>
 8005266:	4603      	mov	r3, r0
 8005268:	461a      	mov	r2, r3
 800526a:	4b04      	ldr	r3, [pc, #16]	; (800527c <SD_initialize+0x38>)
 800526c:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800526e:	4b03      	ldr	r3, [pc, #12]	; (800527c <SD_initialize+0x38>)
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	b2db      	uxtb	r3, r3
}
 8005274:	4618      	mov	r0, r3
 8005276:	3708      	adds	r7, #8
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	20000009 	.word	0x20000009

08005280 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	4603      	mov	r3, r0
 8005288:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800528a:	79fb      	ldrb	r3, [r7, #7]
 800528c:	4618      	mov	r0, r3
 800528e:	f7ff ffbb 	bl	8005208 <SD_CheckStatus>
 8005292:	4603      	mov	r3, r0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3708      	adds	r7, #8
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60b9      	str	r1, [r7, #8]
 80052a4:	607a      	str	r2, [r7, #4]
 80052a6:	603b      	str	r3, [r7, #0]
 80052a8:	4603      	mov	r3, r0
 80052aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80052b0:	f04f 33ff 	mov.w	r3, #4294967295
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	6879      	ldr	r1, [r7, #4]
 80052b8:	68b8      	ldr	r0, [r7, #8]
 80052ba:	f7ff ff21 	bl	8005100 <BSP_SD_ReadBlocks>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d107      	bne.n	80052d4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80052c4:	bf00      	nop
 80052c6:	f7ff ff57 	bl	8005178 <BSP_SD_GetCardState>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1fa      	bne.n	80052c6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80052d0:	2300      	movs	r3, #0
 80052d2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80052d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3718      	adds	r7, #24
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80052de:	b580      	push	{r7, lr}
 80052e0:	b086      	sub	sp, #24
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
 80052e8:	603b      	str	r3, [r7, #0]
 80052ea:	4603      	mov	r3, r0
 80052ec:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80052f2:	f04f 33ff 	mov.w	r3, #4294967295
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	6879      	ldr	r1, [r7, #4]
 80052fa:	68b8      	ldr	r0, [r7, #8]
 80052fc:	f7ff ff1e 	bl	800513c <BSP_SD_WriteBlocks>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d107      	bne.n	8005316 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8005306:	bf00      	nop
 8005308:	f7ff ff36 	bl	8005178 <BSP_SD_GetCardState>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1fa      	bne.n	8005308 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8005312:	2300      	movs	r3, #0
 8005314:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005316:	7dfb      	ldrb	r3, [r7, #23]
}
 8005318:	4618      	mov	r0, r3
 800531a:	3718      	adds	r7, #24
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b08c      	sub	sp, #48	; 0x30
 8005324:	af00      	add	r7, sp, #0
 8005326:	4603      	mov	r3, r0
 8005328:	603a      	str	r2, [r7, #0]
 800532a:	71fb      	strb	r3, [r7, #7]
 800532c:	460b      	mov	r3, r1
 800532e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005336:	4b25      	ldr	r3, [pc, #148]	; (80053cc <SD_ioctl+0xac>)
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	b2db      	uxtb	r3, r3
 800533c:	f003 0301 	and.w	r3, r3, #1
 8005340:	2b00      	cmp	r3, #0
 8005342:	d001      	beq.n	8005348 <SD_ioctl+0x28>
 8005344:	2303      	movs	r3, #3
 8005346:	e03c      	b.n	80053c2 <SD_ioctl+0xa2>

  switch (cmd)
 8005348:	79bb      	ldrb	r3, [r7, #6]
 800534a:	2b03      	cmp	r3, #3
 800534c:	d834      	bhi.n	80053b8 <SD_ioctl+0x98>
 800534e:	a201      	add	r2, pc, #4	; (adr r2, 8005354 <SD_ioctl+0x34>)
 8005350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005354:	08005365 	.word	0x08005365
 8005358:	0800536d 	.word	0x0800536d
 800535c:	08005385 	.word	0x08005385
 8005360:	0800539f 	.word	0x0800539f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005364:	2300      	movs	r3, #0
 8005366:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800536a:	e028      	b.n	80053be <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800536c:	f107 030c 	add.w	r3, r7, #12
 8005370:	4618      	mov	r0, r3
 8005372:	f7ff ff11 	bl	8005198 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800537c:	2300      	movs	r3, #0
 800537e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005382:	e01c      	b.n	80053be <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005384:	f107 030c 	add.w	r3, r7, #12
 8005388:	4618      	mov	r0, r3
 800538a:	f7ff ff05 	bl	8005198 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800538e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005390:	b29a      	uxth	r2, r3
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005396:	2300      	movs	r3, #0
 8005398:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800539c:	e00f      	b.n	80053be <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800539e:	f107 030c 	add.w	r3, r7, #12
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7ff fef8 	bl	8005198 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80053a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053aa:	0a5a      	lsrs	r2, r3, #9
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80053b0:	2300      	movs	r3, #0
 80053b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80053b6:	e002      	b.n	80053be <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80053b8:	2304      	movs	r3, #4
 80053ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80053be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3730      	adds	r7, #48	; 0x30
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	20000009 	.word	0x20000009

080053d0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	4603      	mov	r3, r0
 80053d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80053da:	79fb      	ldrb	r3, [r7, #7]
 80053dc:	4a08      	ldr	r2, [pc, #32]	; (8005400 <disk_status+0x30>)
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4413      	add	r3, r2
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	79fa      	ldrb	r2, [r7, #7]
 80053e8:	4905      	ldr	r1, [pc, #20]	; (8005400 <disk_status+0x30>)
 80053ea:	440a      	add	r2, r1
 80053ec:	7a12      	ldrb	r2, [r2, #8]
 80053ee:	4610      	mov	r0, r2
 80053f0:	4798      	blx	r3
 80053f2:	4603      	mov	r3, r0
 80053f4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80053f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	2000016c 	.word	0x2000016c

08005404 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	4603      	mov	r3, r0
 800540c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800540e:	2300      	movs	r3, #0
 8005410:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005412:	79fb      	ldrb	r3, [r7, #7]
 8005414:	4a0d      	ldr	r2, [pc, #52]	; (800544c <disk_initialize+0x48>)
 8005416:	5cd3      	ldrb	r3, [r2, r3]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d111      	bne.n	8005440 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800541c:	79fb      	ldrb	r3, [r7, #7]
 800541e:	4a0b      	ldr	r2, [pc, #44]	; (800544c <disk_initialize+0x48>)
 8005420:	2101      	movs	r1, #1
 8005422:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005424:	79fb      	ldrb	r3, [r7, #7]
 8005426:	4a09      	ldr	r2, [pc, #36]	; (800544c <disk_initialize+0x48>)
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	79fa      	ldrb	r2, [r7, #7]
 8005432:	4906      	ldr	r1, [pc, #24]	; (800544c <disk_initialize+0x48>)
 8005434:	440a      	add	r2, r1
 8005436:	7a12      	ldrb	r2, [r2, #8]
 8005438:	4610      	mov	r0, r2
 800543a:	4798      	blx	r3
 800543c:	4603      	mov	r3, r0
 800543e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005440:	7bfb      	ldrb	r3, [r7, #15]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	2000016c 	.word	0x2000016c

08005450 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005450:	b590      	push	{r4, r7, lr}
 8005452:	b087      	sub	sp, #28
 8005454:	af00      	add	r7, sp, #0
 8005456:	60b9      	str	r1, [r7, #8]
 8005458:	607a      	str	r2, [r7, #4]
 800545a:	603b      	str	r3, [r7, #0]
 800545c:	4603      	mov	r3, r0
 800545e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005460:	7bfb      	ldrb	r3, [r7, #15]
 8005462:	4a0a      	ldr	r2, [pc, #40]	; (800548c <disk_read+0x3c>)
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4413      	add	r3, r2
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	689c      	ldr	r4, [r3, #8]
 800546c:	7bfb      	ldrb	r3, [r7, #15]
 800546e:	4a07      	ldr	r2, [pc, #28]	; (800548c <disk_read+0x3c>)
 8005470:	4413      	add	r3, r2
 8005472:	7a18      	ldrb	r0, [r3, #8]
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	68b9      	ldr	r1, [r7, #8]
 800547a:	47a0      	blx	r4
 800547c:	4603      	mov	r3, r0
 800547e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005480:	7dfb      	ldrb	r3, [r7, #23]
}
 8005482:	4618      	mov	r0, r3
 8005484:	371c      	adds	r7, #28
 8005486:	46bd      	mov	sp, r7
 8005488:	bd90      	pop	{r4, r7, pc}
 800548a:	bf00      	nop
 800548c:	2000016c 	.word	0x2000016c

08005490 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005490:	b590      	push	{r4, r7, lr}
 8005492:	b087      	sub	sp, #28
 8005494:	af00      	add	r7, sp, #0
 8005496:	60b9      	str	r1, [r7, #8]
 8005498:	607a      	str	r2, [r7, #4]
 800549a:	603b      	str	r3, [r7, #0]
 800549c:	4603      	mov	r3, r0
 800549e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80054a0:	7bfb      	ldrb	r3, [r7, #15]
 80054a2:	4a0a      	ldr	r2, [pc, #40]	; (80054cc <disk_write+0x3c>)
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	4413      	add	r3, r2
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	68dc      	ldr	r4, [r3, #12]
 80054ac:	7bfb      	ldrb	r3, [r7, #15]
 80054ae:	4a07      	ldr	r2, [pc, #28]	; (80054cc <disk_write+0x3c>)
 80054b0:	4413      	add	r3, r2
 80054b2:	7a18      	ldrb	r0, [r3, #8]
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	68b9      	ldr	r1, [r7, #8]
 80054ba:	47a0      	blx	r4
 80054bc:	4603      	mov	r3, r0
 80054be:	75fb      	strb	r3, [r7, #23]
  return res;
 80054c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	371c      	adds	r7, #28
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd90      	pop	{r4, r7, pc}
 80054ca:	bf00      	nop
 80054cc:	2000016c 	.word	0x2000016c

080054d0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	4603      	mov	r3, r0
 80054d8:	603a      	str	r2, [r7, #0]
 80054da:	71fb      	strb	r3, [r7, #7]
 80054dc:	460b      	mov	r3, r1
 80054de:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80054e0:	79fb      	ldrb	r3, [r7, #7]
 80054e2:	4a09      	ldr	r2, [pc, #36]	; (8005508 <disk_ioctl+0x38>)
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4413      	add	r3, r2
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	79fa      	ldrb	r2, [r7, #7]
 80054ee:	4906      	ldr	r1, [pc, #24]	; (8005508 <disk_ioctl+0x38>)
 80054f0:	440a      	add	r2, r1
 80054f2:	7a10      	ldrb	r0, [r2, #8]
 80054f4:	79b9      	ldrb	r1, [r7, #6]
 80054f6:	683a      	ldr	r2, [r7, #0]
 80054f8:	4798      	blx	r3
 80054fa:	4603      	mov	r3, r0
 80054fc:	73fb      	strb	r3, [r7, #15]
  return res;
 80054fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005500:	4618      	mov	r0, r3
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	2000016c 	.word	0x2000016c

0800550c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	3301      	adds	r3, #1
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800551c:	89fb      	ldrh	r3, [r7, #14]
 800551e:	021b      	lsls	r3, r3, #8
 8005520:	b21a      	sxth	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	b21b      	sxth	r3, r3
 8005528:	4313      	orrs	r3, r2
 800552a:	b21b      	sxth	r3, r3
 800552c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800552e:	89fb      	ldrh	r3, [r7, #14]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	3303      	adds	r3, #3
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	021b      	lsls	r3, r3, #8
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	3202      	adds	r2, #2
 8005554:	7812      	ldrb	r2, [r2, #0]
 8005556:	4313      	orrs	r3, r2
 8005558:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	021b      	lsls	r3, r3, #8
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	3201      	adds	r2, #1
 8005562:	7812      	ldrb	r2, [r2, #0]
 8005564:	4313      	orrs	r3, r2
 8005566:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	021b      	lsls	r3, r3, #8
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	7812      	ldrb	r2, [r2, #0]
 8005570:	4313      	orrs	r3, r2
 8005572:	60fb      	str	r3, [r7, #12]
	return rv;
 8005574:	68fb      	ldr	r3, [r7, #12]
}
 8005576:	4618      	mov	r0, r3
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8005582:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
	QWORD rv;

	rv = ptr[7];
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	3307      	adds	r3, #7
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	b2db      	uxtb	r3, r3
 8005594:	f04f 0400 	mov.w	r4, #0
 8005598:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[6];
 800559c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80055a0:	f04f 0b00 	mov.w	fp, #0
 80055a4:	f04f 0c00 	mov.w	ip, #0
 80055a8:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 80055ac:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 80055b0:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	3206      	adds	r2, #6
 80055b8:	7812      	ldrb	r2, [r2, #0]
 80055ba:	b2d1      	uxtb	r1, r2
 80055bc:	f04f 0200 	mov.w	r2, #0
 80055c0:	ea4b 0301 	orr.w	r3, fp, r1
 80055c4:	ea4c 0402 	orr.w	r4, ip, r2
 80055c8:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[5];
 80055cc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80055d0:	f04f 0b00 	mov.w	fp, #0
 80055d4:	f04f 0c00 	mov.w	ip, #0
 80055d8:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 80055dc:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 80055e0:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	3205      	adds	r2, #5
 80055e8:	7812      	ldrb	r2, [r2, #0]
 80055ea:	b2d1      	uxtb	r1, r2
 80055ec:	f04f 0200 	mov.w	r2, #0
 80055f0:	ea4b 0301 	orr.w	r3, fp, r1
 80055f4:	ea4c 0402 	orr.w	r4, ip, r2
 80055f8:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[4];
 80055fc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005600:	f04f 0b00 	mov.w	fp, #0
 8005604:	f04f 0c00 	mov.w	ip, #0
 8005608:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800560c:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8005610:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	3204      	adds	r2, #4
 8005618:	7812      	ldrb	r2, [r2, #0]
 800561a:	b2d1      	uxtb	r1, r2
 800561c:	f04f 0200 	mov.w	r2, #0
 8005620:	ea4b 0301 	orr.w	r3, fp, r1
 8005624:	ea4c 0402 	orr.w	r4, ip, r2
 8005628:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[3];
 800562c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005630:	f04f 0b00 	mov.w	fp, #0
 8005634:	f04f 0c00 	mov.w	ip, #0
 8005638:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800563c:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8005640:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	3203      	adds	r2, #3
 8005648:	7812      	ldrb	r2, [r2, #0]
 800564a:	b2d1      	uxtb	r1, r2
 800564c:	f04f 0200 	mov.w	r2, #0
 8005650:	ea4b 0301 	orr.w	r3, fp, r1
 8005654:	ea4c 0402 	orr.w	r4, ip, r2
 8005658:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[2];
 800565c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005660:	f04f 0b00 	mov.w	fp, #0
 8005664:	f04f 0c00 	mov.w	ip, #0
 8005668:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800566c:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8005670:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	3202      	adds	r2, #2
 8005678:	7812      	ldrb	r2, [r2, #0]
 800567a:	b2d1      	uxtb	r1, r2
 800567c:	f04f 0200 	mov.w	r2, #0
 8005680:	ea4b 0301 	orr.w	r3, fp, r1
 8005684:	ea4c 0402 	orr.w	r4, ip, r2
 8005688:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[1];
 800568c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005690:	f04f 0b00 	mov.w	fp, #0
 8005694:	f04f 0c00 	mov.w	ip, #0
 8005698:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800569c:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 80056a0:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	3201      	adds	r2, #1
 80056a8:	7812      	ldrb	r2, [r2, #0]
 80056aa:	b2d1      	uxtb	r1, r2
 80056ac:	f04f 0200 	mov.w	r2, #0
 80056b0:	ea4b 0301 	orr.w	r3, fp, r1
 80056b4:	ea4c 0402 	orr.w	r4, ip, r2
 80056b8:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[0];
 80056bc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80056c0:	f04f 0b00 	mov.w	fp, #0
 80056c4:	f04f 0c00 	mov.w	ip, #0
 80056c8:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 80056cc:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 80056d0:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	7812      	ldrb	r2, [r2, #0]
 80056d8:	b2d1      	uxtb	r1, r2
 80056da:	f04f 0200 	mov.w	r2, #0
 80056de:	ea4b 0301 	orr.w	r3, fp, r1
 80056e2:	ea4c 0402 	orr.w	r4, ip, r2
 80056e6:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return rv;
 80056ea:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	4621      	mov	r1, r4
 80056f2:	3714      	adds	r7, #20
 80056f4:	46bd      	mov	sp, r7
 80056f6:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 80056fa:	4770      	bx	lr

080056fc <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	460b      	mov	r3, r1
 8005706:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	1c5a      	adds	r2, r3, #1
 800570c:	607a      	str	r2, [r7, #4]
 800570e:	887a      	ldrh	r2, [r7, #2]
 8005710:	b2d2      	uxtb	r2, r2
 8005712:	701a      	strb	r2, [r3, #0]
 8005714:	887b      	ldrh	r3, [r7, #2]
 8005716:	0a1b      	lsrs	r3, r3, #8
 8005718:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	1c5a      	adds	r2, r3, #1
 800571e:	607a      	str	r2, [r7, #4]
 8005720:	887a      	ldrh	r2, [r7, #2]
 8005722:	b2d2      	uxtb	r2, r2
 8005724:	701a      	strb	r2, [r3, #0]
}
 8005726:	bf00      	nop
 8005728:	370c      	adds	r7, #12
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005732:	b480      	push	{r7}
 8005734:	b083      	sub	sp, #12
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
 800573a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	1c5a      	adds	r2, r3, #1
 8005740:	607a      	str	r2, [r7, #4]
 8005742:	683a      	ldr	r2, [r7, #0]
 8005744:	b2d2      	uxtb	r2, r2
 8005746:	701a      	strb	r2, [r3, #0]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	0a1b      	lsrs	r3, r3, #8
 800574c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	1c5a      	adds	r2, r3, #1
 8005752:	607a      	str	r2, [r7, #4]
 8005754:	683a      	ldr	r2, [r7, #0]
 8005756:	b2d2      	uxtb	r2, r2
 8005758:	701a      	strb	r2, [r3, #0]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	0a1b      	lsrs	r3, r3, #8
 800575e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	1c5a      	adds	r2, r3, #1
 8005764:	607a      	str	r2, [r7, #4]
 8005766:	683a      	ldr	r2, [r7, #0]
 8005768:	b2d2      	uxtb	r2, r2
 800576a:	701a      	strb	r2, [r3, #0]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	0a1b      	lsrs	r3, r3, #8
 8005770:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	1c5a      	adds	r2, r3, #1
 8005776:	607a      	str	r2, [r7, #4]
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	b2d2      	uxtb	r2, r2
 800577c:	701a      	strb	r2, [r3, #0]
}
 800577e:	bf00      	nop
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800578a:	b490      	push	{r4, r7}
 800578c:	b084      	sub	sp, #16
 800578e:	af00      	add	r7, sp, #0
 8005790:	60f8      	str	r0, [r7, #12]
 8005792:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	1c5a      	adds	r2, r3, #1
 800579a:	60fa      	str	r2, [r7, #12]
 800579c:	783a      	ldrb	r2, [r7, #0]
 800579e:	701a      	strb	r2, [r3, #0]
 80057a0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80057a4:	f04f 0300 	mov.w	r3, #0
 80057a8:	f04f 0400 	mov.w	r4, #0
 80057ac:	0a0b      	lsrs	r3, r1, #8
 80057ae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80057b2:	0a14      	lsrs	r4, r2, #8
 80057b4:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	1c5a      	adds	r2, r3, #1
 80057bc:	60fa      	str	r2, [r7, #12]
 80057be:	783a      	ldrb	r2, [r7, #0]
 80057c0:	701a      	strb	r2, [r3, #0]
 80057c2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80057c6:	f04f 0300 	mov.w	r3, #0
 80057ca:	f04f 0400 	mov.w	r4, #0
 80057ce:	0a0b      	lsrs	r3, r1, #8
 80057d0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80057d4:	0a14      	lsrs	r4, r2, #8
 80057d6:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	1c5a      	adds	r2, r3, #1
 80057de:	60fa      	str	r2, [r7, #12]
 80057e0:	783a      	ldrb	r2, [r7, #0]
 80057e2:	701a      	strb	r2, [r3, #0]
 80057e4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80057e8:	f04f 0300 	mov.w	r3, #0
 80057ec:	f04f 0400 	mov.w	r4, #0
 80057f0:	0a0b      	lsrs	r3, r1, #8
 80057f2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80057f6:	0a14      	lsrs	r4, r2, #8
 80057f8:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	1c5a      	adds	r2, r3, #1
 8005800:	60fa      	str	r2, [r7, #12]
 8005802:	783a      	ldrb	r2, [r7, #0]
 8005804:	701a      	strb	r2, [r3, #0]
 8005806:	e9d7 1200 	ldrd	r1, r2, [r7]
 800580a:	f04f 0300 	mov.w	r3, #0
 800580e:	f04f 0400 	mov.w	r4, #0
 8005812:	0a0b      	lsrs	r3, r1, #8
 8005814:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005818:	0a14      	lsrs	r4, r2, #8
 800581a:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	1c5a      	adds	r2, r3, #1
 8005822:	60fa      	str	r2, [r7, #12]
 8005824:	783a      	ldrb	r2, [r7, #0]
 8005826:	701a      	strb	r2, [r3, #0]
 8005828:	e9d7 1200 	ldrd	r1, r2, [r7]
 800582c:	f04f 0300 	mov.w	r3, #0
 8005830:	f04f 0400 	mov.w	r4, #0
 8005834:	0a0b      	lsrs	r3, r1, #8
 8005836:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800583a:	0a14      	lsrs	r4, r2, #8
 800583c:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	1c5a      	adds	r2, r3, #1
 8005844:	60fa      	str	r2, [r7, #12]
 8005846:	783a      	ldrb	r2, [r7, #0]
 8005848:	701a      	strb	r2, [r3, #0]
 800584a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800584e:	f04f 0300 	mov.w	r3, #0
 8005852:	f04f 0400 	mov.w	r4, #0
 8005856:	0a0b      	lsrs	r3, r1, #8
 8005858:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800585c:	0a14      	lsrs	r4, r2, #8
 800585e:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	1c5a      	adds	r2, r3, #1
 8005866:	60fa      	str	r2, [r7, #12]
 8005868:	783a      	ldrb	r2, [r7, #0]
 800586a:	701a      	strb	r2, [r3, #0]
 800586c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005870:	f04f 0300 	mov.w	r3, #0
 8005874:	f04f 0400 	mov.w	r4, #0
 8005878:	0a0b      	lsrs	r3, r1, #8
 800587a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800587e:	0a14      	lsrs	r4, r2, #8
 8005880:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	1c5a      	adds	r2, r3, #1
 8005888:	60fa      	str	r2, [r7, #12]
 800588a:	783a      	ldrb	r2, [r7, #0]
 800588c:	701a      	strb	r2, [r3, #0]
}
 800588e:	bf00      	nop
 8005890:	3710      	adds	r7, #16
 8005892:	46bd      	mov	sp, r7
 8005894:	bc90      	pop	{r4, r7}
 8005896:	4770      	bx	lr

08005898 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005898:	b480      	push	{r7}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00d      	beq.n	80058ce <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80058b2:	693a      	ldr	r2, [r7, #16]
 80058b4:	1c53      	adds	r3, r2, #1
 80058b6:	613b      	str	r3, [r7, #16]
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	1c59      	adds	r1, r3, #1
 80058bc:	6179      	str	r1, [r7, #20]
 80058be:	7812      	ldrb	r2, [r2, #0]
 80058c0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	3b01      	subs	r3, #1
 80058c6:	607b      	str	r3, [r7, #4]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1f1      	bne.n	80058b2 <mem_cpy+0x1a>
	}
}
 80058ce:	bf00      	nop
 80058d0:	371c      	adds	r7, #28
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr

080058da <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80058da:	b480      	push	{r7}
 80058dc:	b087      	sub	sp, #28
 80058de:	af00      	add	r7, sp, #0
 80058e0:	60f8      	str	r0, [r7, #12]
 80058e2:	60b9      	str	r1, [r7, #8]
 80058e4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	1c5a      	adds	r2, r3, #1
 80058ee:	617a      	str	r2, [r7, #20]
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	b2d2      	uxtb	r2, r2
 80058f4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	3b01      	subs	r3, #1
 80058fa:	607b      	str	r3, [r7, #4]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1f3      	bne.n	80058ea <mem_set+0x10>
}
 8005902:	bf00      	nop
 8005904:	371c      	adds	r7, #28
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800590e:	b480      	push	{r7}
 8005910:	b089      	sub	sp, #36	; 0x24
 8005912:	af00      	add	r7, sp, #0
 8005914:	60f8      	str	r0, [r7, #12]
 8005916:	60b9      	str	r1, [r7, #8]
 8005918:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	61fb      	str	r3, [r7, #28]
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005922:	2300      	movs	r3, #0
 8005924:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	1c5a      	adds	r2, r3, #1
 800592a:	61fa      	str	r2, [r7, #28]
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	4619      	mov	r1, r3
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	1c5a      	adds	r2, r3, #1
 8005934:	61ba      	str	r2, [r7, #24]
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	1acb      	subs	r3, r1, r3
 800593a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	3b01      	subs	r3, #1
 8005940:	607b      	str	r3, [r7, #4]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d002      	beq.n	800594e <mem_cmp+0x40>
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d0eb      	beq.n	8005926 <mem_cmp+0x18>

	return r;
 800594e:	697b      	ldr	r3, [r7, #20]
}
 8005950:	4618      	mov	r0, r3
 8005952:	3724      	adds	r7, #36	; 0x24
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005966:	e002      	b.n	800596e <chk_chr+0x12>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	3301      	adds	r3, #1
 800596c:	607b      	str	r3, [r7, #4]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d005      	beq.n	8005982 <chk_chr+0x26>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	461a      	mov	r2, r3
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	4293      	cmp	r3, r2
 8005980:	d1f2      	bne.n	8005968 <chk_chr+0xc>
	return *str;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	781b      	ldrb	r3, [r3, #0]
}
 8005986:	4618      	mov	r0, r3
 8005988:	370c      	adds	r7, #12
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
	...

08005994 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800599e:	2300      	movs	r3, #0
 80059a0:	60bb      	str	r3, [r7, #8]
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	60fb      	str	r3, [r7, #12]
 80059a6:	e029      	b.n	80059fc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80059a8:	4a27      	ldr	r2, [pc, #156]	; (8005a48 <chk_lock+0xb4>)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	011b      	lsls	r3, r3, #4
 80059ae:	4413      	add	r3, r2
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d01d      	beq.n	80059f2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80059b6:	4a24      	ldr	r2, [pc, #144]	; (8005a48 <chk_lock+0xb4>)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	011b      	lsls	r3, r3, #4
 80059bc:	4413      	add	r3, r2
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d116      	bne.n	80059f6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80059c8:	4a1f      	ldr	r2, [pc, #124]	; (8005a48 <chk_lock+0xb4>)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	011b      	lsls	r3, r3, #4
 80059ce:	4413      	add	r3, r2
 80059d0:	3304      	adds	r3, #4
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80059d8:	429a      	cmp	r2, r3
 80059da:	d10c      	bne.n	80059f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80059dc:	4a1a      	ldr	r2, [pc, #104]	; (8005a48 <chk_lock+0xb4>)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	011b      	lsls	r3, r3, #4
 80059e2:	4413      	add	r3, r2
 80059e4:	3308      	adds	r3, #8
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d102      	bne.n	80059f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80059f0:	e007      	b.n	8005a02 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80059f2:	2301      	movs	r3, #1
 80059f4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	3301      	adds	r3, #1
 80059fa:	60fb      	str	r3, [r7, #12]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d9d2      	bls.n	80059a8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d109      	bne.n	8005a1c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d102      	bne.n	8005a14 <chk_lock+0x80>
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d101      	bne.n	8005a18 <chk_lock+0x84>
 8005a14:	2300      	movs	r3, #0
 8005a16:	e010      	b.n	8005a3a <chk_lock+0xa6>
 8005a18:	2312      	movs	r3, #18
 8005a1a:	e00e      	b.n	8005a3a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d108      	bne.n	8005a34 <chk_lock+0xa0>
 8005a22:	4a09      	ldr	r2, [pc, #36]	; (8005a48 <chk_lock+0xb4>)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	011b      	lsls	r3, r3, #4
 8005a28:	4413      	add	r3, r2
 8005a2a:	330c      	adds	r3, #12
 8005a2c:	881b      	ldrh	r3, [r3, #0]
 8005a2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a32:	d101      	bne.n	8005a38 <chk_lock+0xa4>
 8005a34:	2310      	movs	r3, #16
 8005a36:	e000      	b.n	8005a3a <chk_lock+0xa6>
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3714      	adds	r7, #20
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	200000cc 	.word	0x200000cc

08005a4c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005a52:	2300      	movs	r3, #0
 8005a54:	607b      	str	r3, [r7, #4]
 8005a56:	e002      	b.n	8005a5e <enq_lock+0x12>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	607b      	str	r3, [r7, #4]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d806      	bhi.n	8005a72 <enq_lock+0x26>
 8005a64:	4a09      	ldr	r2, [pc, #36]	; (8005a8c <enq_lock+0x40>)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	011b      	lsls	r3, r3, #4
 8005a6a:	4413      	add	r3, r2
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1f2      	bne.n	8005a58 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	bf14      	ite	ne
 8005a78:	2301      	movne	r3, #1
 8005a7a:	2300      	moveq	r3, #0
 8005a7c:	b2db      	uxtb	r3, r3
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	370c      	adds	r7, #12
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	200000cc 	.word	0x200000cc

08005a90 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	60fb      	str	r3, [r7, #12]
 8005a9e:	e01f      	b.n	8005ae0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005aa0:	4a41      	ldr	r2, [pc, #260]	; (8005ba8 <inc_lock+0x118>)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	011b      	lsls	r3, r3, #4
 8005aa6:	4413      	add	r3, r2
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d113      	bne.n	8005ada <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005ab2:	4a3d      	ldr	r2, [pc, #244]	; (8005ba8 <inc_lock+0x118>)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	011b      	lsls	r3, r3, #4
 8005ab8:	4413      	add	r3, r2
 8005aba:	3304      	adds	r3, #4
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d109      	bne.n	8005ada <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005ac6:	4a38      	ldr	r2, [pc, #224]	; (8005ba8 <inc_lock+0x118>)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	011b      	lsls	r3, r3, #4
 8005acc:	4413      	add	r3, r2
 8005ace:	3308      	adds	r3, #8
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d006      	beq.n	8005ae8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	3301      	adds	r3, #1
 8005ade:	60fb      	str	r3, [r7, #12]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d9dc      	bls.n	8005aa0 <inc_lock+0x10>
 8005ae6:	e000      	b.n	8005aea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005ae8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d132      	bne.n	8005b56 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005af0:	2300      	movs	r3, #0
 8005af2:	60fb      	str	r3, [r7, #12]
 8005af4:	e002      	b.n	8005afc <inc_lock+0x6c>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	3301      	adds	r3, #1
 8005afa:	60fb      	str	r3, [r7, #12]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d806      	bhi.n	8005b10 <inc_lock+0x80>
 8005b02:	4a29      	ldr	r2, [pc, #164]	; (8005ba8 <inc_lock+0x118>)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	011b      	lsls	r3, r3, #4
 8005b08:	4413      	add	r3, r2
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1f2      	bne.n	8005af6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d101      	bne.n	8005b1a <inc_lock+0x8a>
 8005b16:	2300      	movs	r3, #0
 8005b18:	e040      	b.n	8005b9c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	4922      	ldr	r1, [pc, #136]	; (8005ba8 <inc_lock+0x118>)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	011b      	lsls	r3, r3, #4
 8005b24:	440b      	add	r3, r1
 8005b26:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	689a      	ldr	r2, [r3, #8]
 8005b2c:	491e      	ldr	r1, [pc, #120]	; (8005ba8 <inc_lock+0x118>)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	011b      	lsls	r3, r3, #4
 8005b32:	440b      	add	r3, r1
 8005b34:	3304      	adds	r3, #4
 8005b36:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b3c:	491a      	ldr	r1, [pc, #104]	; (8005ba8 <inc_lock+0x118>)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	011b      	lsls	r3, r3, #4
 8005b42:	440b      	add	r3, r1
 8005b44:	3308      	adds	r3, #8
 8005b46:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005b48:	4a17      	ldr	r2, [pc, #92]	; (8005ba8 <inc_lock+0x118>)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	011b      	lsls	r3, r3, #4
 8005b4e:	4413      	add	r3, r2
 8005b50:	330c      	adds	r3, #12
 8005b52:	2200      	movs	r2, #0
 8005b54:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d009      	beq.n	8005b70 <inc_lock+0xe0>
 8005b5c:	4a12      	ldr	r2, [pc, #72]	; (8005ba8 <inc_lock+0x118>)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	011b      	lsls	r3, r3, #4
 8005b62:	4413      	add	r3, r2
 8005b64:	330c      	adds	r3, #12
 8005b66:	881b      	ldrh	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <inc_lock+0xe0>
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	e015      	b.n	8005b9c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d108      	bne.n	8005b88 <inc_lock+0xf8>
 8005b76:	4a0c      	ldr	r2, [pc, #48]	; (8005ba8 <inc_lock+0x118>)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	011b      	lsls	r3, r3, #4
 8005b7c:	4413      	add	r3, r2
 8005b7e:	330c      	adds	r3, #12
 8005b80:	881b      	ldrh	r3, [r3, #0]
 8005b82:	3301      	adds	r3, #1
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	e001      	b.n	8005b8c <inc_lock+0xfc>
 8005b88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b8c:	4906      	ldr	r1, [pc, #24]	; (8005ba8 <inc_lock+0x118>)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	011b      	lsls	r3, r3, #4
 8005b92:	440b      	add	r3, r1
 8005b94:	330c      	adds	r3, #12
 8005b96:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	3301      	adds	r3, #1
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3714      	adds	r7, #20
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr
 8005ba8:	200000cc 	.word	0x200000cc

08005bac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	607b      	str	r3, [r7, #4]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d825      	bhi.n	8005c0c <dec_lock+0x60>
		n = Files[i].ctr;
 8005bc0:	4a17      	ldr	r2, [pc, #92]	; (8005c20 <dec_lock+0x74>)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	011b      	lsls	r3, r3, #4
 8005bc6:	4413      	add	r3, r2
 8005bc8:	330c      	adds	r3, #12
 8005bca:	881b      	ldrh	r3, [r3, #0]
 8005bcc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005bce:	89fb      	ldrh	r3, [r7, #14]
 8005bd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bd4:	d101      	bne.n	8005bda <dec_lock+0x2e>
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005bda:	89fb      	ldrh	r3, [r7, #14]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d002      	beq.n	8005be6 <dec_lock+0x3a>
 8005be0:	89fb      	ldrh	r3, [r7, #14]
 8005be2:	3b01      	subs	r3, #1
 8005be4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005be6:	4a0e      	ldr	r2, [pc, #56]	; (8005c20 <dec_lock+0x74>)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	011b      	lsls	r3, r3, #4
 8005bec:	4413      	add	r3, r2
 8005bee:	330c      	adds	r3, #12
 8005bf0:	89fa      	ldrh	r2, [r7, #14]
 8005bf2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005bf4:	89fb      	ldrh	r3, [r7, #14]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d105      	bne.n	8005c06 <dec_lock+0x5a>
 8005bfa:	4a09      	ldr	r2, [pc, #36]	; (8005c20 <dec_lock+0x74>)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	011b      	lsls	r3, r3, #4
 8005c00:	4413      	add	r3, r2
 8005c02:	2200      	movs	r2, #0
 8005c04:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	737b      	strb	r3, [r7, #13]
 8005c0a:	e001      	b.n	8005c10 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005c10:	7b7b      	ldrb	r3, [r7, #13]
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3714      	adds	r7, #20
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	200000cc 	.word	0x200000cc

08005c24 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	60fb      	str	r3, [r7, #12]
 8005c30:	e010      	b.n	8005c54 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005c32:	4a0d      	ldr	r2, [pc, #52]	; (8005c68 <clear_lock+0x44>)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	011b      	lsls	r3, r3, #4
 8005c38:	4413      	add	r3, r2
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d105      	bne.n	8005c4e <clear_lock+0x2a>
 8005c42:	4a09      	ldr	r2, [pc, #36]	; (8005c68 <clear_lock+0x44>)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	011b      	lsls	r3, r3, #4
 8005c48:	4413      	add	r3, r2
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	3301      	adds	r3, #1
 8005c52:	60fb      	str	r3, [r7, #12]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d9eb      	bls.n	8005c32 <clear_lock+0xe>
	}
}
 8005c5a:	bf00      	nop
 8005c5c:	3714      	adds	r7, #20
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	200000cc 	.word	0x200000cc

08005c6c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b086      	sub	sp, #24
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005c74:	2300      	movs	r3, #0
 8005c76:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	78db      	ldrb	r3, [r3, #3]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d034      	beq.n	8005cea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c84:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	7858      	ldrb	r0, [r3, #1]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005c90:	2301      	movs	r3, #1
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	f7ff fbfc 	bl	8005490 <disk_write>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d002      	beq.n	8005ca4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	73fb      	strb	r3, [r7, #15]
 8005ca2:	e022      	b.n	8005cea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	1ad2      	subs	r2, r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d217      	bcs.n	8005cea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	789b      	ldrb	r3, [r3, #2]
 8005cbe:	613b      	str	r3, [r7, #16]
 8005cc0:	e010      	b.n	8005ce4 <sync_window+0x78>
					wsect += fs->fsize;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	4413      	add	r3, r2
 8005cca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	7858      	ldrb	r0, [r3, #1]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	f7ff fbd9 	bl	8005490 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	613b      	str	r3, [r7, #16]
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d8eb      	bhi.n	8005cc2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3718      	adds	r7, #24
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d06:	683a      	ldr	r2, [r7, #0]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d01b      	beq.n	8005d44 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f7ff ffad 	bl	8005c6c <sync_window>
 8005d12:	4603      	mov	r3, r0
 8005d14:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005d16:	7bfb      	ldrb	r3, [r7, #15]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d113      	bne.n	8005d44 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	7858      	ldrb	r0, [r3, #1]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005d26:	2301      	movs	r3, #1
 8005d28:	683a      	ldr	r2, [r7, #0]
 8005d2a:	f7ff fb91 	bl	8005450 <disk_read>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d004      	beq.n	8005d3e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005d34:	f04f 33ff 	mov.w	r3, #4294967295
 8005d38:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 8005d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
	...

08005d50 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f7ff ff87 	bl	8005c6c <sync_window>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005d62:	7bfb      	ldrb	r3, [r7, #15]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d159      	bne.n	8005e1c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	2b03      	cmp	r3, #3
 8005d6e:	d149      	bne.n	8005e04 <sync_fs+0xb4>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	791b      	ldrb	r3, [r3, #4]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d145      	bne.n	8005e04 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	899b      	ldrh	r3, [r3, #12]
 8005d82:	461a      	mov	r2, r3
 8005d84:	2100      	movs	r1, #0
 8005d86:	f7ff fda8 	bl	80058da <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	333c      	adds	r3, #60	; 0x3c
 8005d8e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005d92:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7ff fcb0 	bl	80056fc <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	333c      	adds	r3, #60	; 0x3c
 8005da0:	4921      	ldr	r1, [pc, #132]	; (8005e28 <sync_fs+0xd8>)
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7ff fcc5 	bl	8005732 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	333c      	adds	r3, #60	; 0x3c
 8005dac:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005db0:	491e      	ldr	r1, [pc, #120]	; (8005e2c <sync_fs+0xdc>)
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7ff fcbd 	bl	8005732 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	333c      	adds	r3, #60	; 0x3c
 8005dbc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	69db      	ldr	r3, [r3, #28]
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	4610      	mov	r0, r2
 8005dc8:	f7ff fcb3 	bl	8005732 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	333c      	adds	r3, #60	; 0x3c
 8005dd0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	699b      	ldr	r3, [r3, #24]
 8005dd8:	4619      	mov	r1, r3
 8005dda:	4610      	mov	r0, r2
 8005ddc:	f7ff fca9 	bl	8005732 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de4:	1c5a      	adds	r2, r3, #1
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	7858      	ldrb	r0, [r3, #1]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005df8:	2301      	movs	r3, #1
 8005dfa:	f7ff fb49 	bl	8005490 <disk_write>
			fs->fsi_flag = 0;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	785b      	ldrb	r3, [r3, #1]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7ff fb5f 	bl	80054d0 <disk_ioctl>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <sync_fs+0xcc>
 8005e18:	2301      	movs	r3, #1
 8005e1a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	41615252 	.word	0x41615252
 8005e2c:	61417272 	.word	0x61417272

08005e30 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	3b02      	subs	r3, #2
 8005e3e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a1b      	ldr	r3, [r3, #32]
 8005e44:	3b02      	subs	r3, #2
 8005e46:	683a      	ldr	r2, [r7, #0]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d301      	bcc.n	8005e50 <clust2sect+0x20>
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	e008      	b.n	8005e62 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	895b      	ldrh	r3, [r3, #10]
 8005e54:	461a      	mov	r2, r3
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	fb03 f202 	mul.w	r2, r3, r2
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e60:	4413      	add	r3, r2
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	370c      	adds	r7, #12
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
	...

08005e70 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005e70:	b590      	push	{r4, r7, lr}
 8005e72:	b089      	sub	sp, #36	; 0x24
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d904      	bls.n	8005e90 <get_fat+0x20>
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d302      	bcc.n	8005e96 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005e90:	2301      	movs	r3, #1
 8005e92:	61fb      	str	r3, [r7, #28]
 8005e94:	e13a      	b.n	800610c <get_fat+0x29c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005e96:	f04f 33ff 	mov.w	r3, #4294967295
 8005e9a:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	2b03      	cmp	r3, #3
 8005ea4:	f200 8126 	bhi.w	80060f4 <get_fat+0x284>
 8005ea8:	a201      	add	r2, pc, #4	; (adr r2, 8005eb0 <get_fat+0x40>)
 8005eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eae:	bf00      	nop
 8005eb0:	08005ec1 	.word	0x08005ec1
 8005eb4:	08005f6f 	.word	0x08005f6f
 8005eb8:	08005fbb 	.word	0x08005fbb
 8005ebc:	0800600b 	.word	0x0800600b
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	60fb      	str	r3, [r7, #12]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	085b      	lsrs	r3, r3, #1
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	4413      	add	r3, r2
 8005ecc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	899b      	ldrh	r3, [r3, #12]
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ede:	4413      	add	r3, r2
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	69b8      	ldr	r0, [r7, #24]
 8005ee4:	f7ff ff06 	bl	8005cf4 <move_window>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f040 8105 	bne.w	80060fa <get_fat+0x28a>
			wc = fs->win[bc++ % SS(fs)];
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	1c5a      	adds	r2, r3, #1
 8005ef4:	60fa      	str	r2, [r7, #12]
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	8992      	ldrh	r2, [r2, #12]
 8005efa:	fbb3 f1f2 	udiv	r1, r3, r2
 8005efe:	fb02 f201 	mul.w	r2, r2, r1
 8005f02:	1a9b      	subs	r3, r3, r2
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	4413      	add	r3, r2
 8005f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f0c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	899b      	ldrh	r3, [r3, #12]
 8005f16:	4619      	mov	r1, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f1e:	4413      	add	r3, r2
 8005f20:	4619      	mov	r1, r3
 8005f22:	69b8      	ldr	r0, [r7, #24]
 8005f24:	f7ff fee6 	bl	8005cf4 <move_window>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f040 80e7 	bne.w	80060fe <get_fat+0x28e>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	899b      	ldrh	r3, [r3, #12]
 8005f34:	461a      	mov	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f3c:	fb02 f201 	mul.w	r2, r2, r1
 8005f40:	1a9b      	subs	r3, r3, r2
 8005f42:	69ba      	ldr	r2, [r7, #24]
 8005f44:	4413      	add	r3, r2
 8005f46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f4a:	021b      	lsls	r3, r3, #8
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d002      	beq.n	8005f64 <get_fat+0xf4>
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	091b      	lsrs	r3, r3, #4
 8005f62:	e002      	b.n	8005f6a <get_fat+0xfa>
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f6a:	61fb      	str	r3, [r7, #28]
			break;
 8005f6c:	e0ce      	b.n	800610c <get_fat+0x29c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	899b      	ldrh	r3, [r3, #12]
 8005f76:	085b      	lsrs	r3, r3, #1
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f82:	4413      	add	r3, r2
 8005f84:	4619      	mov	r1, r3
 8005f86:	69b8      	ldr	r0, [r7, #24]
 8005f88:	f7ff feb4 	bl	8005cf4 <move_window>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f040 80b7 	bne.w	8006102 <get_fat+0x292>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	005b      	lsls	r3, r3, #1
 8005f9e:	69ba      	ldr	r2, [r7, #24]
 8005fa0:	8992      	ldrh	r2, [r2, #12]
 8005fa2:	fbb3 f0f2 	udiv	r0, r3, r2
 8005fa6:	fb02 f200 	mul.w	r2, r2, r0
 8005faa:	1a9b      	subs	r3, r3, r2
 8005fac:	440b      	add	r3, r1
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7ff faac 	bl	800550c <ld_word>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	61fb      	str	r3, [r7, #28]
			break;
 8005fb8:	e0a8      	b.n	800610c <get_fat+0x29c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	899b      	ldrh	r3, [r3, #12]
 8005fc2:	089b      	lsrs	r3, r3, #2
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	fbb3 f3f1 	udiv	r3, r3, r1
 8005fce:	4413      	add	r3, r2
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	69b8      	ldr	r0, [r7, #24]
 8005fd4:	f7ff fe8e 	bl	8005cf4 <move_window>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f040 8093 	bne.w	8006106 <get_fat+0x296>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	69ba      	ldr	r2, [r7, #24]
 8005fec:	8992      	ldrh	r2, [r2, #12]
 8005fee:	fbb3 f0f2 	udiv	r0, r3, r2
 8005ff2:	fb02 f200 	mul.w	r2, r2, r0
 8005ff6:	1a9b      	subs	r3, r3, r2
 8005ff8:	440b      	add	r3, r1
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7ff fa9e 	bl	800553c <ld_dword>
 8006000:	4603      	mov	r3, r0
 8006002:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006006:	61fb      	str	r3, [r7, #28]
			break;
 8006008:	e080      	b.n	800610c <get_fat+0x29c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8006010:	4323      	orrs	r3, r4
 8006012:	d06f      	beq.n	80060f4 <get_fat+0x284>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8006024:	f113 30ff 	adds.w	r0, r3, #4294967295
 8006028:	f144 31ff 	adc.w	r1, r4, #4294967295
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	899b      	ldrh	r3, [r3, #12]
 8006030:	b29b      	uxth	r3, r3
 8006032:	f04f 0400 	mov.w	r4, #0
 8006036:	461a      	mov	r2, r3
 8006038:	4623      	mov	r3, r4
 800603a:	f7fa f939 	bl	80002b0 <__aeabi_uldivmod>
 800603e:	4603      	mov	r3, r0
 8006040:	460c      	mov	r4, r1
 8006042:	461a      	mov	r2, r3
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	895b      	ldrh	r3, [r3, #10]
 8006048:	fbb2 f3f3 	udiv	r3, r2, r3
 800604c:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	79db      	ldrb	r3, [r3, #7]
 8006052:	2b02      	cmp	r3, #2
 8006054:	d10e      	bne.n	8006074 <get_fat+0x204>
					if (cofs <= clen) {
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	429a      	cmp	r2, r3
 800605c:	d80a      	bhi.n	8006074 <get_fat+0x204>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	429a      	cmp	r2, r3
 8006064:	d002      	beq.n	800606c <get_fat+0x1fc>
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	3301      	adds	r3, #1
 800606a:	e001      	b.n	8006070 <get_fat+0x200>
 800606c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006070:	61fb      	str	r3, [r7, #28]
						break;
 8006072:	e04b      	b.n	800610c <get_fat+0x29c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	79db      	ldrb	r3, [r3, #7]
 8006078:	2b03      	cmp	r3, #3
 800607a:	d108      	bne.n	800608e <get_fat+0x21e>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	699b      	ldr	r3, [r3, #24]
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	429a      	cmp	r2, r3
 8006084:	d203      	bcs.n	800608e <get_fat+0x21e>
					val = clst + 1; 	/* Generate the value */
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	3301      	adds	r3, #1
 800608a:	61fb      	str	r3, [r7, #28]
					break;
 800608c:	e03e      	b.n	800610c <get_fat+0x29c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	79db      	ldrb	r3, [r3, #7]
 8006092:	2b02      	cmp	r3, #2
 8006094:	d02e      	beq.n	80060f4 <get_fat+0x284>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d003      	beq.n	80060a6 <get_fat+0x236>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800609e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80060a2:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 80060a4:	e032      	b.n	800610c <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	899b      	ldrh	r3, [r3, #12]
 80060ae:	089b      	lsrs	r3, r3, #2
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	4619      	mov	r1, r3
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80060ba:	4413      	add	r3, r2
 80060bc:	4619      	mov	r1, r3
 80060be:	69b8      	ldr	r0, [r7, #24]
 80060c0:	f7ff fe18 	bl	8005cf4 <move_window>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d11f      	bne.n	800610a <get_fat+0x29a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	8992      	ldrh	r2, [r2, #12]
 80060d8:	fbb3 f0f2 	udiv	r0, r3, r2
 80060dc:	fb02 f200 	mul.w	r2, r2, r0
 80060e0:	1a9b      	subs	r3, r3, r2
 80060e2:	440b      	add	r3, r1
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7ff fa29 	bl	800553c <ld_dword>
 80060ea:	4603      	mov	r3, r0
 80060ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060f0:	61fb      	str	r3, [r7, #28]
					break;
 80060f2:	e00b      	b.n	800610c <get_fat+0x29c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80060f4:	2301      	movs	r3, #1
 80060f6:	61fb      	str	r3, [r7, #28]
 80060f8:	e008      	b.n	800610c <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80060fa:	bf00      	nop
 80060fc:	e006      	b.n	800610c <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80060fe:	bf00      	nop
 8006100:	e004      	b.n	800610c <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006102:	bf00      	nop
 8006104:	e002      	b.n	800610c <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006106:	bf00      	nop
 8006108:	e000      	b.n	800610c <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800610a:	bf00      	nop
		}
	}

	return val;
 800610c:	69fb      	ldr	r3, [r7, #28]
}
 800610e:	4618      	mov	r0, r3
 8006110:	3724      	adds	r7, #36	; 0x24
 8006112:	46bd      	mov	sp, r7
 8006114:	bd90      	pop	{r4, r7, pc}
 8006116:	bf00      	nop

08006118 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006118:	b590      	push	{r4, r7, lr}
 800611a:	b089      	sub	sp, #36	; 0x24
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006124:	2302      	movs	r3, #2
 8006126:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	2b01      	cmp	r3, #1
 800612c:	f240 8111 	bls.w	8006352 <put_fat+0x23a>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6a1b      	ldr	r3, [r3, #32]
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	429a      	cmp	r2, r3
 8006138:	f080 810b 	bcs.w	8006352 <put_fat+0x23a>
		switch (fs->fs_type) {
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	3b01      	subs	r3, #1
 8006142:	2b03      	cmp	r3, #3
 8006144:	f200 8105 	bhi.w	8006352 <put_fat+0x23a>
 8006148:	a201      	add	r2, pc, #4	; (adr r2, 8006150 <put_fat+0x38>)
 800614a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800614e:	bf00      	nop
 8006150:	08006161 	.word	0x08006161
 8006154:	08006265 	.word	0x08006265
 8006158:	080062bb 	.word	0x080062bb
 800615c:	080062bb 	.word	0x080062bb
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	61bb      	str	r3, [r7, #24]
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	085b      	lsrs	r3, r3, #1
 8006168:	69ba      	ldr	r2, [r7, #24]
 800616a:	4413      	add	r3, r2
 800616c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	899b      	ldrh	r3, [r3, #12]
 8006176:	4619      	mov	r1, r3
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	fbb3 f3f1 	udiv	r3, r3, r1
 800617e:	4413      	add	r3, r2
 8006180:	4619      	mov	r1, r3
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f7ff fdb6 	bl	8005cf4 <move_window>
 8006188:	4603      	mov	r3, r0
 800618a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800618c:	7ffb      	ldrb	r3, [r7, #31]
 800618e:	2b00      	cmp	r3, #0
 8006190:	f040 80d8 	bne.w	8006344 <put_fat+0x22c>
			p = fs->win + bc++ % SS(fs);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	1c5a      	adds	r2, r3, #1
 800619e:	61ba      	str	r2, [r7, #24]
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	8992      	ldrh	r2, [r2, #12]
 80061a4:	fbb3 f0f2 	udiv	r0, r3, r2
 80061a8:	fb02 f200 	mul.w	r2, r2, r0
 80061ac:	1a9b      	subs	r3, r3, r2
 80061ae:	440b      	add	r3, r1
 80061b0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	f003 0301 	and.w	r3, r3, #1
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00d      	beq.n	80061d8 <put_fat+0xc0>
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	b25b      	sxtb	r3, r3
 80061c2:	f003 030f 	and.w	r3, r3, #15
 80061c6:	b25a      	sxtb	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	011b      	lsls	r3, r3, #4
 80061ce:	b25b      	sxtb	r3, r3
 80061d0:	4313      	orrs	r3, r2
 80061d2:	b25b      	sxtb	r3, r3
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	e001      	b.n	80061dc <put_fat+0xc4>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2201      	movs	r2, #1
 80061e4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	899b      	ldrh	r3, [r3, #12]
 80061ee:	4619      	mov	r1, r3
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80061f6:	4413      	add	r3, r2
 80061f8:	4619      	mov	r1, r3
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f7ff fd7a 	bl	8005cf4 <move_window>
 8006200:	4603      	mov	r3, r0
 8006202:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006204:	7ffb      	ldrb	r3, [r7, #31]
 8006206:	2b00      	cmp	r3, #0
 8006208:	f040 809e 	bne.w	8006348 <put_fat+0x230>
			p = fs->win + bc % SS(fs);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	899b      	ldrh	r3, [r3, #12]
 8006216:	461a      	mov	r2, r3
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	fbb3 f0f2 	udiv	r0, r3, r2
 800621e:	fb02 f200 	mul.w	r2, r2, r0
 8006222:	1a9b      	subs	r3, r3, r2
 8006224:	440b      	add	r3, r1
 8006226:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	f003 0301 	and.w	r3, r3, #1
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <put_fat+0x122>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	091b      	lsrs	r3, r3, #4
 8006236:	b2db      	uxtb	r3, r3
 8006238:	e00e      	b.n	8006258 <put_fat+0x140>
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	b25b      	sxtb	r3, r3
 8006240:	f023 030f 	bic.w	r3, r3, #15
 8006244:	b25a      	sxtb	r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	0a1b      	lsrs	r3, r3, #8
 800624a:	b25b      	sxtb	r3, r3
 800624c:	f003 030f 	and.w	r3, r3, #15
 8006250:	b25b      	sxtb	r3, r3
 8006252:	4313      	orrs	r3, r2
 8006254:	b25b      	sxtb	r3, r3
 8006256:	b2db      	uxtb	r3, r3
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2201      	movs	r2, #1
 8006260:	70da      	strb	r2, [r3, #3]
			break;
 8006262:	e076      	b.n	8006352 <put_fat+0x23a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	899b      	ldrh	r3, [r3, #12]
 800626c:	085b      	lsrs	r3, r3, #1
 800626e:	b29b      	uxth	r3, r3
 8006270:	4619      	mov	r1, r3
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	fbb3 f3f1 	udiv	r3, r3, r1
 8006278:	4413      	add	r3, r2
 800627a:	4619      	mov	r1, r3
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f7ff fd39 	bl	8005cf4 <move_window>
 8006282:	4603      	mov	r3, r0
 8006284:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006286:	7ffb      	ldrb	r3, [r7, #31]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d15f      	bne.n	800634c <put_fat+0x234>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	005b      	lsls	r3, r3, #1
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	8992      	ldrh	r2, [r2, #12]
 800629a:	fbb3 f0f2 	udiv	r0, r3, r2
 800629e:	fb02 f200 	mul.w	r2, r2, r0
 80062a2:	1a9b      	subs	r3, r3, r2
 80062a4:	440b      	add	r3, r1
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	b292      	uxth	r2, r2
 80062aa:	4611      	mov	r1, r2
 80062ac:	4618      	mov	r0, r3
 80062ae:	f7ff fa25 	bl	80056fc <st_word>
			fs->wflag = 1;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2201      	movs	r2, #1
 80062b6:	70da      	strb	r2, [r3, #3]
			break;
 80062b8:	e04b      	b.n	8006352 <put_fat+0x23a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	899b      	ldrh	r3, [r3, #12]
 80062c2:	089b      	lsrs	r3, r3, #2
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	4619      	mov	r1, r3
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80062ce:	4413      	add	r3, r2
 80062d0:	4619      	mov	r1, r3
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f7ff fd0e 	bl	8005cf4 <move_window>
 80062d8:	4603      	mov	r3, r0
 80062da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80062dc:	7ffb      	ldrb	r3, [r7, #31]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d136      	bne.n	8006350 <put_fat+0x238>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	2b04      	cmp	r3, #4
 80062e8:	d017      	beq.n	800631a <put_fat+0x202>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	8992      	ldrh	r2, [r2, #12]
 80062fe:	fbb3 f0f2 	udiv	r0, r3, r2
 8006302:	fb02 f200 	mul.w	r2, r2, r0
 8006306:	1a9b      	subs	r3, r3, r2
 8006308:	440b      	add	r3, r1
 800630a:	4618      	mov	r0, r3
 800630c:	f7ff f916 	bl	800553c <ld_dword>
 8006310:	4603      	mov	r3, r0
 8006312:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006316:	4323      	orrs	r3, r4
 8006318:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	8992      	ldrh	r2, [r2, #12]
 8006328:	fbb3 f0f2 	udiv	r0, r3, r2
 800632c:	fb02 f200 	mul.w	r2, r2, r0
 8006330:	1a9b      	subs	r3, r3, r2
 8006332:	440b      	add	r3, r1
 8006334:	6879      	ldr	r1, [r7, #4]
 8006336:	4618      	mov	r0, r3
 8006338:	f7ff f9fb 	bl	8005732 <st_dword>
			fs->wflag = 1;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2201      	movs	r2, #1
 8006340:	70da      	strb	r2, [r3, #3]
			break;
 8006342:	e006      	b.n	8006352 <put_fat+0x23a>
			if (res != FR_OK) break;
 8006344:	bf00      	nop
 8006346:	e004      	b.n	8006352 <put_fat+0x23a>
			if (res != FR_OK) break;
 8006348:	bf00      	nop
 800634a:	e002      	b.n	8006352 <put_fat+0x23a>
			if (res != FR_OK) break;
 800634c:	bf00      	nop
 800634e:	e000      	b.n	8006352 <put_fat+0x23a>
			if (res != FR_OK) break;
 8006350:	bf00      	nop
		}
	}
	return res;
 8006352:	7ffb      	ldrb	r3, [r7, #31]
}
 8006354:	4618      	mov	r0, r3
 8006356:	3724      	adds	r7, #36	; 0x24
 8006358:	46bd      	mov	sp, r7
 800635a:	bd90      	pop	{r4, r7, pc}

0800635c <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b08a      	sub	sp, #40	; 0x28
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	3b02      	subs	r3, #2
 800636c:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6a1b      	ldr	r3, [r3, #32]
 8006372:	3b02      	subs	r3, #2
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	429a      	cmp	r2, r3
 8006378:	d301      	bcc.n	800637e <find_bitmap+0x22>
 800637a:	2300      	movs	r3, #0
 800637c:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	61fb      	str	r3, [r7, #28]
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	61bb      	str	r3, [r7, #24]
 8006386:	2300      	movs	r3, #0
 8006388:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	08db      	lsrs	r3, r3, #3
 8006392:	68f9      	ldr	r1, [r7, #12]
 8006394:	8989      	ldrh	r1, [r1, #12]
 8006396:	fbb3 f3f1 	udiv	r3, r3, r1
 800639a:	4413      	add	r3, r2
 800639c:	4619      	mov	r1, r3
 800639e:	68f8      	ldr	r0, [r7, #12]
 80063a0:	f7ff fca8 	bl	8005cf4 <move_window>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d002      	beq.n	80063b0 <find_bitmap+0x54>
 80063aa:	f04f 33ff 	mov.w	r3, #4294967295
 80063ae:	e058      	b.n	8006462 <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	08db      	lsrs	r3, r3, #3
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	8992      	ldrh	r2, [r2, #12]
 80063b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80063bc:	fb02 f201 	mul.w	r2, r2, r1
 80063c0:	1a9b      	subs	r3, r3, r2
 80063c2:	623b      	str	r3, [r7, #32]
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	f003 0307 	and.w	r3, r3, #7
 80063ca:	2201      	movs	r2, #1
 80063cc:	fa02 f303 	lsl.w	r3, r2, r3
 80063d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	6a3b      	ldr	r3, [r7, #32]
 80063d8:	4413      	add	r3, r2
 80063da:	333c      	adds	r3, #60	; 0x3c
 80063dc:	781a      	ldrb	r2, [r3, #0]
 80063de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063e2:	4013      	ands	r3, r2
 80063e4:	74fb      	strb	r3, [r7, #19]
 80063e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063ea:	005b      	lsls	r3, r3, #1
 80063ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	3301      	adds	r3, #1
 80063f4:	61fb      	str	r3, [r7, #28]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	3b02      	subs	r3, #2
 80063fc:	69fa      	ldr	r2, [r7, #28]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d307      	bcc.n	8006412 <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 8006402:	2300      	movs	r3, #0
 8006404:	61fb      	str	r3, [r7, #28]
 8006406:	2300      	movs	r3, #0
 8006408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	899b      	ldrh	r3, [r3, #12]
 8006410:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 8006412:	7cfb      	ldrb	r3, [r7, #19]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d109      	bne.n	800642c <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	3301      	adds	r3, #1
 800641c:	617b      	str	r3, [r7, #20]
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	429a      	cmp	r2, r3
 8006424:	d106      	bne.n	8006434 <find_bitmap+0xd8>
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	3302      	adds	r3, #2
 800642a:	e01a      	b.n	8006462 <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	61bb      	str	r3, [r7, #24]
 8006430:	2300      	movs	r3, #0
 8006432:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 8006434:	69fa      	ldr	r2, [r7, #28]
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	429a      	cmp	r2, r3
 800643a:	d101      	bne.n	8006440 <find_bitmap+0xe4>
 800643c:	2300      	movs	r3, #0
 800643e:	e010      	b.n	8006462 <find_bitmap+0x106>
			} while (bm);
 8006440:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1c5      	bne.n	80063d4 <find_bitmap+0x78>
			bm = 1;
 8006448:	2301      	movs	r3, #1
 800644a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800644e:	6a3b      	ldr	r3, [r7, #32]
 8006450:	3301      	adds	r3, #1
 8006452:	623b      	str	r3, [r7, #32]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	899b      	ldrh	r3, [r3, #12]
 8006458:	461a      	mov	r2, r3
 800645a:	6a3b      	ldr	r3, [r7, #32]
 800645c:	4293      	cmp	r3, r2
 800645e:	d3b9      	bcc.n	80063d4 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8006460:	e793      	b.n	800638a <find_bitmap+0x2e>
	}
}
 8006462:	4618      	mov	r0, r3
 8006464:	3728      	adds	r7, #40	; 0x28
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800646a:	b580      	push	{r7, lr}
 800646c:	b088      	sub	sp, #32
 800646e:	af00      	add	r7, sp, #0
 8006470:	60f8      	str	r0, [r7, #12]
 8006472:	60b9      	str	r1, [r7, #8]
 8006474:	607a      	str	r2, [r7, #4]
 8006476:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	3b02      	subs	r3, #2
 800647c:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	08db      	lsrs	r3, r3, #3
 8006486:	68f9      	ldr	r1, [r7, #12]
 8006488:	8989      	ldrh	r1, [r1, #12]
 800648a:	fbb3 f3f1 	udiv	r3, r3, r1
 800648e:	4413      	add	r3, r2
 8006490:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	08db      	lsrs	r3, r3, #3
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	8992      	ldrh	r2, [r2, #12]
 800649a:	fbb3 f1f2 	udiv	r1, r3, r2
 800649e:	fb02 f201 	mul.w	r2, r2, r1
 80064a2:	1a9b      	subs	r3, r3, r2
 80064a4:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	f003 0307 	and.w	r3, r3, #7
 80064ac:	2201      	movs	r2, #1
 80064ae:	fa02 f303 	lsl.w	r3, r2, r3
 80064b2:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	1c5a      	adds	r2, r3, #1
 80064b8:	617a      	str	r2, [r7, #20]
 80064ba:	4619      	mov	r1, r3
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f7ff fc19 	bl	8005cf4 <move_window>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d001      	beq.n	80064cc <change_bitmap+0x62>
 80064c8:	2301      	movs	r3, #1
 80064ca:	e03f      	b.n	800654c <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	4413      	add	r3, r2
 80064d2:	333c      	adds	r3, #60	; 0x3c
 80064d4:	781a      	ldrb	r2, [r3, #0]
 80064d6:	7ffb      	ldrb	r3, [r7, #31]
 80064d8:	4013      	ands	r3, r2
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	2b00      	cmp	r3, #0
 80064de:	bf14      	ite	ne
 80064e0:	2301      	movne	r3, #1
 80064e2:	2300      	moveq	r3, #0
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	461a      	mov	r2, r3
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d101      	bne.n	80064f2 <change_bitmap+0x88>
 80064ee:	2302      	movs	r3, #2
 80064f0:	e02c      	b.n	800654c <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	4413      	add	r3, r2
 80064f8:	333c      	adds	r3, #60	; 0x3c
 80064fa:	781a      	ldrb	r2, [r3, #0]
 80064fc:	7ffb      	ldrb	r3, [r7, #31]
 80064fe:	4053      	eors	r3, r2
 8006500:	b2d9      	uxtb	r1, r3
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	4413      	add	r3, r2
 8006508:	333c      	adds	r3, #60	; 0x3c
 800650a:	460a      	mov	r2, r1
 800650c:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2201      	movs	r2, #1
 8006512:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	3b01      	subs	r3, #1
 8006518:	607b      	str	r3, [r7, #4]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d101      	bne.n	8006524 <change_bitmap+0xba>
 8006520:	2300      	movs	r3, #0
 8006522:	e013      	b.n	800654c <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 8006524:	7ffb      	ldrb	r3, [r7, #31]
 8006526:	005b      	lsls	r3, r3, #1
 8006528:	77fb      	strb	r3, [r7, #31]
 800652a:	7ffb      	ldrb	r3, [r7, #31]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1cd      	bne.n	80064cc <change_bitmap+0x62>
			bm = 1;
 8006530:	2301      	movs	r3, #1
 8006532:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	3301      	adds	r3, #1
 8006538:	61bb      	str	r3, [r7, #24]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	899b      	ldrh	r3, [r3, #12]
 800653e:	461a      	mov	r2, r3
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	4293      	cmp	r3, r2
 8006544:	d3c2      	bcc.n	80064cc <change_bitmap+0x62>
		i = 0;
 8006546:	2300      	movs	r3, #0
 8006548:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800654a:	e7b3      	b.n	80064b4 <change_bitmap+0x4a>
	}
}
 800654c:	4618      	mov	r0, r3
 800654e:	3720      	adds	r7, #32
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b086      	sub	sp, #24
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	79db      	ldrb	r3, [r3, #7]
 8006560:	2b03      	cmp	r3, #3
 8006562:	d121      	bne.n	80065a8 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	617b      	str	r3, [r7, #20]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	613b      	str	r3, [r7, #16]
 8006570:	e014      	b.n	800659c <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6818      	ldr	r0, [r3, #0]
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	3301      	adds	r3, #1
 800657a:	461a      	mov	r2, r3
 800657c:	6979      	ldr	r1, [r7, #20]
 800657e:	f7ff fdcb 	bl	8006118 <put_fat>
 8006582:	4603      	mov	r3, r0
 8006584:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8006586:	7bfb      	ldrb	r3, [r7, #15]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d001      	beq.n	8006590 <fill_first_frag+0x3c>
 800658c:	7bfb      	ldrb	r3, [r7, #15]
 800658e:	e00c      	b.n	80065aa <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	3301      	adds	r3, #1
 8006594:	617b      	str	r3, [r7, #20]
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	3b01      	subs	r3, #1
 800659a:	613b      	str	r3, [r7, #16]
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1e7      	bne.n	8006572 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3718      	adds	r7, #24
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b086      	sub	sp, #24
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	60f8      	str	r0, [r7, #12]
 80065ba:	60b9      	str	r1, [r7, #8]
 80065bc:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 80065be:	e020      	b.n	8006602 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6818      	ldr	r0, [r3, #0]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	69db      	ldr	r3, [r3, #28]
 80065c8:	68ba      	ldr	r2, [r7, #8]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	1c59      	adds	r1, r3, #1
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	69db      	ldr	r3, [r3, #28]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d905      	bls.n	80065e2 <fill_last_frag+0x30>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	69db      	ldr	r3, [r3, #28]
 80065da:	68ba      	ldr	r2, [r7, #8]
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	3302      	adds	r3, #2
 80065e0:	e000      	b.n	80065e4 <fill_last_frag+0x32>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	461a      	mov	r2, r3
 80065e6:	f7ff fd97 	bl	8006118 <put_fat>
 80065ea:	4603      	mov	r3, r0
 80065ec:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 80065ee:	7dfb      	ldrb	r3, [r7, #23]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <fill_last_frag+0x46>
 80065f4:	7dfb      	ldrb	r3, [r7, #23]
 80065f6:	e009      	b.n	800660c <fill_last_frag+0x5a>
		obj->n_frag--;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	69db      	ldr	r3, [r3, #28]
 80065fc:	1e5a      	subs	r2, r3, #1
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	69db      	ldr	r3, [r3, #28]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1da      	bne.n	80065c0 <fill_last_frag+0xe>
	}
	return FR_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3718      	adds	r7, #24
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b08a      	sub	sp, #40	; 0x28
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006620:	2300      	movs	r3, #0
 8006622:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	627b      	str	r3, [r7, #36]	; 0x24
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d904      	bls.n	8006642 <remove_chain+0x2e>
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	6a1b      	ldr	r3, [r3, #32]
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	429a      	cmp	r2, r3
 8006640:	d301      	bcc.n	8006646 <remove_chain+0x32>
 8006642:	2302      	movs	r3, #2
 8006644:	e096      	b.n	8006774 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d014      	beq.n	8006676 <remove_chain+0x62>
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	2b04      	cmp	r3, #4
 8006652:	d103      	bne.n	800665c <remove_chain+0x48>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	79db      	ldrb	r3, [r3, #7]
 8006658:	2b02      	cmp	r3, #2
 800665a:	d00c      	beq.n	8006676 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800665c:	f04f 32ff 	mov.w	r2, #4294967295
 8006660:	6879      	ldr	r1, [r7, #4]
 8006662:	69b8      	ldr	r0, [r7, #24]
 8006664:	f7ff fd58 	bl	8006118 <put_fat>
 8006668:	4603      	mov	r3, r0
 800666a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800666c:	7ffb      	ldrb	r3, [r7, #31]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d001      	beq.n	8006676 <remove_chain+0x62>
 8006672:	7ffb      	ldrb	r3, [r7, #31]
 8006674:	e07e      	b.n	8006774 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006676:	68b9      	ldr	r1, [r7, #8]
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f7ff fbf9 	bl	8005e70 <get_fat>
 800667e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d055      	beq.n	8006732 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	2b01      	cmp	r3, #1
 800668a:	d101      	bne.n	8006690 <remove_chain+0x7c>
 800668c:	2302      	movs	r3, #2
 800668e:	e071      	b.n	8006774 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006696:	d101      	bne.n	800669c <remove_chain+0x88>
 8006698:	2301      	movs	r3, #1
 800669a:	e06b      	b.n	8006774 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	2b04      	cmp	r3, #4
 80066a2:	d00b      	beq.n	80066bc <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80066a4:	2200      	movs	r2, #0
 80066a6:	68b9      	ldr	r1, [r7, #8]
 80066a8:	69b8      	ldr	r0, [r7, #24]
 80066aa:	f7ff fd35 	bl	8006118 <put_fat>
 80066ae:	4603      	mov	r3, r0
 80066b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80066b2:	7ffb      	ldrb	r3, [r7, #31]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d001      	beq.n	80066bc <remove_chain+0xa8>
 80066b8:	7ffb      	ldrb	r3, [r7, #31]
 80066ba:	e05b      	b.n	8006774 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	69da      	ldr	r2, [r3, #28]
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	6a1b      	ldr	r3, [r3, #32]
 80066c4:	3b02      	subs	r3, #2
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d20b      	bcs.n	80066e2 <remove_chain+0xce>
			fs->free_clst++;
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	1c5a      	adds	r2, r3, #1
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	791b      	ldrb	r3, [r3, #4]
 80066d8:	f043 0301 	orr.w	r3, r3, #1
 80066dc:	b2da      	uxtb	r2, r3
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 80066e2:	6a3b      	ldr	r3, [r7, #32]
 80066e4:	3301      	adds	r3, #1
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d102      	bne.n	80066f2 <remove_chain+0xde>
			ecl = nxt;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	623b      	str	r3, [r7, #32]
 80066f0:	e017      	b.n	8006722 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	2b04      	cmp	r3, #4
 80066f8:	d10f      	bne.n	800671a <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 80066fa:	6a3a      	ldr	r2, [r7, #32]
 80066fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	1c5a      	adds	r2, r3, #1
 8006702:	2300      	movs	r3, #0
 8006704:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006706:	69b8      	ldr	r0, [r7, #24]
 8006708:	f7ff feaf 	bl	800646a <change_bitmap>
 800670c:	4603      	mov	r3, r0
 800670e:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 8006710:	7ffb      	ldrb	r3, [r7, #31]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d001      	beq.n	800671a <remove_chain+0x106>
 8006716:	7ffb      	ldrb	r3, [r7, #31]
 8006718:	e02c      	b.n	8006774 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	623b      	str	r3, [r7, #32]
 800671e:	6a3b      	ldr	r3, [r7, #32]
 8006720:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	68ba      	ldr	r2, [r7, #8]
 800672c:	429a      	cmp	r2, r3
 800672e:	d3a2      	bcc.n	8006676 <remove_chain+0x62>
 8006730:	e000      	b.n	8006734 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 8006732:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	2b04      	cmp	r3, #4
 800673a:	d11a      	bne.n	8006772 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d103      	bne.n	800674a <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	71da      	strb	r2, [r3, #7]
 8006748:	e013      	b.n	8006772 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	79db      	ldrb	r3, [r3, #7]
 800674e:	2b03      	cmp	r3, #3
 8006750:	d10f      	bne.n	8006772 <remove_chain+0x15e>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	429a      	cmp	r2, r3
 800675a:	d30a      	bcc.n	8006772 <remove_chain+0x15e>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	689a      	ldr	r2, [r3, #8]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	4413      	add	r3, r2
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	429a      	cmp	r2, r3
 800676a:	d802      	bhi.n	8006772 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2202      	movs	r2, #2
 8006770:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3728      	adds	r7, #40	; 0x28
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b088      	sub	sp, #32
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10d      	bne.n	80067ae <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d004      	beq.n	80067a8 <create_chain+0x2c>
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	6a1b      	ldr	r3, [r3, #32]
 80067a2:	69ba      	ldr	r2, [r7, #24]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d31b      	bcc.n	80067e0 <create_chain+0x64>
 80067a8:	2301      	movs	r3, #1
 80067aa:	61bb      	str	r3, [r7, #24]
 80067ac:	e018      	b.n	80067e0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80067ae:	6839      	ldr	r1, [r7, #0]
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f7ff fb5d 	bl	8005e70 <get_fat>
 80067b6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d801      	bhi.n	80067c2 <create_chain+0x46>
 80067be:	2301      	movs	r3, #1
 80067c0:	e0d9      	b.n	8006976 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c8:	d101      	bne.n	80067ce <create_chain+0x52>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	e0d3      	b.n	8006976 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	6a1b      	ldr	r3, [r3, #32]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d201      	bcs.n	80067dc <create_chain+0x60>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	e0cc      	b.n	8006976 <create_chain+0x1fa>
		scl = clst;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	2b04      	cmp	r3, #4
 80067e6:	d164      	bne.n	80068b2 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 80067e8:	2201      	movs	r2, #1
 80067ea:	69b9      	ldr	r1, [r7, #24]
 80067ec:	6938      	ldr	r0, [r7, #16]
 80067ee:	f7ff fdb5 	bl	800635c <find_bitmap>
 80067f2:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d003      	beq.n	8006802 <create_chain+0x86>
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006800:	d101      	bne.n	8006806 <create_chain+0x8a>
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	e0b7      	b.n	8006976 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 8006806:	2301      	movs	r3, #1
 8006808:	2201      	movs	r2, #1
 800680a:	69f9      	ldr	r1, [r7, #28]
 800680c:	6938      	ldr	r0, [r7, #16]
 800680e:	f7ff fe2c 	bl	800646a <change_bitmap>
 8006812:	4603      	mov	r3, r0
 8006814:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 8006816:	7dfb      	ldrb	r3, [r7, #23]
 8006818:	2b02      	cmp	r3, #2
 800681a:	d101      	bne.n	8006820 <create_chain+0xa4>
 800681c:	2301      	movs	r3, #1
 800681e:	e0aa      	b.n	8006976 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8006820:	7dfb      	ldrb	r3, [r7, #23]
 8006822:	2b01      	cmp	r3, #1
 8006824:	d102      	bne.n	800682c <create_chain+0xb0>
 8006826:	f04f 33ff 	mov.w	r3, #4294967295
 800682a:	e0a4      	b.n	8006976 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d103      	bne.n	800683a <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2202      	movs	r2, #2
 8006836:	71da      	strb	r2, [r3, #7]
 8006838:	e011      	b.n	800685e <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	79db      	ldrb	r3, [r3, #7]
 800683e:	2b02      	cmp	r3, #2
 8006840:	d10d      	bne.n	800685e <create_chain+0xe2>
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	3301      	adds	r3, #1
 8006846:	69fa      	ldr	r2, [r7, #28]
 8006848:	429a      	cmp	r2, r3
 800684a:	d008      	beq.n	800685e <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	69ba      	ldr	r2, [r7, #24]
 8006852:	1ad2      	subs	r2, r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2203      	movs	r2, #3
 800685c:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	79db      	ldrb	r3, [r3, #7]
 8006862:	2b02      	cmp	r3, #2
 8006864:	d064      	beq.n	8006930 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	3301      	adds	r3, #1
 800686a:	69fa      	ldr	r2, [r7, #28]
 800686c:	429a      	cmp	r2, r3
 800686e:	d10b      	bne.n	8006888 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	69db      	ldr	r3, [r3, #28]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d003      	beq.n	8006880 <create_chain+0x104>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	69db      	ldr	r3, [r3, #28]
 800687c:	3301      	adds	r3, #1
 800687e:	e000      	b.n	8006882 <create_chain+0x106>
 8006880:	2302      	movs	r3, #2
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	61d3      	str	r3, [r2, #28]
 8006886:	e053      	b.n	8006930 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	69db      	ldr	r3, [r3, #28]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d102      	bne.n	8006896 <create_chain+0x11a>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8006896:	69fa      	ldr	r2, [r7, #28]
 8006898:	6839      	ldr	r1, [r7, #0]
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f7ff fe89 	bl	80065b2 <fill_last_frag>
 80068a0:	4603      	mov	r3, r0
 80068a2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 80068a4:	7dfb      	ldrb	r3, [r7, #23]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d142      	bne.n	8006930 <create_chain+0x1b4>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	61da      	str	r2, [r3, #28]
 80068b0:	e03e      	b.n	8006930 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	3301      	adds	r3, #1
 80068ba:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	6a1b      	ldr	r3, [r3, #32]
 80068c0:	69fa      	ldr	r2, [r7, #28]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d307      	bcc.n	80068d6 <create_chain+0x15a>
				ncl = 2;
 80068c6:	2302      	movs	r3, #2
 80068c8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80068ca:	69fa      	ldr	r2, [r7, #28]
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d901      	bls.n	80068d6 <create_chain+0x15a>
 80068d2:	2300      	movs	r3, #0
 80068d4:	e04f      	b.n	8006976 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80068d6:	69f9      	ldr	r1, [r7, #28]
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f7ff fac9 	bl	8005e70 <get_fat>
 80068de:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d00e      	beq.n	8006904 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d003      	beq.n	80068f4 <create_chain+0x178>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f2:	d101      	bne.n	80068f8 <create_chain+0x17c>
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	e03e      	b.n	8006976 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 80068f8:	69fa      	ldr	r2, [r7, #28]
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d1da      	bne.n	80068b6 <create_chain+0x13a>
 8006900:	2300      	movs	r3, #0
 8006902:	e038      	b.n	8006976 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 8006904:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006906:	f04f 32ff 	mov.w	r2, #4294967295
 800690a:	69f9      	ldr	r1, [r7, #28]
 800690c:	6938      	ldr	r0, [r7, #16]
 800690e:	f7ff fc03 	bl	8006118 <put_fat>
 8006912:	4603      	mov	r3, r0
 8006914:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006916:	7dfb      	ldrb	r3, [r7, #23]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d109      	bne.n	8006930 <create_chain+0x1b4>
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d006      	beq.n	8006930 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006922:	69fa      	ldr	r2, [r7, #28]
 8006924:	6839      	ldr	r1, [r7, #0]
 8006926:	6938      	ldr	r0, [r7, #16]
 8006928:	f7ff fbf6 	bl	8006118 <put_fat>
 800692c:	4603      	mov	r3, r0
 800692e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006930:	7dfb      	ldrb	r3, [r7, #23]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d116      	bne.n	8006964 <create_chain+0x1e8>
		fs->last_clst = ncl;
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	69fa      	ldr	r2, [r7, #28]
 800693a:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	69da      	ldr	r2, [r3, #28]
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	6a1b      	ldr	r3, [r3, #32]
 8006944:	3b02      	subs	r3, #2
 8006946:	429a      	cmp	r2, r3
 8006948:	d804      	bhi.n	8006954 <create_chain+0x1d8>
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	69db      	ldr	r3, [r3, #28]
 800694e:	1e5a      	subs	r2, r3, #1
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	791b      	ldrb	r3, [r3, #4]
 8006958:	f043 0301 	orr.w	r3, r3, #1
 800695c:	b2da      	uxtb	r2, r3
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	711a      	strb	r2, [r3, #4]
 8006962:	e007      	b.n	8006974 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006964:	7dfb      	ldrb	r3, [r7, #23]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d102      	bne.n	8006970 <create_chain+0x1f4>
 800696a:	f04f 33ff 	mov.w	r3, #4294967295
 800696e:	e000      	b.n	8006972 <create_chain+0x1f6>
 8006970:	2301      	movs	r3, #1
 8006972:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006974:	69fb      	ldr	r3, [r7, #28]
}
 8006976:	4618      	mov	r0, r3
 8006978:	3720      	adds	r7, #32
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800697e:	b590      	push	{r4, r7, lr}
 8006980:	b089      	sub	sp, #36	; 0x24
 8006982:	af00      	add	r7, sp, #0
 8006984:	60f8      	str	r0, [r7, #12]
 8006986:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006994:	3304      	adds	r3, #4
 8006996:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	899b      	ldrh	r3, [r3, #12]
 800699c:	b29b      	uxth	r3, r3
 800699e:	f04f 0400 	mov.w	r4, #0
 80069a2:	461a      	mov	r2, r3
 80069a4:	4623      	mov	r3, r4
 80069a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069aa:	f7f9 fc81 	bl	80002b0 <__aeabi_uldivmod>
 80069ae:	4603      	mov	r3, r0
 80069b0:	460c      	mov	r4, r1
 80069b2:	4618      	mov	r0, r3
 80069b4:	4621      	mov	r1, r4
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	895b      	ldrh	r3, [r3, #10]
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	f04f 0400 	mov.w	r4, #0
 80069c0:	461a      	mov	r2, r3
 80069c2:	4623      	mov	r3, r4
 80069c4:	f7f9 fc74 	bl	80002b0 <__aeabi_uldivmod>
 80069c8:	4603      	mov	r3, r0
 80069ca:	460c      	mov	r4, r1
 80069cc:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	1d1a      	adds	r2, r3, #4
 80069d2:	61ba      	str	r2, [r7, #24]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d101      	bne.n	80069e2 <clmt_clust+0x64>
 80069de:	2300      	movs	r3, #0
 80069e0:	e010      	b.n	8006a04 <clmt_clust+0x86>
		if (cl < ncl) break;	/* In this fragment? */
 80069e2:	69fa      	ldr	r2, [r7, #28]
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d307      	bcc.n	80069fa <clmt_clust+0x7c>
		cl -= ncl; tbl++;		/* Next fragment */
 80069ea:	69fa      	ldr	r2, [r7, #28]
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	61fb      	str	r3, [r7, #28]
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	3304      	adds	r3, #4
 80069f6:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80069f8:	e7e9      	b.n	80069ce <clmt_clust+0x50>
		if (cl < ncl) break;	/* In this fragment? */
 80069fa:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	4413      	add	r3, r2
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3724      	adds	r7, #36	; 0x24
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd90      	pop	{r4, r7, pc}

08006a0c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b086      	sub	sp, #24
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	2b04      	cmp	r3, #4
 8006a22:	d102      	bne.n	8006a2a <dir_sdi+0x1e>
 8006a24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a28:	e001      	b.n	8006a2e <dir_sdi+0x22>
 8006a2a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d904      	bls.n	8006a3e <dir_sdi+0x32>
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	f003 031f 	and.w	r3, r3, #31
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d001      	beq.n	8006a42 <dir_sdi+0x36>
		return FR_INT_ERR;
 8006a3e:	2302      	movs	r3, #2
 8006a40:	e074      	b.n	8006b2c <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	683a      	ldr	r2, [r7, #0]
 8006a46:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d109      	bne.n	8006a68 <dir_sdi+0x5c>
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d905      	bls.n	8006a68 <dir_sdi+0x5c>
		clst = fs->dirbase;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a60:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d10c      	bne.n	8006a88 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	095b      	lsrs	r3, r3, #5
 8006a72:	693a      	ldr	r2, [r7, #16]
 8006a74:	8912      	ldrh	r2, [r2, #8]
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d301      	bcc.n	8006a7e <dir_sdi+0x72>
 8006a7a:	2302      	movs	r3, #2
 8006a7c:	e056      	b.n	8006b2c <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	639a      	str	r2, [r3, #56]	; 0x38
 8006a86:	e02d      	b.n	8006ae4 <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	895b      	ldrh	r3, [r3, #10]
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	899b      	ldrh	r3, [r3, #12]
 8006a92:	fb03 f302 	mul.w	r3, r3, r2
 8006a96:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006a98:	e019      	b.n	8006ace <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6979      	ldr	r1, [r7, #20]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7ff f9e6 	bl	8005e70 <get_fat>
 8006aa4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aac:	d101      	bne.n	8006ab2 <dir_sdi+0xa6>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e03c      	b.n	8006b2c <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d904      	bls.n	8006ac2 <dir_sdi+0xb6>
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	6a1b      	ldr	r3, [r3, #32]
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d301      	bcc.n	8006ac6 <dir_sdi+0xba>
 8006ac2:	2302      	movs	r3, #2
 8006ac4:	e032      	b.n	8006b2c <dir_sdi+0x120>
			ofs -= csz;
 8006ac6:	683a      	ldr	r2, [r7, #0]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006ace:	683a      	ldr	r2, [r7, #0]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d2e1      	bcs.n	8006a9a <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 8006ad6:	6979      	ldr	r1, [r7, #20]
 8006ad8:	6938      	ldr	r0, [r7, #16]
 8006ada:	f7ff f9a9 	bl	8005e30 <clust2sect>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	697a      	ldr	r2, [r7, #20]
 8006ae8:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d101      	bne.n	8006af6 <dir_sdi+0xea>
 8006af2:	2302      	movs	r3, #2
 8006af4:	e01a      	b.n	8006b2c <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	899b      	ldrh	r3, [r3, #12]
 8006afe:	4619      	mov	r1, r3
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b06:	441a      	add	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	899b      	ldrh	r3, [r3, #12]
 8006b16:	461a      	mov	r2, r3
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	fbb3 f0f2 	udiv	r0, r3, r2
 8006b1e:	fb02 f200 	mul.w	r2, r2, r0
 8006b22:	1a9b      	subs	r3, r3, r2
 8006b24:	18ca      	adds	r2, r1, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3718      	adds	r7, #24
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b086      	sub	sp, #24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b48:	3320      	adds	r3, #32
 8006b4a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00b      	beq.n	8006b6c <dir_next+0x38>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	2b04      	cmp	r3, #4
 8006b5a:	d102      	bne.n	8006b62 <dir_next+0x2e>
 8006b5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b60:	e001      	b.n	8006b66 <dir_next+0x32>
 8006b62:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d801      	bhi.n	8006b70 <dir_next+0x3c>
 8006b6c:	2304      	movs	r3, #4
 8006b6e:	e0c3      	b.n	8006cf8 <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	899b      	ldrh	r3, [r3, #12]
 8006b74:	461a      	mov	r2, r3
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b7c:	fb02 f201 	mul.w	r2, r2, r1
 8006b80:	1a9b      	subs	r3, r3, r2
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f040 80a5 	bne.w	8006cd2 <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8c:	1c5a      	adds	r2, r3, #1
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d10b      	bne.n	8006bb2 <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	095b      	lsrs	r3, r3, #5
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	8912      	ldrh	r2, [r2, #8]
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	f0c0 8095 	bcc.w	8006cd2 <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	639a      	str	r2, [r3, #56]	; 0x38
 8006bae:	2304      	movs	r3, #4
 8006bb0:	e0a2      	b.n	8006cf8 <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	899b      	ldrh	r3, [r3, #12]
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	8952      	ldrh	r2, [r2, #10]
 8006bc2:	3a01      	subs	r2, #1
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f040 8083 	bne.w	8006cd2 <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	4610      	mov	r0, r2
 8006bd6:	f7ff f94b 	bl	8005e70 <get_fat>
 8006bda:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d801      	bhi.n	8006be6 <dir_next+0xb2>
 8006be2:	2302      	movs	r3, #2
 8006be4:	e088      	b.n	8006cf8 <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bec:	d101      	bne.n	8006bf2 <dir_next+0xbe>
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e082      	b.n	8006cf8 <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d360      	bcc.n	8006cbe <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d104      	bne.n	8006c0c <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	639a      	str	r2, [r3, #56]	; 0x38
 8006c08:	2304      	movs	r3, #4
 8006c0a:	e075      	b.n	8006cf8 <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c12:	4619      	mov	r1, r3
 8006c14:	4610      	mov	r0, r2
 8006c16:	f7ff fdb1 	bl	800677c <create_chain>
 8006c1a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d101      	bne.n	8006c26 <dir_next+0xf2>
 8006c22:	2307      	movs	r3, #7
 8006c24:	e068      	b.n	8006cf8 <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d101      	bne.n	8006c30 <dir_next+0xfc>
 8006c2c:	2302      	movs	r3, #2
 8006c2e:	e063      	b.n	8006cf8 <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c36:	d101      	bne.n	8006c3c <dir_next+0x108>
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e05d      	b.n	8006cf8 <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	79db      	ldrb	r3, [r3, #7]
 8006c40:	f043 0304 	orr.w	r3, r3, #4
 8006c44:	b2da      	uxtb	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f7ff f80e 	bl	8005c6c <sync_window>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d001      	beq.n	8006c5a <dir_next+0x126>
 8006c56:	2301      	movs	r3, #1
 8006c58:	e04e      	b.n	8006cf8 <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	899b      	ldrh	r3, [r3, #12]
 8006c64:	461a      	mov	r2, r3
 8006c66:	2100      	movs	r1, #0
 8006c68:	f7fe fe37 	bl	80058da <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	613b      	str	r3, [r7, #16]
 8006c70:	6979      	ldr	r1, [r7, #20]
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f7ff f8dc 	bl	8005e30 <clust2sect>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	639a      	str	r2, [r3, #56]	; 0x38
 8006c7e:	e012      	b.n	8006ca6 <dir_next+0x172>
						fs->wflag = 1;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2201      	movs	r2, #1
 8006c84:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	f7fe fff0 	bl	8005c6c <sync_window>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d001      	beq.n	8006c96 <dir_next+0x162>
 8006c92:	2301      	movs	r3, #1
 8006c94:	e030      	b.n	8006cf8 <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	613b      	str	r3, [r7, #16]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca0:	1c5a      	adds	r2, r3, #1
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	639a      	str	r2, [r3, #56]	; 0x38
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	895b      	ldrh	r3, [r3, #10]
 8006caa:	461a      	mov	r2, r3
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d3e6      	bcc.n	8006c80 <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	1ad2      	subs	r2, r2, r3
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	697a      	ldr	r2, [r7, #20]
 8006cc2:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 8006cc4:	6979      	ldr	r1, [r7, #20]
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f7ff f8b2 	bl	8005e30 <clust2sect>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	899b      	ldrh	r3, [r3, #12]
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	fbb3 f0f2 	udiv	r0, r3, r2
 8006cea:	fb02 f200 	mul.w	r2, r2, r0
 8006cee:	1a9b      	subs	r3, r3, r2
 8006cf0:	18ca      	adds	r2, r1, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3718      	adds	r7, #24
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b086      	sub	sp, #24
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006d10:	2100      	movs	r1, #0
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7ff fe7a 	bl	8006a0c <dir_sdi>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006d1c:	7dfb      	ldrb	r3, [r7, #23]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d140      	bne.n	8006da4 <dir_alloc+0xa4>
		n = 0;
 8006d22:	2300      	movs	r3, #0
 8006d24:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f7fe ffe1 	bl	8005cf4 <move_window>
 8006d32:	4603      	mov	r3, r0
 8006d34:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006d36:	7dfb      	ldrb	r3, [r7, #23]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d132      	bne.n	8006da2 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	2b04      	cmp	r3, #4
 8006d42:	d108      	bne.n	8006d56 <dir_alloc+0x56>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	b25b      	sxtb	r3, r3
 8006d4c:	43db      	mvns	r3, r3
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	09db      	lsrs	r3, r3, #7
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	e00f      	b.n	8006d76 <dir_alloc+0x76>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	2be5      	cmp	r3, #229	; 0xe5
 8006d5e:	d004      	beq.n	8006d6a <dir_alloc+0x6a>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d101      	bne.n	8006d6e <dir_alloc+0x6e>
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e000      	b.n	8006d70 <dir_alloc+0x70>
 8006d6e:	2300      	movs	r3, #0
 8006d70:	f003 0301 	and.w	r3, r3, #1
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d007      	beq.n	8006d8a <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	613b      	str	r3, [r7, #16]
 8006d80:	693a      	ldr	r2, [r7, #16]
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d102      	bne.n	8006d8e <dir_alloc+0x8e>
 8006d88:	e00c      	b.n	8006da4 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006d8e:	2101      	movs	r1, #1
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f7ff fecf 	bl	8006b34 <dir_next>
 8006d96:	4603      	mov	r3, r0
 8006d98:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006d9a:	7dfb      	ldrb	r3, [r7, #23]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d0c2      	beq.n	8006d26 <dir_alloc+0x26>
 8006da0:	e000      	b.n	8006da4 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 8006da2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006da4:	7dfb      	ldrb	r3, [r7, #23]
 8006da6:	2b04      	cmp	r3, #4
 8006da8:	d101      	bne.n	8006dae <dir_alloc+0xae>
 8006daa:	2307      	movs	r3, #7
 8006dac:	75fb      	strb	r3, [r7, #23]
	return res;
 8006dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3718      	adds	r7, #24
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	331a      	adds	r3, #26
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7fe fba0 	bl	800550c <ld_word>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	2b03      	cmp	r3, #3
 8006dd6:	d109      	bne.n	8006dec <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	3314      	adds	r3, #20
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7fe fb95 	bl	800550c <ld_word>
 8006de2:	4603      	mov	r3, r0
 8006de4:	041b      	lsls	r3, r3, #16
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006dec:	68fb      	ldr	r3, [r7, #12]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b084      	sub	sp, #16
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	60f8      	str	r0, [r7, #12]
 8006dfe:	60b9      	str	r1, [r7, #8]
 8006e00:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	331a      	adds	r3, #26
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	b292      	uxth	r2, r2
 8006e0a:	4611      	mov	r1, r2
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7fe fc75 	bl	80056fc <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	2b03      	cmp	r3, #3
 8006e18:	d109      	bne.n	8006e2e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	f103 0214 	add.w	r2, r3, #20
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	0c1b      	lsrs	r3, r3, #16
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	4619      	mov	r1, r3
 8006e28:	4610      	mov	r0, r2
 8006e2a:	f7fe fc67 	bl	80056fc <st_word>
	}
}
 8006e2e:	bf00      	nop
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
	...

08006e38 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006e38:	b590      	push	{r4, r7, lr}
 8006e3a:	b087      	sub	sp, #28
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	331a      	adds	r3, #26
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7fe fb60 	bl	800550c <ld_word>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d001      	beq.n	8006e56 <cmp_lfn+0x1e>
 8006e52:	2300      	movs	r3, #0
 8006e54:	e059      	b.n	8006f0a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e5e:	1e5a      	subs	r2, r3, #1
 8006e60:	4613      	mov	r3, r2
 8006e62:	005b      	lsls	r3, r3, #1
 8006e64:	4413      	add	r3, r2
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	4413      	add	r3, r2
 8006e6a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	81fb      	strh	r3, [r7, #14]
 8006e70:	2300      	movs	r3, #0
 8006e72:	613b      	str	r3, [r7, #16]
 8006e74:	e033      	b.n	8006ede <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006e76:	4a27      	ldr	r2, [pc, #156]	; (8006f14 <cmp_lfn+0xdc>)
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	461a      	mov	r2, r3
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	4413      	add	r3, r2
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7fe fb41 	bl	800550c <ld_word>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006e8e:	89fb      	ldrh	r3, [r7, #14]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d01a      	beq.n	8006eca <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	2b0e      	cmp	r3, #14
 8006e98:	d812      	bhi.n	8006ec0 <cmp_lfn+0x88>
 8006e9a:	89bb      	ldrh	r3, [r7, #12]
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f002 fd13 	bl	80098c8 <ff_wtoupper>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	461c      	mov	r4, r3
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	1c5a      	adds	r2, r3, #1
 8006eaa:	617a      	str	r2, [r7, #20]
 8006eac:	005b      	lsls	r3, r3, #1
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	881b      	ldrh	r3, [r3, #0]
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f002 fd07 	bl	80098c8 <ff_wtoupper>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	429c      	cmp	r4, r3
 8006ebe:	d001      	beq.n	8006ec4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	e022      	b.n	8006f0a <cmp_lfn+0xd2>
			}
			wc = uc;
 8006ec4:	89bb      	ldrh	r3, [r7, #12]
 8006ec6:	81fb      	strh	r3, [r7, #14]
 8006ec8:	e006      	b.n	8006ed8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006eca:	89bb      	ldrh	r3, [r7, #12]
 8006ecc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d001      	beq.n	8006ed8 <cmp_lfn+0xa0>
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	e018      	b.n	8006f0a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	3301      	adds	r3, #1
 8006edc:	613b      	str	r3, [r7, #16]
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	2b0c      	cmp	r3, #12
 8006ee2:	d9c8      	bls.n	8006e76 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00b      	beq.n	8006f08 <cmp_lfn+0xd0>
 8006ef0:	89fb      	ldrh	r3, [r7, #14]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d008      	beq.n	8006f08 <cmp_lfn+0xd0>
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	005b      	lsls	r3, r3, #1
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	4413      	add	r3, r2
 8006efe:	881b      	ldrh	r3, [r3, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d001      	beq.n	8006f08 <cmp_lfn+0xd0>
 8006f04:	2300      	movs	r3, #0
 8006f06:	e000      	b.n	8006f0a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006f08:	2301      	movs	r3, #1
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	371c      	adds	r7, #28
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd90      	pop	{r4, r7, pc}
 8006f12:	bf00      	nop
 8006f14:	0800a3a4 	.word	0x0800a3a4

08006f18 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b086      	sub	sp, #24
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	331a      	adds	r3, #26
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7fe faf0 	bl	800550c <ld_word>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d001      	beq.n	8006f36 <pick_lfn+0x1e>
 8006f32:	2300      	movs	r3, #0
 8006f34:	e04d      	b.n	8006fd2 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f3e:	1e5a      	subs	r2, r3, #1
 8006f40:	4613      	mov	r3, r2
 8006f42:	005b      	lsls	r3, r3, #1
 8006f44:	4413      	add	r3, r2
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	4413      	add	r3, r2
 8006f4a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	81fb      	strh	r3, [r7, #14]
 8006f50:	2300      	movs	r3, #0
 8006f52:	613b      	str	r3, [r7, #16]
 8006f54:	e028      	b.n	8006fa8 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006f56:	4a21      	ldr	r2, [pc, #132]	; (8006fdc <pick_lfn+0xc4>)
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	461a      	mov	r2, r3
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	4413      	add	r3, r2
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7fe fad1 	bl	800550c <ld_word>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006f6e:	89fb      	ldrh	r3, [r7, #14]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d00f      	beq.n	8006f94 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	2b0e      	cmp	r3, #14
 8006f78:	d901      	bls.n	8006f7e <pick_lfn+0x66>
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	e029      	b.n	8006fd2 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8006f7e:	89bb      	ldrh	r3, [r7, #12]
 8006f80:	81fb      	strh	r3, [r7, #14]
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	1c5a      	adds	r2, r3, #1
 8006f86:	617a      	str	r2, [r7, #20]
 8006f88:	005b      	lsls	r3, r3, #1
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	89fa      	ldrh	r2, [r7, #14]
 8006f90:	801a      	strh	r2, [r3, #0]
 8006f92:	e006      	b.n	8006fa2 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006f94:	89bb      	ldrh	r3, [r7, #12]
 8006f96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d001      	beq.n	8006fa2 <pick_lfn+0x8a>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	e017      	b.n	8006fd2 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	613b      	str	r3, [r7, #16]
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	2b0c      	cmp	r3, #12
 8006fac:	d9d3      	bls.n	8006f56 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00a      	beq.n	8006fd0 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	2b0e      	cmp	r3, #14
 8006fbe:	d901      	bls.n	8006fc4 <pick_lfn+0xac>
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	e006      	b.n	8006fd2 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	005b      	lsls	r3, r3, #1
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	4413      	add	r3, r2
 8006fcc:	2200      	movs	r2, #0
 8006fce:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8006fd0:	2301      	movs	r3, #1
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3718      	adds	r7, #24
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	0800a3a4 	.word	0x0800a3a4

08006fe0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b088      	sub	sp, #32
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	4611      	mov	r1, r2
 8006fec:	461a      	mov	r2, r3
 8006fee:	460b      	mov	r3, r1
 8006ff0:	71fb      	strb	r3, [r7, #7]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	330d      	adds	r3, #13
 8006ffa:	79ba      	ldrb	r2, [r7, #6]
 8006ffc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	330b      	adds	r3, #11
 8007002:	220f      	movs	r2, #15
 8007004:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	330c      	adds	r3, #12
 800700a:	2200      	movs	r2, #0
 800700c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	331a      	adds	r3, #26
 8007012:	2100      	movs	r1, #0
 8007014:	4618      	mov	r0, r3
 8007016:	f7fe fb71 	bl	80056fc <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800701a:	79fb      	ldrb	r3, [r7, #7]
 800701c:	1e5a      	subs	r2, r3, #1
 800701e:	4613      	mov	r3, r2
 8007020:	005b      	lsls	r3, r3, #1
 8007022:	4413      	add	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4413      	add	r3, r2
 8007028:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800702a:	2300      	movs	r3, #0
 800702c:	82fb      	strh	r3, [r7, #22]
 800702e:	2300      	movs	r3, #0
 8007030:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007032:	8afb      	ldrh	r3, [r7, #22]
 8007034:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007038:	4293      	cmp	r3, r2
 800703a:	d007      	beq.n	800704c <put_lfn+0x6c>
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	1c5a      	adds	r2, r3, #1
 8007040:	61fa      	str	r2, [r7, #28]
 8007042:	005b      	lsls	r3, r3, #1
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	4413      	add	r3, r2
 8007048:	881b      	ldrh	r3, [r3, #0]
 800704a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800704c:	4a17      	ldr	r2, [pc, #92]	; (80070ac <put_lfn+0xcc>)
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	4413      	add	r3, r2
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	461a      	mov	r2, r3
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	4413      	add	r3, r2
 800705a:	8afa      	ldrh	r2, [r7, #22]
 800705c:	4611      	mov	r1, r2
 800705e:	4618      	mov	r0, r3
 8007060:	f7fe fb4c 	bl	80056fc <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007064:	8afb      	ldrh	r3, [r7, #22]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d102      	bne.n	8007070 <put_lfn+0x90>
 800706a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800706e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	3301      	adds	r3, #1
 8007074:	61bb      	str	r3, [r7, #24]
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	2b0c      	cmp	r3, #12
 800707a:	d9da      	bls.n	8007032 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800707c:	8afb      	ldrh	r3, [r7, #22]
 800707e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007082:	4293      	cmp	r3, r2
 8007084:	d006      	beq.n	8007094 <put_lfn+0xb4>
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	005b      	lsls	r3, r3, #1
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	4413      	add	r3, r2
 800708e:	881b      	ldrh	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d103      	bne.n	800709c <put_lfn+0xbc>
 8007094:	79fb      	ldrb	r3, [r7, #7]
 8007096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800709a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	79fa      	ldrb	r2, [r7, #7]
 80070a0:	701a      	strb	r2, [r3, #0]
}
 80070a2:	bf00      	nop
 80070a4:	3720      	adds	r7, #32
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	0800a3a4 	.word	0x0800a3a4

080070b0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b08c      	sub	sp, #48	; 0x30
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	607a      	str	r2, [r7, #4]
 80070bc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80070be:	220b      	movs	r2, #11
 80070c0:	68b9      	ldr	r1, [r7, #8]
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f7fe fbe8 	bl	8005898 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	2b05      	cmp	r3, #5
 80070cc:	d929      	bls.n	8007122 <gen_numname+0x72>
		sr = seq;
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80070d2:	e020      	b.n	8007116 <gen_numname+0x66>
			wc = *lfn++;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	1c9a      	adds	r2, r3, #2
 80070d8:	607a      	str	r2, [r7, #4]
 80070da:	881b      	ldrh	r3, [r3, #0]
 80070dc:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80070de:	2300      	movs	r3, #0
 80070e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80070e2:	e015      	b.n	8007110 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	005a      	lsls	r2, r3, #1
 80070e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80070ea:	f003 0301 	and.w	r3, r3, #1
 80070ee:	4413      	add	r3, r2
 80070f0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80070f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80070f4:	085b      	lsrs	r3, r3, #1
 80070f6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d003      	beq.n	800710a <gen_numname+0x5a>
 8007102:	69fa      	ldr	r2, [r7, #28]
 8007104:	4b31      	ldr	r3, [pc, #196]	; (80071cc <gen_numname+0x11c>)
 8007106:	4053      	eors	r3, r2
 8007108:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800710a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710c:	3301      	adds	r3, #1
 800710e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007112:	2b0f      	cmp	r3, #15
 8007114:	d9e6      	bls.n	80070e4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	881b      	ldrh	r3, [r3, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d1da      	bne.n	80070d4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8007122:	2307      	movs	r3, #7
 8007124:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	b2db      	uxtb	r3, r3
 800712a:	f003 030f 	and.w	r3, r3, #15
 800712e:	b2db      	uxtb	r3, r3
 8007130:	3330      	adds	r3, #48	; 0x30
 8007132:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8007136:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800713a:	2b39      	cmp	r3, #57	; 0x39
 800713c:	d904      	bls.n	8007148 <gen_numname+0x98>
 800713e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007142:	3307      	adds	r3, #7
 8007144:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8007148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714a:	1e5a      	subs	r2, r3, #1
 800714c:	62ba      	str	r2, [r7, #40]	; 0x28
 800714e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007152:	4413      	add	r3, r2
 8007154:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007158:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	091b      	lsrs	r3, r3, #4
 8007160:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d1de      	bne.n	8007126 <gen_numname+0x76>
	ns[i] = '~';
 8007168:	f107 0214 	add.w	r2, r7, #20
 800716c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716e:	4413      	add	r3, r2
 8007170:	227e      	movs	r2, #126	; 0x7e
 8007172:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007174:	2300      	movs	r3, #0
 8007176:	627b      	str	r3, [r7, #36]	; 0x24
 8007178:	e002      	b.n	8007180 <gen_numname+0xd0>
 800717a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717c:	3301      	adds	r3, #1
 800717e:	627b      	str	r3, [r7, #36]	; 0x24
 8007180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007184:	429a      	cmp	r2, r3
 8007186:	d205      	bcs.n	8007194 <gen_numname+0xe4>
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718c:	4413      	add	r3, r2
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	2b20      	cmp	r3, #32
 8007192:	d1f2      	bne.n	800717a <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007196:	2b07      	cmp	r3, #7
 8007198:	d808      	bhi.n	80071ac <gen_numname+0xfc>
 800719a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719c:	1c5a      	adds	r2, r3, #1
 800719e:	62ba      	str	r2, [r7, #40]	; 0x28
 80071a0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80071a4:	4413      	add	r3, r2
 80071a6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80071aa:	e000      	b.n	80071ae <gen_numname+0xfe>
 80071ac:	2120      	movs	r1, #32
 80071ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b0:	1c5a      	adds	r2, r3, #1
 80071b2:	627a      	str	r2, [r7, #36]	; 0x24
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	4413      	add	r3, r2
 80071b8:	460a      	mov	r2, r1
 80071ba:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80071bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071be:	2b07      	cmp	r3, #7
 80071c0:	d9e8      	bls.n	8007194 <gen_numname+0xe4>
}
 80071c2:	bf00      	nop
 80071c4:	3730      	adds	r7, #48	; 0x30
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	00011021 	.word	0x00011021

080071d0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80071d8:	2300      	movs	r3, #0
 80071da:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80071dc:	230b      	movs	r3, #11
 80071de:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80071e0:	7bfb      	ldrb	r3, [r7, #15]
 80071e2:	b2da      	uxtb	r2, r3
 80071e4:	0852      	lsrs	r2, r2, #1
 80071e6:	01db      	lsls	r3, r3, #7
 80071e8:	4313      	orrs	r3, r2
 80071ea:	b2da      	uxtb	r2, r3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	1c59      	adds	r1, r3, #1
 80071f0:	6079      	str	r1, [r7, #4]
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	4413      	add	r3, r2
 80071f6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	3b01      	subs	r3, #1
 80071fc:	60bb      	str	r3, [r7, #8]
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1ed      	bne.n	80071e0 <sum_sfn+0x10>
	return sum;
 8007204:	7bfb      	ldrb	r3, [r7, #15]
}
 8007206:	4618      	mov	r0, r3
 8007208:	3714      	adds	r7, #20
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr

08007212 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 8007212:	b480      	push	{r7}
 8007214:	b087      	sub	sp, #28
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	3301      	adds	r3, #1
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	3301      	adds	r3, #1
 8007222:	015b      	lsls	r3, r3, #5
 8007224:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 8007226:	2300      	movs	r3, #0
 8007228:	827b      	strh	r3, [r7, #18]
 800722a:	2300      	movs	r3, #0
 800722c:	617b      	str	r3, [r7, #20]
 800722e:	e018      	b.n	8007262 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	2b02      	cmp	r3, #2
 8007234:	d103      	bne.n	800723e <xdir_sum+0x2c>
			i++;
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	3301      	adds	r3, #1
 800723a:	617b      	str	r3, [r7, #20]
 800723c:	e00e      	b.n	800725c <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800723e:	8a7b      	ldrh	r3, [r7, #18]
 8007240:	03db      	lsls	r3, r3, #15
 8007242:	b29a      	uxth	r2, r3
 8007244:	8a7b      	ldrh	r3, [r7, #18]
 8007246:	085b      	lsrs	r3, r3, #1
 8007248:	b29b      	uxth	r3, r3
 800724a:	4413      	add	r3, r2
 800724c:	b29a      	uxth	r2, r3
 800724e:	6879      	ldr	r1, [r7, #4]
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	440b      	add	r3, r1
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	b29b      	uxth	r3, r3
 8007258:	4413      	add	r3, r2
 800725a:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	3301      	adds	r3, #1
 8007260:	617b      	str	r3, [r7, #20]
 8007262:	697a      	ldr	r2, [r7, #20]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	429a      	cmp	r2, r3
 8007268:	d3e2      	bcc.n	8007230 <xdir_sum+0x1e>
		}
	}
	return sum;
 800726a:	8a7b      	ldrh	r3, [r7, #18]
}
 800726c:	4618      	mov	r0, r3
 800726e:	371c      	adds	r7, #28
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 8007280:	2300      	movs	r3, #0
 8007282:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 8007284:	e01f      	b.n	80072c6 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 8007286:	89bb      	ldrh	r3, [r7, #12]
 8007288:	4618      	mov	r0, r3
 800728a:	f002 fb1d 	bl	80098c8 <ff_wtoupper>
 800728e:	4603      	mov	r3, r0
 8007290:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8007292:	89fb      	ldrh	r3, [r7, #14]
 8007294:	03db      	lsls	r3, r3, #15
 8007296:	b29a      	uxth	r2, r3
 8007298:	89fb      	ldrh	r3, [r7, #14]
 800729a:	085b      	lsrs	r3, r3, #1
 800729c:	b29b      	uxth	r3, r3
 800729e:	4413      	add	r3, r2
 80072a0:	b29a      	uxth	r2, r3
 80072a2:	89bb      	ldrh	r3, [r7, #12]
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	4413      	add	r3, r2
 80072aa:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 80072ac:	89fb      	ldrh	r3, [r7, #14]
 80072ae:	03db      	lsls	r3, r3, #15
 80072b0:	b29a      	uxth	r2, r3
 80072b2:	89fb      	ldrh	r3, [r7, #14]
 80072b4:	085b      	lsrs	r3, r3, #1
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	4413      	add	r3, r2
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	89bb      	ldrh	r3, [r7, #12]
 80072be:	0a1b      	lsrs	r3, r3, #8
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	4413      	add	r3, r2
 80072c4:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	1c9a      	adds	r2, r3, #2
 80072ca:	607a      	str	r2, [r7, #4]
 80072cc:	881b      	ldrh	r3, [r3, #0]
 80072ce:	81bb      	strh	r3, [r7, #12]
 80072d0:	89bb      	ldrh	r3, [r7, #12]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d1d7      	bne.n	8007286 <xname_sum+0xe>
	}
	return sum;
 80072d6:	89fb      	ldrh	r3, [r7, #14]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3710      	adds	r7, #16
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 80072e0:	b590      	push	{r4, r7, lr}
 80072e2:	b087      	sub	sp, #28
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f8:	4619      	mov	r1, r3
 80072fa:	4610      	mov	r0, r2
 80072fc:	f7fe fcfa 	bl	8005cf4 <move_window>
 8007300:	4603      	mov	r3, r0
 8007302:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8007304:	7bfb      	ldrb	r3, [r7, #15]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d001      	beq.n	800730e <load_xdir+0x2e>
 800730a:	7bfb      	ldrb	r3, [r7, #15]
 800730c:	e09d      	b.n	800744a <load_xdir+0x16a>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	2b85      	cmp	r3, #133	; 0x85
 8007316:	d001      	beq.n	800731c <load_xdir+0x3c>
 8007318:	2302      	movs	r3, #2
 800731a:	e096      	b.n	800744a <load_xdir+0x16a>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007320:	2220      	movs	r2, #32
 8007322:	4619      	mov	r1, r3
 8007324:	6938      	ldr	r0, [r7, #16]
 8007326:	f7fe fab7 	bl	8005898 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	3301      	adds	r3, #1
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	3301      	adds	r3, #1
 8007332:	015b      	lsls	r3, r3, #5
 8007334:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	2b5f      	cmp	r3, #95	; 0x5f
 800733a:	d903      	bls.n	8007344 <load_xdir+0x64>
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8007342:	d901      	bls.n	8007348 <load_xdir+0x68>
 8007344:	2302      	movs	r3, #2
 8007346:	e080      	b.n	800744a <load_xdir+0x16a>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 8007348:	2100      	movs	r1, #0
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f7ff fbf2 	bl	8006b34 <dir_next>
 8007350:	4603      	mov	r3, r0
 8007352:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8007354:	7bfb      	ldrb	r3, [r7, #15]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d001      	beq.n	800735e <load_xdir+0x7e>
 800735a:	7bfb      	ldrb	r3, [r7, #15]
 800735c:	e075      	b.n	800744a <load_xdir+0x16a>
	res = move_window(dp->obj.fs, dp->sect);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007366:	4619      	mov	r1, r3
 8007368:	4610      	mov	r0, r2
 800736a:	f7fe fcc3 	bl	8005cf4 <move_window>
 800736e:	4603      	mov	r3, r0
 8007370:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8007372:	7bfb      	ldrb	r3, [r7, #15]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d001      	beq.n	800737c <load_xdir+0x9c>
 8007378:	7bfb      	ldrb	r3, [r7, #15]
 800737a:	e066      	b.n	800744a <load_xdir+0x16a>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	2bc0      	cmp	r3, #192	; 0xc0
 8007384:	d001      	beq.n	800738a <load_xdir+0xaa>
 8007386:	2302      	movs	r3, #2
 8007388:	e05f      	b.n	800744a <load_xdir+0x16a>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	f103 0020 	add.w	r0, r3, #32
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007394:	2220      	movs	r2, #32
 8007396:	4619      	mov	r1, r3
 8007398:	f7fe fa7e 	bl	8005898 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	3323      	adds	r3, #35	; 0x23
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	332c      	adds	r3, #44	; 0x2c
 80073a4:	4a2b      	ldr	r2, [pc, #172]	; (8007454 <load_xdir+0x174>)
 80073a6:	fba2 2303 	umull	r2, r3, r2, r3
 80073aa:	08db      	lsrs	r3, r3, #3
 80073ac:	015b      	lsls	r3, r3, #5
 80073ae:	68ba      	ldr	r2, [r7, #8]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d201      	bcs.n	80073b8 <load_xdir+0xd8>
 80073b4:	2302      	movs	r3, #2
 80073b6:	e048      	b.n	800744a <load_xdir+0x16a>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 80073b8:	2340      	movs	r3, #64	; 0x40
 80073ba:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 80073bc:	2100      	movs	r1, #0
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7ff fbb8 	bl	8006b34 <dir_next>
 80073c4:	4603      	mov	r3, r0
 80073c6:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 80073c8:	7bfb      	ldrb	r3, [r7, #15]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d001      	beq.n	80073d2 <load_xdir+0xf2>
 80073ce:	7bfb      	ldrb	r3, [r7, #15]
 80073d0:	e03b      	b.n	800744a <load_xdir+0x16a>
		res = move_window(dp->obj.fs, dp->sect);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073da:	4619      	mov	r1, r3
 80073dc:	4610      	mov	r0, r2
 80073de:	f7fe fc89 	bl	8005cf4 <move_window>
 80073e2:	4603      	mov	r3, r0
 80073e4:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 80073e6:	7bfb      	ldrb	r3, [r7, #15]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d001      	beq.n	80073f0 <load_xdir+0x110>
 80073ec:	7bfb      	ldrb	r3, [r7, #15]
 80073ee:	e02c      	b.n	800744a <load_xdir+0x16a>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	2bc1      	cmp	r3, #193	; 0xc1
 80073f8:	d001      	beq.n	80073fe <load_xdir+0x11e>
 80073fa:	2302      	movs	r3, #2
 80073fc:	e025      	b.n	800744a <load_xdir+0x16a>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	2b5f      	cmp	r3, #95	; 0x5f
 8007402:	d808      	bhi.n	8007416 <load_xdir+0x136>
 8007404:	693a      	ldr	r2, [r7, #16]
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	18d0      	adds	r0, r2, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800740e:	2220      	movs	r2, #32
 8007410:	4619      	mov	r1, r3
 8007412:	f7fe fa41 	bl	8005898 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	3320      	adds	r3, #32
 800741a:	617b      	str	r3, [r7, #20]
 800741c:	697a      	ldr	r2, [r7, #20]
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	429a      	cmp	r2, r3
 8007422:	d3cb      	bcc.n	80073bc <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	2b60      	cmp	r3, #96	; 0x60
 8007428:	d80e      	bhi.n	8007448 <load_xdir+0x168>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800742a:	6938      	ldr	r0, [r7, #16]
 800742c:	f7ff fef1 	bl	8007212 <xdir_sum>
 8007430:	4603      	mov	r3, r0
 8007432:	461c      	mov	r4, r3
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	3302      	adds	r3, #2
 8007438:	4618      	mov	r0, r3
 800743a:	f7fe f867 	bl	800550c <ld_word>
 800743e:	4603      	mov	r3, r0
 8007440:	429c      	cmp	r4, r3
 8007442:	d001      	beq.n	8007448 <load_xdir+0x168>
 8007444:	2302      	movs	r3, #2
 8007446:	e000      	b.n	800744a <load_xdir+0x16a>
	}
	return FR_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	371c      	adds	r7, #28
 800744e:	46bd      	mov	sp, r7
 8007450:	bd90      	pop	{r4, r7, pc}
 8007452:	bf00      	nop
 8007454:	88888889 	.word	0x88888889

08007458 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 8007458:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800745c:	b084      	sub	sp, #16
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
 8007462:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	601a      	str	r2, [r3, #0]
	dp->obj.sclust = obj->c_scl;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	6a1a      	ldr	r2, [r3, #32]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	609a      	str	r2, [r3, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007478:	b2da      	uxtb	r2, r3
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	71da      	strb	r2, [r3, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007482:	469b      	mov	fp, r3
 8007484:	f04f 0c00 	mov.w	ip, #0
 8007488:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 800748c:	f04f 0200 	mov.w	r2, #0
 8007490:	ea0b 0301 	and.w	r3, fp, r1
 8007494:	ea0c 0402 	and.w	r4, ip, r2
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	dp->blk_ofs = obj->c_ofs;
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074aa:	4619      	mov	r1, r3
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f7ff faad 	bl	8006a0c <dir_sdi>
 80074b2:	4603      	mov	r3, r0
 80074b4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80074b6:	7bfb      	ldrb	r3, [r7, #15]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d104      	bne.n	80074c6 <load_obj_dir+0x6e>
		res = load_xdir(dp);		/* Load the object's entry block */
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f7ff ff0f 	bl	80072e0 <load_xdir>
 80074c2:	4603      	mov	r3, r0
 80074c4:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 80074c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080074d2 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 80074d2:	b590      	push	{r4, r7, lr}
 80074d4:	b087      	sub	sp, #28
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	695b      	ldr	r3, [r3, #20]
 80074e0:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	1c9c      	adds	r4, r3, #2
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	f7ff fe93 	bl	8007212 <xdir_sum>
 80074ec:	4603      	mov	r3, r0
 80074ee:	4619      	mov	r1, r3
 80074f0:	4620      	mov	r0, r4
 80074f2:	f7fe f903 	bl	80056fc <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	3301      	adds	r3, #1
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	3301      	adds	r3, #1
 80074fe:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007504:	4619      	mov	r1, r3
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f7ff fa80 	bl	8006a0c <dir_sdi>
 800750c:	4603      	mov	r3, r0
 800750e:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8007510:	e026      	b.n	8007560 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751a:	4619      	mov	r1, r3
 800751c:	4610      	mov	r0, r2
 800751e:	f7fe fbe9 	bl	8005cf4 <move_window>
 8007522:	4603      	mov	r3, r0
 8007524:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007526:	7dfb      	ldrb	r3, [r7, #23]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d11d      	bne.n	8007568 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007530:	2220      	movs	r2, #32
 8007532:	68f9      	ldr	r1, [r7, #12]
 8007534:	4618      	mov	r0, r3
 8007536:	f7fe f9af 	bl	8005898 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2201      	movs	r2, #1
 8007540:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	3b01      	subs	r3, #1
 8007546:	613b      	str	r3, [r7, #16]
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00e      	beq.n	800756c <store_xdir+0x9a>
		dirb += SZDIRE;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	3320      	adds	r3, #32
 8007552:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 8007554:	2100      	movs	r1, #0
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f7ff faec 	bl	8006b34 <dir_next>
 800755c:	4603      	mov	r3, r0
 800755e:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8007560:	7dfb      	ldrb	r3, [r7, #23]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d0d5      	beq.n	8007512 <store_xdir+0x40>
 8007566:	e002      	b.n	800756e <store_xdir+0x9c>
		if (res != FR_OK) break;
 8007568:	bf00      	nop
 800756a:	e000      	b.n	800756e <store_xdir+0x9c>
		if (--nent == 0) break;
 800756c:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800756e:	7dfb      	ldrb	r3, [r7, #23]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d002      	beq.n	800757a <store_xdir+0xa8>
 8007574:	7dfb      	ldrb	r3, [r7, #23]
 8007576:	2b01      	cmp	r3, #1
 8007578:	d101      	bne.n	800757e <store_xdir+0xac>
 800757a:	7dfb      	ldrb	r3, [r7, #23]
 800757c:	e000      	b.n	8007580 <store_xdir+0xae>
 800757e:	2302      	movs	r3, #2
}
 8007580:	4618      	mov	r0, r3
 8007582:	371c      	adds	r7, #28
 8007584:	46bd      	mov	sp, r7
 8007586:	bd90      	pop	{r4, r7, pc}

08007588 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 8007588:	b590      	push	{r4, r7, lr}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 8007592:	2240      	movs	r2, #64	; 0x40
 8007594:	2100      	movs	r1, #0
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f7fe f99f 	bl	80058da <mem_set>
	dirb[XDIR_Type] = 0x85;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2285      	movs	r2, #133	; 0x85
 80075a0:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	3320      	adds	r3, #32
 80075a6:	22c0      	movs	r2, #192	; 0xc0
 80075a8:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 80075aa:	2300      	movs	r3, #0
 80075ac:	72bb      	strb	r3, [r7, #10]
 80075ae:	2301      	movs	r3, #1
 80075b0:	72fb      	strb	r3, [r7, #11]
 80075b2:	2301      	movs	r3, #1
 80075b4:	813b      	strh	r3, [r7, #8]
 80075b6:	2340      	movs	r3, #64	; 0x40
 80075b8:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	1c5a      	adds	r2, r3, #1
 80075be:	60fa      	str	r2, [r7, #12]
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	4413      	add	r3, r2
 80075c4:	22c1      	movs	r2, #193	; 0xc1
 80075c6:	701a      	strb	r2, [r3, #0]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	1c5a      	adds	r2, r3, #1
 80075cc:	60fa      	str	r2, [r7, #12]
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	4413      	add	r3, r2
 80075d2:	2200      	movs	r2, #0
 80075d4:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 80075d6:	893b      	ldrh	r3, [r7, #8]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00b      	beq.n	80075f4 <create_xdir+0x6c>
 80075dc:	7abb      	ldrb	r3, [r7, #10]
 80075de:	005b      	lsls	r3, r3, #1
 80075e0:	683a      	ldr	r2, [r7, #0]
 80075e2:	4413      	add	r3, r2
 80075e4:	881b      	ldrh	r3, [r3, #0]
 80075e6:	813b      	strh	r3, [r7, #8]
 80075e8:	893b      	ldrh	r3, [r7, #8]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d002      	beq.n	80075f4 <create_xdir+0x6c>
 80075ee:	7abb      	ldrb	r3, [r7, #10]
 80075f0:	3301      	adds	r3, #1
 80075f2:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	4413      	add	r3, r2
 80075fa:	893a      	ldrh	r2, [r7, #8]
 80075fc:	4611      	mov	r1, r2
 80075fe:	4618      	mov	r0, r3
 8007600:	f7fe f87c 	bl	80056fc <st_word>
		} while ((i += 2) % SZDIRE != 0);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	3302      	adds	r3, #2
 8007608:	60fb      	str	r3, [r7, #12]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f003 031f 	and.w	r3, r3, #31
 8007610:	2b00      	cmp	r3, #0
 8007612:	d1e0      	bne.n	80075d6 <create_xdir+0x4e>
		nb++;
 8007614:	7afb      	ldrb	r3, [r7, #11]
 8007616:	3301      	adds	r3, #1
 8007618:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800761a:	7abb      	ldrb	r3, [r7, #10]
 800761c:	005b      	lsls	r3, r3, #1
 800761e:	683a      	ldr	r2, [r7, #0]
 8007620:	4413      	add	r3, r2
 8007622:	881b      	ldrh	r3, [r3, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d1c8      	bne.n	80075ba <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	3323      	adds	r3, #35	; 0x23
 800762c:	7aba      	ldrb	r2, [r7, #10]
 800762e:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	3301      	adds	r3, #1
 8007634:	7afa      	ldrb	r2, [r7, #11]
 8007636:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800763e:	6838      	ldr	r0, [r7, #0]
 8007640:	f7ff fe1a 	bl	8007278 <xname_sum>
 8007644:	4603      	mov	r3, r0
 8007646:	4619      	mov	r1, r3
 8007648:	4620      	mov	r0, r4
 800764a:	f7fe f857 	bl	80056fc <st_word>
}
 800764e:	bf00      	nop
 8007650:	3714      	adds	r7, #20
 8007652:	46bd      	mov	sp, r7
 8007654:	bd90      	pop	{r4, r7, pc}

08007656 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8007656:	b580      	push	{r7, lr}
 8007658:	b086      	sub	sp, #24
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
 800765e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8007660:	2304      	movs	r3, #4
 8007662:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800766a:	23ff      	movs	r3, #255	; 0xff
 800766c:	757b      	strb	r3, [r7, #21]
 800766e:	23ff      	movs	r3, #255	; 0xff
 8007670:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8007672:	e09f      	b.n	80077b4 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007678:	4619      	mov	r1, r3
 800767a:	6938      	ldr	r0, [r7, #16]
 800767c:	f7fe fb3a 	bl	8005cf4 <move_window>
 8007680:	4603      	mov	r3, r0
 8007682:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007684:	7dfb      	ldrb	r3, [r7, #23]
 8007686:	2b00      	cmp	r3, #0
 8007688:	f040 809a 	bne.w	80077c0 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8007694:	7dbb      	ldrb	r3, [r7, #22]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d102      	bne.n	80076a0 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800769a:	2304      	movs	r3, #4
 800769c:	75fb      	strb	r3, [r7, #23]
 800769e:	e096      	b.n	80077ce <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	2b04      	cmp	r3, #4
 80076a6:	d118      	bne.n	80076da <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 80076a8:	7dbb      	ldrb	r3, [r7, #22]
 80076aa:	2b85      	cmp	r3, #133	; 0x85
 80076ac:	d179      	bne.n	80077a2 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f7ff fe12 	bl	80072e0 <load_xdir>
 80076bc:	4603      	mov	r3, r0
 80076be:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 80076c0:	7dfb      	ldrb	r3, [r7, #23]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d17e      	bne.n	80077c4 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	695b      	ldr	r3, [r3, #20]
 80076ca:	3304      	adds	r3, #4
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076d2:	b2da      	uxtb	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	719a      	strb	r2, [r3, #6]
					}
					break;
 80076d8:	e074      	b.n	80077c4 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076de:	330b      	adds	r3, #11
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076e6:	73fb      	strb	r3, [r7, #15]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	7bfa      	ldrb	r2, [r7, #15]
 80076ec:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80076ee:	7dbb      	ldrb	r3, [r7, #22]
 80076f0:	2be5      	cmp	r3, #229	; 0xe5
 80076f2:	d00e      	beq.n	8007712 <dir_read+0xbc>
 80076f4:	7dbb      	ldrb	r3, [r7, #22]
 80076f6:	2b2e      	cmp	r3, #46	; 0x2e
 80076f8:	d00b      	beq.n	8007712 <dir_read+0xbc>
 80076fa:	7bfb      	ldrb	r3, [r7, #15]
 80076fc:	f023 0320 	bic.w	r3, r3, #32
 8007700:	2b08      	cmp	r3, #8
 8007702:	bf0c      	ite	eq
 8007704:	2301      	moveq	r3, #1
 8007706:	2300      	movne	r3, #0
 8007708:	b2db      	uxtb	r3, r3
 800770a:	461a      	mov	r2, r3
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	4293      	cmp	r3, r2
 8007710:	d002      	beq.n	8007718 <dir_read+0xc2>
				ord = 0xFF;
 8007712:	23ff      	movs	r3, #255	; 0xff
 8007714:	757b      	strb	r3, [r7, #21]
 8007716:	e044      	b.n	80077a2 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8007718:	7bfb      	ldrb	r3, [r7, #15]
 800771a:	2b0f      	cmp	r3, #15
 800771c:	d12f      	bne.n	800777e <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800771e:	7dbb      	ldrb	r3, [r7, #22]
 8007720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007724:	2b00      	cmp	r3, #0
 8007726:	d00d      	beq.n	8007744 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800772c:	7b5b      	ldrb	r3, [r3, #13]
 800772e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8007730:	7dbb      	ldrb	r3, [r7, #22]
 8007732:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007736:	75bb      	strb	r3, [r7, #22]
 8007738:	7dbb      	ldrb	r3, [r7, #22]
 800773a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007744:	7dba      	ldrb	r2, [r7, #22]
 8007746:	7d7b      	ldrb	r3, [r7, #21]
 8007748:	429a      	cmp	r2, r3
 800774a:	d115      	bne.n	8007778 <dir_read+0x122>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007750:	330d      	adds	r3, #13
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	7d3a      	ldrb	r2, [r7, #20]
 8007756:	429a      	cmp	r2, r3
 8007758:	d10e      	bne.n	8007778 <dir_read+0x122>
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	691a      	ldr	r2, [r3, #16]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007762:	4619      	mov	r1, r3
 8007764:	4610      	mov	r0, r2
 8007766:	f7ff fbd7 	bl	8006f18 <pick_lfn>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d003      	beq.n	8007778 <dir_read+0x122>
 8007770:	7d7b      	ldrb	r3, [r7, #21]
 8007772:	3b01      	subs	r3, #1
 8007774:	b2db      	uxtb	r3, r3
 8007776:	e000      	b.n	800777a <dir_read+0x124>
 8007778:	23ff      	movs	r3, #255	; 0xff
 800777a:	757b      	strb	r3, [r7, #21]
 800777c:	e011      	b.n	80077a2 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800777e:	7d7b      	ldrb	r3, [r7, #21]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d109      	bne.n	8007798 <dir_read+0x142>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007788:	4618      	mov	r0, r3
 800778a:	f7ff fd21 	bl	80071d0 <sum_sfn>
 800778e:	4603      	mov	r3, r0
 8007790:	461a      	mov	r2, r3
 8007792:	7d3b      	ldrb	r3, [r7, #20]
 8007794:	4293      	cmp	r3, r2
 8007796:	d017      	beq.n	80077c8 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f04f 32ff 	mov.w	r2, #4294967295
 800779e:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 80077a0:	e012      	b.n	80077c8 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80077a2:	2100      	movs	r1, #0
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f7ff f9c5 	bl	8006b34 <dir_next>
 80077aa:	4603      	mov	r3, r0
 80077ac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80077ae:	7dfb      	ldrb	r3, [r7, #23]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d10b      	bne.n	80077cc <dir_read+0x176>
	while (dp->sect) {
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f47f af5b 	bne.w	8007674 <dir_read+0x1e>
 80077be:	e006      	b.n	80077ce <dir_read+0x178>
		if (res != FR_OK) break;
 80077c0:	bf00      	nop
 80077c2:	e004      	b.n	80077ce <dir_read+0x178>
					break;
 80077c4:	bf00      	nop
 80077c6:	e002      	b.n	80077ce <dir_read+0x178>
					break;
 80077c8:	bf00      	nop
 80077ca:	e000      	b.n	80077ce <dir_read+0x178>
		if (res != FR_OK) break;
 80077cc:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80077ce:	7dfb      	ldrb	r3, [r7, #23]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d002      	beq.n	80077da <dir_read+0x184>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 80077da:	7dfb      	ldrb	r3, [r7, #23]
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3718      	adds	r7, #24
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80077e4:	b590      	push	{r4, r7, lr}
 80077e6:	b089      	sub	sp, #36	; 0x24
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80077f2:	2100      	movs	r1, #0
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f7ff f909 	bl	8006a0c <dir_sdi>
 80077fa:	4603      	mov	r3, r0
 80077fc:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 80077fe:	7ffb      	ldrb	r3, [r7, #31]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d001      	beq.n	8007808 <dir_find+0x24>
 8007804:	7ffb      	ldrb	r3, [r7, #31]
 8007806:	e119      	b.n	8007a3c <dir_find+0x258>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	2b04      	cmp	r3, #4
 800780e:	d16b      	bne.n	80078e8 <dir_find+0x104>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	691b      	ldr	r3, [r3, #16]
 8007814:	4618      	mov	r0, r3
 8007816:	f7ff fd2f 	bl	8007278 <xname_sum>
 800781a:	4603      	mov	r3, r0
 800781c:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800781e:	e056      	b.n	80078ce <dir_find+0xea>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	695b      	ldr	r3, [r3, #20]
 8007824:	3323      	adds	r3, #35	; 0x23
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	2b0f      	cmp	r3, #15
 800782a:	d900      	bls.n	800782e <dir_find+0x4a>
 800782c:	e04f      	b.n	80078ce <dir_find+0xea>
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	695b      	ldr	r3, [r3, #20]
 8007832:	3324      	adds	r3, #36	; 0x24
 8007834:	4618      	mov	r0, r3
 8007836:	f7fd fe69 	bl	800550c <ld_word>
 800783a:	4603      	mov	r3, r0
 800783c:	461a      	mov	r2, r3
 800783e:	893b      	ldrh	r3, [r7, #8]
 8007840:	4293      	cmp	r3, r2
 8007842:	d000      	beq.n	8007846 <dir_find+0x62>
 8007844:	e043      	b.n	80078ce <dir_find+0xea>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	695b      	ldr	r3, [r3, #20]
 800784a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800784e:	76fb      	strb	r3, [r7, #27]
 8007850:	2340      	movs	r3, #64	; 0x40
 8007852:	617b      	str	r3, [r7, #20]
 8007854:	2300      	movs	r3, #0
 8007856:	613b      	str	r3, [r7, #16]
 8007858:	e029      	b.n	80078ae <dir_find+0xca>
				if ((di % SZDIRE) == 0) di += 2;
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	f003 031f 	and.w	r3, r3, #31
 8007860:	2b00      	cmp	r3, #0
 8007862:	d102      	bne.n	800786a <dir_find+0x86>
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	3302      	adds	r3, #2
 8007868:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	695a      	ldr	r2, [r3, #20]
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	4413      	add	r3, r2
 8007872:	4618      	mov	r0, r3
 8007874:	f7fd fe4a 	bl	800550c <ld_word>
 8007878:	4603      	mov	r3, r0
 800787a:	4618      	mov	r0, r3
 800787c:	f002 f824 	bl	80098c8 <ff_wtoupper>
 8007880:	4603      	mov	r3, r0
 8007882:	461c      	mov	r4, r3
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	691a      	ldr	r2, [r3, #16]
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	005b      	lsls	r3, r3, #1
 800788c:	4413      	add	r3, r2
 800788e:	881b      	ldrh	r3, [r3, #0]
 8007890:	4618      	mov	r0, r3
 8007892:	f002 f819 	bl	80098c8 <ff_wtoupper>
 8007896:	4603      	mov	r3, r0
 8007898:	429c      	cmp	r4, r3
 800789a:	d10c      	bne.n	80078b6 <dir_find+0xd2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800789c:	7efb      	ldrb	r3, [r7, #27]
 800789e:	3b01      	subs	r3, #1
 80078a0:	76fb      	strb	r3, [r7, #27]
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	3302      	adds	r3, #2
 80078a6:	617b      	str	r3, [r7, #20]
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	3301      	adds	r3, #1
 80078ac:	613b      	str	r3, [r7, #16]
 80078ae:	7efb      	ldrb	r3, [r7, #27]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1d2      	bne.n	800785a <dir_find+0x76>
 80078b4:	e000      	b.n	80078b8 <dir_find+0xd4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 80078b6:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 80078b8:	7efb      	ldrb	r3, [r7, #27]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d107      	bne.n	80078ce <dir_find+0xea>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	691a      	ldr	r2, [r3, #16]
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	005b      	lsls	r3, r3, #1
 80078c6:	4413      	add	r3, r2
 80078c8:	881b      	ldrh	r3, [r3, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d009      	beq.n	80078e2 <dir_find+0xfe>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 80078ce:	2100      	movs	r1, #0
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f7ff fec0 	bl	8007656 <dir_read>
 80078d6:	4603      	mov	r3, r0
 80078d8:	77fb      	strb	r3, [r7, #31]
 80078da:	7ffb      	ldrb	r3, [r7, #31]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d09f      	beq.n	8007820 <dir_find+0x3c>
 80078e0:	e000      	b.n	80078e4 <dir_find+0x100>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 80078e2:	bf00      	nop
		}
		return res;
 80078e4:	7ffb      	ldrb	r3, [r7, #31]
 80078e6:	e0a9      	b.n	8007a3c <dir_find+0x258>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80078e8:	23ff      	movs	r3, #255	; 0xff
 80078ea:	773b      	strb	r3, [r7, #28]
 80078ec:	7f3b      	ldrb	r3, [r7, #28]
 80078ee:	777b      	strb	r3, [r7, #29]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f04f 32ff 	mov.w	r2, #4294967295
 80078f6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078fc:	4619      	mov	r1, r3
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f7fe f9f8 	bl	8005cf4 <move_window>
 8007904:	4603      	mov	r3, r0
 8007906:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 8007908:	7ffb      	ldrb	r3, [r7, #31]
 800790a:	2b00      	cmp	r3, #0
 800790c:	f040 8090 	bne.w	8007a30 <dir_find+0x24c>
		c = dp->dir[DIR_Name];
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007918:	7fbb      	ldrb	r3, [r7, #30]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d102      	bne.n	8007924 <dir_find+0x140>
 800791e:	2304      	movs	r3, #4
 8007920:	77fb      	strb	r3, [r7, #31]
 8007922:	e08a      	b.n	8007a3a <dir_find+0x256>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007928:	330b      	adds	r3, #11
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007930:	72fb      	strb	r3, [r7, #11]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	7afa      	ldrb	r2, [r7, #11]
 8007936:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007938:	7fbb      	ldrb	r3, [r7, #30]
 800793a:	2be5      	cmp	r3, #229	; 0xe5
 800793c:	d007      	beq.n	800794e <dir_find+0x16a>
 800793e:	7afb      	ldrb	r3, [r7, #11]
 8007940:	f003 0308 	and.w	r3, r3, #8
 8007944:	2b00      	cmp	r3, #0
 8007946:	d009      	beq.n	800795c <dir_find+0x178>
 8007948:	7afb      	ldrb	r3, [r7, #11]
 800794a:	2b0f      	cmp	r3, #15
 800794c:	d006      	beq.n	800795c <dir_find+0x178>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800794e:	23ff      	movs	r3, #255	; 0xff
 8007950:	777b      	strb	r3, [r7, #29]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f04f 32ff 	mov.w	r2, #4294967295
 8007958:	64da      	str	r2, [r3, #76]	; 0x4c
 800795a:	e05e      	b.n	8007a1a <dir_find+0x236>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800795c:	7afb      	ldrb	r3, [r7, #11]
 800795e:	2b0f      	cmp	r3, #15
 8007960:	d136      	bne.n	80079d0 <dir_find+0x1ec>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8007968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800796c:	2b00      	cmp	r3, #0
 800796e:	d154      	bne.n	8007a1a <dir_find+0x236>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007970:	7fbb      	ldrb	r3, [r7, #30]
 8007972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00d      	beq.n	8007996 <dir_find+0x1b2>
						sum = dp->dir[LDIR_Chksum];
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800797e:	7b5b      	ldrb	r3, [r3, #13]
 8007980:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007982:	7fbb      	ldrb	r3, [r7, #30]
 8007984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007988:	77bb      	strb	r3, [r7, #30]
 800798a:	7fbb      	ldrb	r3, [r7, #30]
 800798c:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007996:	7fba      	ldrb	r2, [r7, #30]
 8007998:	7f7b      	ldrb	r3, [r7, #29]
 800799a:	429a      	cmp	r2, r3
 800799c:	d115      	bne.n	80079ca <dir_find+0x1e6>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079a2:	330d      	adds	r3, #13
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	7f3a      	ldrb	r2, [r7, #28]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d10e      	bne.n	80079ca <dir_find+0x1e6>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	691a      	ldr	r2, [r3, #16]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079b4:	4619      	mov	r1, r3
 80079b6:	4610      	mov	r0, r2
 80079b8:	f7ff fa3e 	bl	8006e38 <cmp_lfn>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d003      	beq.n	80079ca <dir_find+0x1e6>
 80079c2:	7f7b      	ldrb	r3, [r7, #29]
 80079c4:	3b01      	subs	r3, #1
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	e000      	b.n	80079cc <dir_find+0x1e8>
 80079ca:	23ff      	movs	r3, #255	; 0xff
 80079cc:	777b      	strb	r3, [r7, #29]
 80079ce:	e024      	b.n	8007a1a <dir_find+0x236>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80079d0:	7f7b      	ldrb	r3, [r7, #29]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d109      	bne.n	80079ea <dir_find+0x206>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079da:	4618      	mov	r0, r3
 80079dc:	f7ff fbf8 	bl	80071d0 <sum_sfn>
 80079e0:	4603      	mov	r3, r0
 80079e2:	461a      	mov	r2, r3
 80079e4:	7f3b      	ldrb	r3, [r7, #28]
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d024      	beq.n	8007a34 <dir_find+0x250>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80079f0:	f003 0301 	and.w	r3, r3, #1
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d10a      	bne.n	8007a0e <dir_find+0x22a>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	3340      	adds	r3, #64	; 0x40
 8007a00:	220b      	movs	r2, #11
 8007a02:	4619      	mov	r1, r3
 8007a04:	f7fd ff83 	bl	800590e <mem_cmp>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d014      	beq.n	8007a38 <dir_find+0x254>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007a0e:	23ff      	movs	r3, #255	; 0xff
 8007a10:	777b      	strb	r3, [r7, #29]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f04f 32ff 	mov.w	r2, #4294967295
 8007a18:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007a1a:	2100      	movs	r1, #0
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f7ff f889 	bl	8006b34 <dir_next>
 8007a22:	4603      	mov	r3, r0
 8007a24:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 8007a26:	7ffb      	ldrb	r3, [r7, #31]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f43f af65 	beq.w	80078f8 <dir_find+0x114>
 8007a2e:	e004      	b.n	8007a3a <dir_find+0x256>
		if (res != FR_OK) break;
 8007a30:	bf00      	nop
 8007a32:	e002      	b.n	8007a3a <dir_find+0x256>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007a34:	bf00      	nop
 8007a36:	e000      	b.n	8007a3a <dir_find+0x256>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007a38:	bf00      	nop

	return res;
 8007a3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3724      	adds	r7, #36	; 0x24
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd90      	pop	{r4, r7, pc}

08007a44 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007a44:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007a48:	b0a0      	sub	sp, #128	; 0x80
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8007a5a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d001      	beq.n	8007a66 <dir_register+0x22>
 8007a62:	2306      	movs	r3, #6
 8007a64:	e198      	b.n	8007d98 <dir_register+0x354>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8007a66:	2300      	movs	r3, #0
 8007a68:	677b      	str	r3, [r7, #116]	; 0x74
 8007a6a:	e002      	b.n	8007a72 <dir_register+0x2e>
 8007a6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a6e:	3301      	adds	r3, #1
 8007a70:	677b      	str	r3, [r7, #116]	; 0x74
 8007a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a74:	691a      	ldr	r2, [r3, #16]
 8007a76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a78:	005b      	lsls	r3, r3, #1
 8007a7a:	4413      	add	r3, r2
 8007a7c:	881b      	ldrh	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1f4      	bne.n	8007a6c <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8007a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	2b04      	cmp	r3, #4
 8007a88:	f040 80a9 	bne.w	8007bde <dir_register+0x19a>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8007a8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a8e:	330e      	adds	r3, #14
 8007a90:	4aa7      	ldr	r2, [pc, #668]	; (8007d30 <dir_register+0x2ec>)
 8007a92:	fba2 2303 	umull	r2, r3, r2, r3
 8007a96:	08db      	lsrs	r3, r3, #3
 8007a98:	3302      	adds	r3, #2
 8007a9a:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 8007a9c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f7ff f92e 	bl	8006d00 <dir_alloc>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 8007aaa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d002      	beq.n	8007ab8 <dir_register+0x74>
 8007ab2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007ab6:	e16f      	b.n	8007d98 <dir_register+0x354>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007abc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8007abe:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 8007ac2:	440b      	add	r3, r1
 8007ac4:	015b      	lsls	r3, r3, #5
 8007ac6:	1ad2      	subs	r2, r2, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d07a      	beq.n	8007bca <dir_register+0x186>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	79db      	ldrb	r3, [r3, #7]
 8007ad8:	f003 0304 	and.w	r3, r3, #4
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d074      	beq.n	8007bca <dir_register+0x186>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8007ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ae8:	895b      	ldrh	r3, [r3, #10]
 8007aea:	4618      	mov	r0, r3
 8007aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aee:	899b      	ldrh	r3, [r3, #12]
 8007af0:	fb03 f300 	mul.w	r3, r3, r0
 8007af4:	469b      	mov	fp, r3
 8007af6:	f04f 0c00 	mov.w	ip, #0
 8007afa:	eb1b 0301 	adds.w	r3, fp, r1
 8007afe:	eb4c 0402 	adc.w	r4, ip, r2
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	e9c2 3404 	strd	r3, r4, [r2, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7fe fd22 	bl	8006554 <fill_first_frag>
 8007b10:	4603      	mov	r3, r0
 8007b12:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8007b16:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d002      	beq.n	8007b24 <dir_register+0xe0>
 8007b1e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007b22:	e139      	b.n	8007d98 <dir_register+0x354>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8007b2e:	4619      	mov	r1, r3
 8007b30:	f7fe fd3f 	bl	80065b2 <fill_last_frag>
 8007b34:	4603      	mov	r3, r0
 8007b36:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8007b3a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d002      	beq.n	8007b48 <dir_register+0x104>
 8007b42:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007b46:	e127      	b.n	8007d98 <dir_register+0x354>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	f107 0308 	add.w	r3, r7, #8
 8007b4e:	4611      	mov	r1, r2
 8007b50:	4618      	mov	r0, r3
 8007b52:	f7ff fc81 	bl	8007458 <load_obj_dir>
 8007b56:	4603      	mov	r3, r0
 8007b58:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8007b5c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d002      	beq.n	8007b6a <dir_register+0x126>
 8007b64:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007b68:	e116      	b.n	8007d98 <dir_register+0x354>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 8007b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b6c:	695b      	ldr	r3, [r3, #20]
 8007b6e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8007b78:	461a      	mov	r2, r3
 8007b7a:	4623      	mov	r3, r4
 8007b7c:	4608      	mov	r0, r1
 8007b7e:	f7fd fe04 	bl	800578a <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8007b82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b84:	695b      	ldr	r3, [r3, #20]
 8007b86:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8007b90:	461a      	mov	r2, r3
 8007b92:	4623      	mov	r3, r4
 8007b94:	4608      	mov	r0, r1
 8007b96:	f7fd fdf8 	bl	800578a <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	79da      	ldrb	r2, [r3, #7]
 8007b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ba0:	695b      	ldr	r3, [r3, #20]
 8007ba2:	3321      	adds	r3, #33	; 0x21
 8007ba4:	f042 0201 	orr.w	r2, r2, #1
 8007ba8:	b2d2      	uxtb	r2, r2
 8007baa:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 8007bac:	f107 0308 	add.w	r3, r7, #8
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f7ff fc8e 	bl	80074d2 <store_xdir>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8007bbc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d002      	beq.n	8007bca <dir_register+0x186>
 8007bc4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007bc8:	e0e6      	b.n	8007d98 <dir_register+0x354>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8007bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bcc:	695a      	ldr	r2, [r3, #20]
 8007bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	4610      	mov	r0, r2
 8007bd6:	f7ff fcd7 	bl	8007588 <create_xdir>
		return FR_OK;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	e0dc      	b.n	8007d98 <dir_register+0x354>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8007be4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007be8:	220c      	movs	r2, #12
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fd fe54 	bl	8005898 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8007bf0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007bf4:	f003 0301 	and.w	r3, r3, #1
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d033      	beq.n	8007c64 <dir_register+0x220>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2240      	movs	r2, #64	; 0x40
 8007c00:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 8007c04:	2301      	movs	r3, #1
 8007c06:	67bb      	str	r3, [r7, #120]	; 0x78
 8007c08:	e016      	b.n	8007c38 <dir_register+0x1f4>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8007c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c12:	691a      	ldr	r2, [r3, #16]
 8007c14:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8007c18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c1a:	f7ff fa49 	bl	80070b0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f7ff fde0 	bl	80077e4 <dir_find>
 8007c24:	4603      	mov	r3, r0
 8007c26:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 8007c2a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d106      	bne.n	8007c40 <dir_register+0x1fc>
		for (n = 1; n < 100; n++) {
 8007c32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c34:	3301      	adds	r3, #1
 8007c36:	67bb      	str	r3, [r7, #120]	; 0x78
 8007c38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c3a:	2b63      	cmp	r3, #99	; 0x63
 8007c3c:	d9e5      	bls.n	8007c0a <dir_register+0x1c6>
 8007c3e:	e000      	b.n	8007c42 <dir_register+0x1fe>
			if (res != FR_OK) break;
 8007c40:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007c42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c44:	2b64      	cmp	r3, #100	; 0x64
 8007c46:	d101      	bne.n	8007c4c <dir_register+0x208>
 8007c48:	2307      	movs	r3, #7
 8007c4a:	e0a5      	b.n	8007d98 <dir_register+0x354>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007c4c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007c50:	2b04      	cmp	r3, #4
 8007c52:	d002      	beq.n	8007c5a <dir_register+0x216>
 8007c54:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007c58:	e09e      	b.n	8007d98 <dir_register+0x354>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007c5a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007c64:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007c68:	f003 0302 	and.w	r3, r3, #2
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d007      	beq.n	8007c80 <dir_register+0x23c>
 8007c70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c72:	330c      	adds	r3, #12
 8007c74:	4a2f      	ldr	r2, [pc, #188]	; (8007d34 <dir_register+0x2f0>)
 8007c76:	fba2 2303 	umull	r2, r3, r2, r3
 8007c7a:	089b      	lsrs	r3, r3, #2
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	e000      	b.n	8007c82 <dir_register+0x23e>
 8007c80:	2301      	movs	r3, #1
 8007c82:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007c84:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f7ff f83a 	bl	8006d00 <dir_alloc>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007c92:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d14f      	bne.n	8007d3a <dir_register+0x2f6>
 8007c9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	673b      	str	r3, [r7, #112]	; 0x70
 8007ca0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d049      	beq.n	8007d3a <dir_register+0x2f6>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007caa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cac:	015b      	lsls	r3, r3, #5
 8007cae:	1ad3      	subs	r3, r2, r3
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f7fe feaa 	bl	8006a0c <dir_sdi>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8007cbe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d139      	bne.n	8007d3a <dir_register+0x2f6>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	3340      	adds	r3, #64	; 0x40
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7ff fa80 	bl	80071d0 <sum_sfn>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cda:	4619      	mov	r1, r3
 8007cdc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007cde:	f7fe f809 	bl	8005cf4 <move_window>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 8007ce8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d123      	bne.n	8007d38 <dir_register+0x2f4>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cf2:	6918      	ldr	r0, [r3, #16]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007cf8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cfa:	b2da      	uxtb	r2, r3
 8007cfc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8007d00:	f7ff f96e 	bl	8006fe0 <put_lfn>
				fs->wflag = 1;
 8007d04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d06:	2201      	movs	r2, #1
 8007d08:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007d0a:	2100      	movs	r1, #0
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f7fe ff11 	bl	8006b34 <dir_next>
 8007d12:	4603      	mov	r3, r0
 8007d14:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 8007d18:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d10c      	bne.n	8007d3a <dir_register+0x2f6>
 8007d20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d22:	3b01      	subs	r3, #1
 8007d24:	673b      	str	r3, [r7, #112]	; 0x70
 8007d26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1d4      	bne.n	8007cd6 <dir_register+0x292>
 8007d2c:	e005      	b.n	8007d3a <dir_register+0x2f6>
 8007d2e:	bf00      	nop
 8007d30:	88888889 	.word	0x88888889
 8007d34:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 8007d38:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007d3a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d128      	bne.n	8007d94 <dir_register+0x350>
		res = move_window(fs, dp->sect);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d46:	4619      	mov	r1, r3
 8007d48:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007d4a:	f7fd ffd3 	bl	8005cf4 <move_window>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8007d54:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d11b      	bne.n	8007d94 <dir_register+0x350>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d60:	2220      	movs	r2, #32
 8007d62:	2100      	movs	r1, #0
 8007d64:	4618      	mov	r0, r3
 8007d66:	f7fd fdb8 	bl	80058da <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	3340      	adds	r3, #64	; 0x40
 8007d72:	220b      	movs	r2, #11
 8007d74:	4619      	mov	r1, r3
 8007d76:	f7fd fd8f 	bl	8005898 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d84:	330c      	adds	r3, #12
 8007d86:	f002 0218 	and.w	r2, r2, #24
 8007d8a:	b2d2      	uxtb	r2, r2
 8007d8c:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d90:	2201      	movs	r2, #1
 8007d92:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007d94:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3780      	adds	r7, #128	; 0x80
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007da2:	bf00      	nop

08007da4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b08a      	sub	sp, #40	; 0x28
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	613b      	str	r3, [r7, #16]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	60fb      	str	r3, [r7, #12]
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	617b      	str	r3, [r7, #20]
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	1c5a      	adds	r2, r3, #1
 8007dc8:	61ba      	str	r2, [r7, #24]
 8007dca:	693a      	ldr	r2, [r7, #16]
 8007dcc:	4413      	add	r3, r2
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8007dd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007dd4:	2b1f      	cmp	r3, #31
 8007dd6:	d940      	bls.n	8007e5a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007dd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007dda:	2b2f      	cmp	r3, #47	; 0x2f
 8007ddc:	d006      	beq.n	8007dec <create_name+0x48>
 8007dde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007de0:	2b5c      	cmp	r3, #92	; 0x5c
 8007de2:	d110      	bne.n	8007e06 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007de4:	e002      	b.n	8007dec <create_name+0x48>
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	3301      	adds	r3, #1
 8007dea:	61bb      	str	r3, [r7, #24]
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	4413      	add	r3, r2
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	2b2f      	cmp	r3, #47	; 0x2f
 8007df6:	d0f6      	beq.n	8007de6 <create_name+0x42>
 8007df8:	693a      	ldr	r2, [r7, #16]
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	4413      	add	r3, r2
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	2b5c      	cmp	r3, #92	; 0x5c
 8007e02:	d0f0      	beq.n	8007de6 <create_name+0x42>
			break;
 8007e04:	e02a      	b.n	8007e5c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	2b0e      	cmp	r3, #14
 8007e0a:	d901      	bls.n	8007e10 <create_name+0x6c>
 8007e0c:	2306      	movs	r3, #6
 8007e0e:	e177      	b.n	8008100 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007e10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007e16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e18:	2101      	movs	r1, #1
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f001 fd18 	bl	8009850 <ff_convert>
 8007e20:	4603      	mov	r3, r0
 8007e22:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007e24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d101      	bne.n	8007e2e <create_name+0x8a>
 8007e2a:	2306      	movs	r3, #6
 8007e2c:	e168      	b.n	8008100 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007e2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e30:	2b7f      	cmp	r3, #127	; 0x7f
 8007e32:	d809      	bhi.n	8007e48 <create_name+0xa4>
 8007e34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e36:	4619      	mov	r1, r3
 8007e38:	48b3      	ldr	r0, [pc, #716]	; (8008108 <create_name+0x364>)
 8007e3a:	f7fd fd8f 	bl	800595c <chk_chr>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d001      	beq.n	8007e48 <create_name+0xa4>
 8007e44:	2306      	movs	r3, #6
 8007e46:	e15b      	b.n	8008100 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	1c5a      	adds	r2, r3, #1
 8007e4c:	617a      	str	r2, [r7, #20]
 8007e4e:	005b      	lsls	r3, r3, #1
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	4413      	add	r3, r2
 8007e54:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007e56:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007e58:	e7b4      	b.n	8007dc4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007e5a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007e5c:	693a      	ldr	r2, [r7, #16]
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	441a      	add	r2, r3
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007e66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e68:	2b1f      	cmp	r3, #31
 8007e6a:	d801      	bhi.n	8007e70 <create_name+0xcc>
 8007e6c:	2304      	movs	r3, #4
 8007e6e:	e000      	b.n	8007e72 <create_name+0xce>
 8007e70:	2300      	movs	r3, #0
 8007e72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007e76:	e011      	b.n	8007e9c <create_name+0xf8>
		w = lfn[di - 1];
 8007e78:	697a      	ldr	r2, [r7, #20]
 8007e7a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8007e7e:	4413      	add	r3, r2
 8007e80:	005b      	lsls	r3, r3, #1
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	4413      	add	r3, r2
 8007e86:	881b      	ldrh	r3, [r3, #0]
 8007e88:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8007e8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e8c:	2b20      	cmp	r3, #32
 8007e8e:	d002      	beq.n	8007e96 <create_name+0xf2>
 8007e90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e92:	2b2e      	cmp	r3, #46	; 0x2e
 8007e94:	d106      	bne.n	8007ea4 <create_name+0x100>
		di--;
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	3b01      	subs	r3, #1
 8007e9a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d1ea      	bne.n	8007e78 <create_name+0xd4>
 8007ea2:	e000      	b.n	8007ea6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007ea4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	005b      	lsls	r3, r3, #1
 8007eaa:	68fa      	ldr	r2, [r7, #12]
 8007eac:	4413      	add	r3, r2
 8007eae:	2200      	movs	r2, #0
 8007eb0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d101      	bne.n	8007ebc <create_name+0x118>
 8007eb8:	2306      	movs	r3, #6
 8007eba:	e121      	b.n	8008100 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	3340      	adds	r3, #64	; 0x40
 8007ec0:	220b      	movs	r2, #11
 8007ec2:	2120      	movs	r1, #32
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f7fd fd08 	bl	80058da <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007eca:	2300      	movs	r3, #0
 8007ecc:	61bb      	str	r3, [r7, #24]
 8007ece:	e002      	b.n	8007ed6 <create_name+0x132>
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	61bb      	str	r3, [r7, #24]
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	005b      	lsls	r3, r3, #1
 8007eda:	68fa      	ldr	r2, [r7, #12]
 8007edc:	4413      	add	r3, r2
 8007ede:	881b      	ldrh	r3, [r3, #0]
 8007ee0:	2b20      	cmp	r3, #32
 8007ee2:	d0f5      	beq.n	8007ed0 <create_name+0x12c>
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	005b      	lsls	r3, r3, #1
 8007ee8:	68fa      	ldr	r2, [r7, #12]
 8007eea:	4413      	add	r3, r2
 8007eec:	881b      	ldrh	r3, [r3, #0]
 8007eee:	2b2e      	cmp	r3, #46	; 0x2e
 8007ef0:	d0ee      	beq.n	8007ed0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d009      	beq.n	8007f0c <create_name+0x168>
 8007ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007efc:	f043 0303 	orr.w	r3, r3, #3
 8007f00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007f04:	e002      	b.n	8007f0c <create_name+0x168>
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	3b01      	subs	r3, #1
 8007f0a:	617b      	str	r3, [r7, #20]
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d009      	beq.n	8007f26 <create_name+0x182>
 8007f12:	697a      	ldr	r2, [r7, #20]
 8007f14:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8007f18:	4413      	add	r3, r2
 8007f1a:	005b      	lsls	r3, r3, #1
 8007f1c:	68fa      	ldr	r2, [r7, #12]
 8007f1e:	4413      	add	r3, r2
 8007f20:	881b      	ldrh	r3, [r3, #0]
 8007f22:	2b2e      	cmp	r3, #46	; 0x2e
 8007f24:	d1ef      	bne.n	8007f06 <create_name+0x162>

	i = b = 0; ni = 8;
 8007f26:	2300      	movs	r3, #0
 8007f28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	623b      	str	r3, [r7, #32]
 8007f30:	2308      	movs	r3, #8
 8007f32:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	1c5a      	adds	r2, r3, #1
 8007f38:	61ba      	str	r2, [r7, #24]
 8007f3a:	005b      	lsls	r3, r3, #1
 8007f3c:	68fa      	ldr	r2, [r7, #12]
 8007f3e:	4413      	add	r3, r2
 8007f40:	881b      	ldrh	r3, [r3, #0]
 8007f42:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007f44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	f000 8090 	beq.w	800806c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007f4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f4e:	2b20      	cmp	r3, #32
 8007f50:	d006      	beq.n	8007f60 <create_name+0x1bc>
 8007f52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f54:	2b2e      	cmp	r3, #46	; 0x2e
 8007f56:	d10a      	bne.n	8007f6e <create_name+0x1ca>
 8007f58:	69ba      	ldr	r2, [r7, #24]
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d006      	beq.n	8007f6e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007f60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f64:	f043 0303 	orr.w	r3, r3, #3
 8007f68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007f6c:	e07d      	b.n	800806a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007f6e:	6a3a      	ldr	r2, [r7, #32]
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d203      	bcs.n	8007f7e <create_name+0x1da>
 8007f76:	69ba      	ldr	r2, [r7, #24]
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d123      	bne.n	8007fc6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	2b0b      	cmp	r3, #11
 8007f82:	d106      	bne.n	8007f92 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007f84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f88:	f043 0303 	orr.w	r3, r3, #3
 8007f8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007f90:	e06f      	b.n	8008072 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007f92:	69ba      	ldr	r2, [r7, #24]
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d005      	beq.n	8007fa6 <create_name+0x202>
 8007f9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f9e:	f043 0303 	orr.w	r3, r3, #3
 8007fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8007fa6:	69ba      	ldr	r2, [r7, #24]
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d860      	bhi.n	8008070 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	61bb      	str	r3, [r7, #24]
 8007fb2:	2308      	movs	r3, #8
 8007fb4:	623b      	str	r3, [r7, #32]
 8007fb6:	230b      	movs	r3, #11
 8007fb8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007fba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007fc4:	e051      	b.n	800806a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007fc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007fc8:	2b7f      	cmp	r3, #127	; 0x7f
 8007fca:	d914      	bls.n	8007ff6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007fcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007fce:	2100      	movs	r1, #0
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f001 fc3d 	bl	8009850 <ff_convert>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007fda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d004      	beq.n	8007fea <create_name+0x246>
 8007fe0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007fe2:	3b80      	subs	r3, #128	; 0x80
 8007fe4:	4a49      	ldr	r2, [pc, #292]	; (800810c <create_name+0x368>)
 8007fe6:	5cd3      	ldrb	r3, [r2, r3]
 8007fe8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007fea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fee:	f043 0302 	orr.w	r3, r3, #2
 8007ff2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007ff6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d007      	beq.n	800800c <create_name+0x268>
 8007ffc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ffe:	4619      	mov	r1, r3
 8008000:	4843      	ldr	r0, [pc, #268]	; (8008110 <create_name+0x36c>)
 8008002:	f7fd fcab 	bl	800595c <chk_chr>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d008      	beq.n	800801e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800800c:	235f      	movs	r3, #95	; 0x5f
 800800e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008010:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008014:	f043 0303 	orr.w	r3, r3, #3
 8008018:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800801c:	e01b      	b.n	8008056 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800801e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008020:	2b40      	cmp	r3, #64	; 0x40
 8008022:	d909      	bls.n	8008038 <create_name+0x294>
 8008024:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008026:	2b5a      	cmp	r3, #90	; 0x5a
 8008028:	d806      	bhi.n	8008038 <create_name+0x294>
					b |= 2;
 800802a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800802e:	f043 0302 	orr.w	r3, r3, #2
 8008032:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008036:	e00e      	b.n	8008056 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008038:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800803a:	2b60      	cmp	r3, #96	; 0x60
 800803c:	d90b      	bls.n	8008056 <create_name+0x2b2>
 800803e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008040:	2b7a      	cmp	r3, #122	; 0x7a
 8008042:	d808      	bhi.n	8008056 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8008044:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008048:	f043 0301 	orr.w	r3, r3, #1
 800804c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008050:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008052:	3b20      	subs	r3, #32
 8008054:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008056:	6a3b      	ldr	r3, [r7, #32]
 8008058:	1c5a      	adds	r2, r3, #1
 800805a:	623a      	str	r2, [r7, #32]
 800805c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800805e:	b2d1      	uxtb	r1, r2
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	4413      	add	r3, r2
 8008064:	460a      	mov	r2, r1
 8008066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800806a:	e763      	b.n	8007f34 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800806c:	bf00      	nop
 800806e:	e000      	b.n	8008072 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8008070:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008078:	2be5      	cmp	r3, #229	; 0xe5
 800807a:	d103      	bne.n	8008084 <create_name+0x2e0>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2205      	movs	r2, #5
 8008080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	2b08      	cmp	r3, #8
 8008088:	d104      	bne.n	8008094 <create_name+0x2f0>
 800808a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008094:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008098:	f003 030c 	and.w	r3, r3, #12
 800809c:	2b0c      	cmp	r3, #12
 800809e:	d005      	beq.n	80080ac <create_name+0x308>
 80080a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80080a4:	f003 0303 	and.w	r3, r3, #3
 80080a8:	2b03      	cmp	r3, #3
 80080aa:	d105      	bne.n	80080b8 <create_name+0x314>
 80080ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080b0:	f043 0302 	orr.w	r3, r3, #2
 80080b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80080b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080bc:	f003 0302 	and.w	r3, r3, #2
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d117      	bne.n	80080f4 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80080c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80080c8:	f003 0303 	and.w	r3, r3, #3
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d105      	bne.n	80080dc <create_name+0x338>
 80080d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080d4:	f043 0310 	orr.w	r3, r3, #16
 80080d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80080dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80080e0:	f003 030c 	and.w	r3, r3, #12
 80080e4:	2b04      	cmp	r3, #4
 80080e6:	d105      	bne.n	80080f4 <create_name+0x350>
 80080e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080ec:	f043 0308 	orr.w	r3, r3, #8
 80080f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80080fa:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 80080fe:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8008100:	4618      	mov	r0, r3
 8008102:	3728      	adds	r7, #40	; 0x28
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}
 8008108:	0800a2ac 	.word	0x0800a2ac
 800810c:	0800a324 	.word	0x0800a324
 8008110:	0800a2b8 	.word	0x0800a2b8

08008114 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008114:	b590      	push	{r4, r7, lr}
 8008116:	b087      	sub	sp, #28
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008128:	e002      	b.n	8008130 <follow_path+0x1c>
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	3301      	adds	r3, #1
 800812e:	603b      	str	r3, [r7, #0]
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	2b2f      	cmp	r3, #47	; 0x2f
 8008136:	d0f8      	beq.n	800812a <follow_path+0x16>
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	2b5c      	cmp	r3, #92	; 0x5c
 800813e:	d0f4      	beq.n	800812a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	2200      	movs	r2, #0
 8008144:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	2200      	movs	r2, #0
 800814a:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	2b1f      	cmp	r3, #31
 8008152:	d80a      	bhi.n	800816a <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2280      	movs	r2, #128	; 0x80
 8008158:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800815c:	2100      	movs	r1, #0
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f7fe fc54 	bl	8006a0c <dir_sdi>
 8008164:	4603      	mov	r3, r0
 8008166:	75fb      	strb	r3, [r7, #23]
 8008168:	e07c      	b.n	8008264 <follow_path+0x150>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800816a:	463b      	mov	r3, r7
 800816c:	4619      	mov	r1, r3
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f7ff fe18 	bl	8007da4 <create_name>
 8008174:	4603      	mov	r3, r0
 8008176:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008178:	7dfb      	ldrb	r3, [r7, #23]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d16d      	bne.n	800825a <follow_path+0x146>
			res = dir_find(dp);				/* Find an object with the segment name */
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f7ff fb30 	bl	80077e4 <dir_find>
 8008184:	4603      	mov	r3, r0
 8008186:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800818e:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008190:	7dfb      	ldrb	r3, [r7, #23]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00a      	beq.n	80081ac <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008196:	7dfb      	ldrb	r3, [r7, #23]
 8008198:	2b04      	cmp	r3, #4
 800819a:	d160      	bne.n	800825e <follow_path+0x14a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800819c:	7afb      	ldrb	r3, [r7, #11]
 800819e:	f003 0304 	and.w	r3, r3, #4
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d15b      	bne.n	800825e <follow_path+0x14a>
 80081a6:	2305      	movs	r3, #5
 80081a8:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80081aa:	e058      	b.n	800825e <follow_path+0x14a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80081ac:	7afb      	ldrb	r3, [r7, #11]
 80081ae:	f003 0304 	and.w	r3, r3, #4
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d155      	bne.n	8008262 <follow_path+0x14e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	799b      	ldrb	r3, [r3, #6]
 80081ba:	f003 0310 	and.w	r3, r3, #16
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d102      	bne.n	80081c8 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 80081c2:	2305      	movs	r3, #5
 80081c4:	75fb      	strb	r3, [r7, #23]
 80081c6:	e04d      	b.n	8008264 <follow_path+0x150>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	2b04      	cmp	r3, #4
 80081ce:	d12f      	bne.n	8008230 <follow_path+0x11c>
				obj->c_scl = obj->sclust;
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	689a      	ldr	r2, [r3, #8]
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80081de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80081e2:	693a      	ldr	r2, [r7, #16]
 80081e4:	79d2      	ldrb	r2, [r2, #7]
 80081e6:	431a      	orrs	r2, r3
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	695b      	ldr	r3, [r3, #20]
 80081f8:	3334      	adds	r3, #52	; 0x34
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7fd f99e 	bl	800553c <ld_dword>
 8008200:	4602      	mov	r2, r0
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	695b      	ldr	r3, [r3, #20]
 800820a:	3321      	adds	r3, #33	; 0x21
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	f003 0302 	and.w	r3, r3, #2
 8008212:	b2da      	uxtb	r2, r3
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	695b      	ldr	r3, [r3, #20]
 800821c:	3338      	adds	r3, #56	; 0x38
 800821e:	4618      	mov	r0, r3
 8008220:	f7fd f9af 	bl	8005582 <ld_qword>
 8008224:	4603      	mov	r3, r0
 8008226:	460c      	mov	r4, r1
 8008228:	693a      	ldr	r2, [r7, #16]
 800822a:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800822e:	e79c      	b.n	800816a <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800823a:	68fa      	ldr	r2, [r7, #12]
 800823c:	8992      	ldrh	r2, [r2, #12]
 800823e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008242:	fb02 f200 	mul.w	r2, r2, r0
 8008246:	1a9b      	subs	r3, r3, r2
 8008248:	440b      	add	r3, r1
 800824a:	4619      	mov	r1, r3
 800824c:	68f8      	ldr	r0, [r7, #12]
 800824e:	f7fe fdb3 	bl	8006db8 <ld_clust>
 8008252:	4602      	mov	r2, r0
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008258:	e787      	b.n	800816a <follow_path+0x56>
			if (res != FR_OK) break;
 800825a:	bf00      	nop
 800825c:	e002      	b.n	8008264 <follow_path+0x150>
				break;
 800825e:	bf00      	nop
 8008260:	e000      	b.n	8008264 <follow_path+0x150>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008262:	bf00      	nop
			}
		}
	}

	return res;
 8008264:	7dfb      	ldrb	r3, [r7, #23]
}
 8008266:	4618      	mov	r0, r3
 8008268:	371c      	adds	r7, #28
 800826a:	46bd      	mov	sp, r7
 800826c:	bd90      	pop	{r4, r7, pc}

0800826e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800826e:	b480      	push	{r7}
 8008270:	b087      	sub	sp, #28
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008276:	f04f 33ff 	mov.w	r3, #4294967295
 800827a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d031      	beq.n	80082e8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	617b      	str	r3, [r7, #20]
 800828a:	e002      	b.n	8008292 <get_ldnumber+0x24>
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	3301      	adds	r3, #1
 8008290:	617b      	str	r3, [r7, #20]
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	2b1f      	cmp	r3, #31
 8008298:	d903      	bls.n	80082a2 <get_ldnumber+0x34>
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	2b3a      	cmp	r3, #58	; 0x3a
 80082a0:	d1f4      	bne.n	800828c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	2b3a      	cmp	r3, #58	; 0x3a
 80082a8:	d11c      	bne.n	80082e4 <get_ldnumber+0x76>
			tp = *path;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	1c5a      	adds	r2, r3, #1
 80082b4:	60fa      	str	r2, [r7, #12]
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	3b30      	subs	r3, #48	; 0x30
 80082ba:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	2b09      	cmp	r3, #9
 80082c0:	d80e      	bhi.n	80082e0 <get_ldnumber+0x72>
 80082c2:	68fa      	ldr	r2, [r7, #12]
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d10a      	bne.n	80082e0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d107      	bne.n	80082e0 <get_ldnumber+0x72>
					vol = (int)i;
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	3301      	adds	r3, #1
 80082d8:	617b      	str	r3, [r7, #20]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	697a      	ldr	r2, [r7, #20]
 80082de:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	e002      	b.n	80082ea <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80082e4:	2300      	movs	r3, #0
 80082e6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80082e8:	693b      	ldr	r3, [r7, #16]
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	371c      	adds	r7, #28
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr
	...

080082f8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	70da      	strb	r2, [r3, #3]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f04f 32ff 	mov.w	r2, #4294967295
 800830e:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008310:	6839      	ldr	r1, [r7, #0]
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f7fd fcee 	bl	8005cf4 <move_window>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d001      	beq.n	8008322 <check_fs+0x2a>
 800831e:	2304      	movs	r3, #4
 8008320:	e044      	b.n	80083ac <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	333c      	adds	r3, #60	; 0x3c
 8008326:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800832a:	4618      	mov	r0, r3
 800832c:	f7fd f8ee 	bl	800550c <ld_word>
 8008330:	4603      	mov	r3, r0
 8008332:	461a      	mov	r2, r3
 8008334:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008338:	429a      	cmp	r2, r3
 800833a:	d001      	beq.n	8008340 <check_fs+0x48>
 800833c:	2303      	movs	r3, #3
 800833e:	e035      	b.n	80083ac <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008346:	2be9      	cmp	r3, #233	; 0xe9
 8008348:	d009      	beq.n	800835e <check_fs+0x66>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008350:	2beb      	cmp	r3, #235	; 0xeb
 8008352:	d11e      	bne.n	8008392 <check_fs+0x9a>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800835a:	2b90      	cmp	r3, #144	; 0x90
 800835c:	d119      	bne.n	8008392 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	333c      	adds	r3, #60	; 0x3c
 8008362:	3336      	adds	r3, #54	; 0x36
 8008364:	4618      	mov	r0, r3
 8008366:	f7fd f8e9 	bl	800553c <ld_dword>
 800836a:	4603      	mov	r3, r0
 800836c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008370:	4a10      	ldr	r2, [pc, #64]	; (80083b4 <check_fs+0xbc>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d101      	bne.n	800837a <check_fs+0x82>
 8008376:	2300      	movs	r3, #0
 8008378:	e018      	b.n	80083ac <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	333c      	adds	r3, #60	; 0x3c
 800837e:	3352      	adds	r3, #82	; 0x52
 8008380:	4618      	mov	r0, r3
 8008382:	f7fd f8db 	bl	800553c <ld_dword>
 8008386:	4602      	mov	r2, r0
 8008388:	4b0b      	ldr	r3, [pc, #44]	; (80083b8 <check_fs+0xc0>)
 800838a:	429a      	cmp	r2, r3
 800838c:	d101      	bne.n	8008392 <check_fs+0x9a>
 800838e:	2300      	movs	r3, #0
 8008390:	e00c      	b.n	80083ac <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	333c      	adds	r3, #60	; 0x3c
 8008396:	220b      	movs	r2, #11
 8008398:	4908      	ldr	r1, [pc, #32]	; (80083bc <check_fs+0xc4>)
 800839a:	4618      	mov	r0, r3
 800839c:	f7fd fab7 	bl	800590e <mem_cmp>
 80083a0:	4603      	mov	r3, r0
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d101      	bne.n	80083aa <check_fs+0xb2>
 80083a6:	2301      	movs	r3, #1
 80083a8:	e000      	b.n	80083ac <check_fs+0xb4>
#endif
	return 2;
 80083aa:	2302      	movs	r3, #2
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3708      	adds	r7, #8
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	00544146 	.word	0x00544146
 80083b8:	33544146 	.word	0x33544146
 80083bc:	0800a2c0 	.word	0x0800a2c0

080083c0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80083c0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80083c4:	b098      	sub	sp, #96	; 0x60
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	60f8      	str	r0, [r7, #12]
 80083ca:	60b9      	str	r1, [r7, #8]
 80083cc:	4613      	mov	r3, r2
 80083ce:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	2200      	movs	r2, #0
 80083d4:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80083d6:	68f8      	ldr	r0, [r7, #12]
 80083d8:	f7ff ff49 	bl	800826e <get_ldnumber>
 80083dc:	6478      	str	r0, [r7, #68]	; 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 80083de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	da01      	bge.n	80083e8 <find_volume+0x28>
 80083e4:	230b      	movs	r3, #11
 80083e6:	e36e      	b.n	8008ac6 <find_volume+0x706>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80083e8:	4aaa      	ldr	r2, [pc, #680]	; (8008694 <find_volume+0x2d4>)
 80083ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083f0:	643b      	str	r3, [r7, #64]	; 0x40
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80083f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d101      	bne.n	80083fc <find_volume+0x3c>
 80083f8:	230c      	movs	r3, #12
 80083fa:	e364      	b.n	8008ac6 <find_volume+0x706>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008400:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008402:	79fb      	ldrb	r3, [r7, #7]
 8008404:	f023 0301 	bic.w	r3, r3, #1
 8008408:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800840a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d01a      	beq.n	8008448 <find_volume+0x88>
		stat = disk_status(fs->drv);
 8008412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008414:	785b      	ldrb	r3, [r3, #1]
 8008416:	4618      	mov	r0, r3
 8008418:	f7fc ffda 	bl	80053d0 <disk_status>
 800841c:	4603      	mov	r3, r0
 800841e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008422:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008426:	f003 0301 	and.w	r3, r3, #1
 800842a:	2b00      	cmp	r3, #0
 800842c:	d10c      	bne.n	8008448 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800842e:	79fb      	ldrb	r3, [r7, #7]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d007      	beq.n	8008444 <find_volume+0x84>
 8008434:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008438:	f003 0304 	and.w	r3, r3, #4
 800843c:	2b00      	cmp	r3, #0
 800843e:	d001      	beq.n	8008444 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 8008440:	230a      	movs	r3, #10
 8008442:	e340      	b.n	8008ac6 <find_volume+0x706>
			}
			return FR_OK;				/* The file system object is valid */
 8008444:	2300      	movs	r3, #0
 8008446:	e33e      	b.n	8008ac6 <find_volume+0x706>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800844a:	2200      	movs	r2, #0
 800844c:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800844e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008450:	b2da      	uxtb	r2, r3
 8008452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008454:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008458:	785b      	ldrb	r3, [r3, #1]
 800845a:	4618      	mov	r0, r3
 800845c:	f7fc ffd2 	bl	8005404 <disk_initialize>
 8008460:	4603      	mov	r3, r0
 8008462:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008466:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800846a:	f003 0301 	and.w	r3, r3, #1
 800846e:	2b00      	cmp	r3, #0
 8008470:	d001      	beq.n	8008476 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008472:	2303      	movs	r3, #3
 8008474:	e327      	b.n	8008ac6 <find_volume+0x706>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008476:	79fb      	ldrb	r3, [r7, #7]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d007      	beq.n	800848c <find_volume+0xcc>
 800847c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008480:	f003 0304 	and.w	r3, r3, #4
 8008484:	2b00      	cmp	r3, #0
 8008486:	d001      	beq.n	800848c <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8008488:	230a      	movs	r3, #10
 800848a:	e31c      	b.n	8008ac6 <find_volume+0x706>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800848c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800848e:	7858      	ldrb	r0, [r3, #1]
 8008490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008492:	330c      	adds	r3, #12
 8008494:	461a      	mov	r2, r3
 8008496:	2102      	movs	r1, #2
 8008498:	f7fd f81a 	bl	80054d0 <disk_ioctl>
 800849c:	4603      	mov	r3, r0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d001      	beq.n	80084a6 <find_volume+0xe6>
 80084a2:	2301      	movs	r3, #1
 80084a4:	e30f      	b.n	8008ac6 <find_volume+0x706>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80084a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084a8:	899b      	ldrh	r3, [r3, #12]
 80084aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084ae:	d80d      	bhi.n	80084cc <find_volume+0x10c>
 80084b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084b2:	899b      	ldrh	r3, [r3, #12]
 80084b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084b8:	d308      	bcc.n	80084cc <find_volume+0x10c>
 80084ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084bc:	899b      	ldrh	r3, [r3, #12]
 80084be:	461a      	mov	r2, r3
 80084c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084c2:	899b      	ldrh	r3, [r3, #12]
 80084c4:	3b01      	subs	r3, #1
 80084c6:	4013      	ands	r3, r2
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d001      	beq.n	80084d0 <find_volume+0x110>
 80084cc:	2301      	movs	r3, #1
 80084ce:	e2fa      	b.n	8008ac6 <find_volume+0x706>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80084d0:	2300      	movs	r3, #0
 80084d2:	65bb      	str	r3, [r7, #88]	; 0x58
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80084d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80084d6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80084d8:	f7ff ff0e 	bl	80082f8 <check_fs>
 80084dc:	4603      	mov	r3, r0
 80084de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80084e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084e6:	2b02      	cmp	r3, #2
 80084e8:	d14b      	bne.n	8008582 <find_volume+0x1c2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80084ea:	2300      	movs	r3, #0
 80084ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80084ee:	e01f      	b.n	8008530 <find_volume+0x170>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80084f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084f2:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80084f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084f8:	011b      	lsls	r3, r3, #4
 80084fa:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80084fe:	4413      	add	r3, r2
 8008500:	63bb      	str	r3, [r7, #56]	; 0x38
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008504:	3304      	adds	r3, #4
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d006      	beq.n	800851a <find_volume+0x15a>
 800850c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850e:	3308      	adds	r3, #8
 8008510:	4618      	mov	r0, r3
 8008512:	f7fd f813 	bl	800553c <ld_dword>
 8008516:	4602      	mov	r2, r0
 8008518:	e000      	b.n	800851c <find_volume+0x15c>
 800851a:	2200      	movs	r2, #0
 800851c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8008524:	440b      	add	r3, r1
 8008526:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800852a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800852c:	3301      	adds	r3, #1
 800852e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008532:	2b03      	cmp	r3, #3
 8008534:	d9dc      	bls.n	80084f0 <find_volume+0x130>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008536:	2300      	movs	r3, #0
 8008538:	64bb      	str	r3, [r7, #72]	; 0x48
		if (i) i--;
 800853a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800853c:	2b00      	cmp	r3, #0
 800853e:	d002      	beq.n	8008546 <find_volume+0x186>
 8008540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008542:	3b01      	subs	r3, #1
 8008544:	64bb      	str	r3, [r7, #72]	; 0x48
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800854e:	4413      	add	r3, r2
 8008550:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8008554:	65bb      	str	r3, [r7, #88]	; 0x58
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008556:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008558:	2b00      	cmp	r3, #0
 800855a:	d005      	beq.n	8008568 <find_volume+0x1a8>
 800855c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800855e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008560:	f7ff feca 	bl	80082f8 <check_fs>
 8008564:	4603      	mov	r3, r0
 8008566:	e000      	b.n	800856a <find_volume+0x1aa>
 8008568:	2303      	movs	r3, #3
 800856a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800856e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008572:	2b01      	cmp	r3, #1
 8008574:	d905      	bls.n	8008582 <find_volume+0x1c2>
 8008576:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008578:	3301      	adds	r3, #1
 800857a:	64bb      	str	r3, [r7, #72]	; 0x48
 800857c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800857e:	2b03      	cmp	r3, #3
 8008580:	d9e1      	bls.n	8008546 <find_volume+0x186>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008582:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008586:	2b04      	cmp	r3, #4
 8008588:	d101      	bne.n	800858e <find_volume+0x1ce>
 800858a:	2301      	movs	r3, #1
 800858c:	e29b      	b.n	8008ac6 <find_volume+0x706>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800858e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008592:	2b01      	cmp	r3, #1
 8008594:	d901      	bls.n	800859a <find_volume+0x1da>
 8008596:	230d      	movs	r3, #13
 8008598:	e295      	b.n	8008ac6 <find_volume+0x706>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800859a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800859e:	2b01      	cmp	r3, #1
 80085a0:	f040 8101 	bne.w	80087a6 <find_volume+0x3e6>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 80085a4:	230b      	movs	r3, #11
 80085a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80085a8:	e002      	b.n	80085b0 <find_volume+0x1f0>
 80085aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085ac:	3301      	adds	r3, #1
 80085ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80085b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085b2:	2b3f      	cmp	r3, #63	; 0x3f
 80085b4:	d806      	bhi.n	80085c4 <find_volume+0x204>
 80085b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80085b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085ba:	4413      	add	r3, r2
 80085bc:	333c      	adds	r3, #60	; 0x3c
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d0f2      	beq.n	80085aa <find_volume+0x1ea>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 80085c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085c6:	2b3f      	cmp	r3, #63	; 0x3f
 80085c8:	d801      	bhi.n	80085ce <find_volume+0x20e>
 80085ca:	230d      	movs	r3, #13
 80085cc:	e27b      	b.n	8008ac6 <find_volume+0x706>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 80085ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085d0:	333c      	adds	r3, #60	; 0x3c
 80085d2:	3368      	adds	r3, #104	; 0x68
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7fc ff99 	bl	800550c <ld_word>
 80085da:	4603      	mov	r3, r0
 80085dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085e0:	d001      	beq.n	80085e6 <find_volume+0x226>
 80085e2:	230d      	movs	r3, #13
 80085e4:	e26f      	b.n	8008ac6 <find_volume+0x706>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 80085e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085e8:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80085ec:	461a      	mov	r2, r3
 80085ee:	2301      	movs	r3, #1
 80085f0:	4093      	lsls	r3, r2
 80085f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80085f4:	8992      	ldrh	r2, [r2, #12]
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d001      	beq.n	80085fe <find_volume+0x23e>
			return FR_NO_FILESYSTEM;
 80085fa:	230d      	movs	r3, #13
 80085fc:	e263      	b.n	8008ac6 <find_volume+0x706>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 80085fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008600:	333c      	adds	r3, #60	; 0x3c
 8008602:	3348      	adds	r3, #72	; 0x48
 8008604:	4618      	mov	r0, r3
 8008606:	f7fc ffbc 	bl	8005582 <ld_qword>
 800860a:	460a      	mov	r2, r1
 800860c:	4601      	mov	r1, r0
 800860e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008610:	469b      	mov	fp, r3
 8008612:	f04f 0c00 	mov.w	ip, #0
 8008616:	eb1b 0301 	adds.w	r3, fp, r1
 800861a:	eb4c 0402 	adc.w	r4, ip, r2
 800861e:	e9c7 3408 	strd	r3, r4, [r7, #32]
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 8008622:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8008626:	2c01      	cmp	r4, #1
 8008628:	bf08      	it	eq
 800862a:	2b00      	cmpeq	r3, #0
 800862c:	d301      	bcc.n	8008632 <find_volume+0x272>
 800862e:	230d      	movs	r3, #13
 8008630:	e249      	b.n	8008ac6 <find_volume+0x706>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 8008632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008634:	333c      	adds	r3, #60	; 0x3c
 8008636:	3354      	adds	r3, #84	; 0x54
 8008638:	4618      	mov	r0, r3
 800863a:	f7fc ff7f 	bl	800553c <ld_dword>
 800863e:	4602      	mov	r2, r0
 8008640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008642:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8008644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008646:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 800864a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800864c:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800864e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008650:	789b      	ldrb	r3, [r3, #2]
 8008652:	2b01      	cmp	r3, #1
 8008654:	d001      	beq.n	800865a <find_volume+0x29a>
 8008656:	230d      	movs	r3, #13
 8008658:	e235      	b.n	8008ac6 <find_volume+0x706>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800865a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800865c:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8008660:	461a      	mov	r2, r3
 8008662:	2301      	movs	r3, #1
 8008664:	4093      	lsls	r3, r2
 8008666:	b29a      	uxth	r2, r3
 8008668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800866a:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800866c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800866e:	895b      	ldrh	r3, [r3, #10]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d101      	bne.n	8008678 <find_volume+0x2b8>
 8008674:	230d      	movs	r3, #13
 8008676:	e226      	b.n	8008ac6 <find_volume+0x706>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8008678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800867a:	333c      	adds	r3, #60	; 0x3c
 800867c:	335c      	adds	r3, #92	; 0x5c
 800867e:	4618      	mov	r0, r3
 8008680:	f7fc ff5c 	bl	800553c <ld_dword>
 8008684:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8008686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008688:	4a03      	ldr	r2, [pc, #12]	; (8008698 <find_volume+0x2d8>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d906      	bls.n	800869c <find_volume+0x2dc>
 800868e:	230d      	movs	r3, #13
 8008690:	e219      	b.n	8008ac6 <find_volume+0x706>
 8008692:	bf00      	nop
 8008694:	200000c4 	.word	0x200000c4
 8008698:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 800869c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800869e:	1c9a      	adds	r2, r3, #2
 80086a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086a2:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 80086a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80086a8:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 80086aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086ac:	333c      	adds	r3, #60	; 0x3c
 80086ae:	3358      	adds	r3, #88	; 0x58
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7fc ff43 	bl	800553c <ld_dword>
 80086b6:	4602      	mov	r2, r0
 80086b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80086ba:	441a      	add	r2, r3
 80086bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086be:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 80086c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086c2:	333c      	adds	r3, #60	; 0x3c
 80086c4:	3350      	adds	r3, #80	; 0x50
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7fc ff38 	bl	800553c <ld_dword>
 80086cc:	4602      	mov	r2, r0
 80086ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80086d0:	441a      	add	r2, r3
 80086d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086d4:	62da      	str	r2, [r3, #44]	; 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 80086d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086da:	4619      	mov	r1, r3
 80086dc:	f04f 0200 	mov.w	r2, #0
 80086e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086e2:	895b      	ldrh	r3, [r3, #10]
 80086e4:	4618      	mov	r0, r3
 80086e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e8:	fb03 f300 	mul.w	r3, r3, r0
 80086ec:	469b      	mov	fp, r3
 80086ee:	f04f 0c00 	mov.w	ip, #0
 80086f2:	eb1b 0301 	adds.w	r3, fp, r1
 80086f6:	eb4c 0402 	adc.w	r4, ip, r2
 80086fa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80086fe:	42a2      	cmp	r2, r4
 8008700:	bf08      	it	eq
 8008702:	4299      	cmpeq	r1, r3
 8008704:	d201      	bcs.n	800870a <find_volume+0x34a>
 8008706:	230d      	movs	r3, #13
 8008708:	e1dd      	b.n	8008ac6 <find_volume+0x706>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800870a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800870c:	333c      	adds	r3, #60	; 0x3c
 800870e:	3360      	adds	r3, #96	; 0x60
 8008710:	4618      	mov	r0, r3
 8008712:	f7fc ff13 	bl	800553c <ld_dword>
 8008716:	4602      	mov	r2, r0
 8008718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800871a:	631a      	str	r2, [r3, #48]	; 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800871c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800871e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008720:	4619      	mov	r1, r3
 8008722:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008724:	f7fd fb84 	bl	8005e30 <clust2sect>
 8008728:	4603      	mov	r3, r0
 800872a:	4619      	mov	r1, r3
 800872c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800872e:	f7fd fae1 	bl	8005cf4 <move_window>
 8008732:	4603      	mov	r3, r0
 8008734:	2b00      	cmp	r3, #0
 8008736:	d001      	beq.n	800873c <find_volume+0x37c>
 8008738:	2301      	movs	r3, #1
 800873a:	e1c4      	b.n	8008ac6 <find_volume+0x706>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800873c:	2300      	movs	r3, #0
 800873e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008740:	e015      	b.n	800876e <find_volume+0x3ae>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8008742:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008746:	4413      	add	r3, r2
 8008748:	333c      	adds	r3, #60	; 0x3c
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	2b81      	cmp	r3, #129	; 0x81
 800874e:	d10b      	bne.n	8008768 <find_volume+0x3a8>
 8008750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008752:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8008756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008758:	3314      	adds	r3, #20
 800875a:	4413      	add	r3, r2
 800875c:	4618      	mov	r0, r3
 800875e:	f7fc feed 	bl	800553c <ld_dword>
 8008762:	4603      	mov	r3, r0
 8008764:	2b02      	cmp	r3, #2
 8008766:	d009      	beq.n	800877c <find_volume+0x3bc>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8008768:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800876a:	3320      	adds	r3, #32
 800876c:	64bb      	str	r3, [r7, #72]	; 0x48
 800876e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008770:	899b      	ldrh	r3, [r3, #12]
 8008772:	461a      	mov	r2, r3
 8008774:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008776:	4293      	cmp	r3, r2
 8008778:	d3e3      	bcc.n	8008742 <find_volume+0x382>
 800877a:	e000      	b.n	800877e <find_volume+0x3be>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800877c:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800877e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008780:	899b      	ldrh	r3, [r3, #12]
 8008782:	461a      	mov	r2, r3
 8008784:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008786:	4293      	cmp	r3, r2
 8008788:	d101      	bne.n	800878e <find_volume+0x3ce>
 800878a:	230d      	movs	r3, #13
 800878c:	e19b      	b.n	8008ac6 <find_volume+0x706>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800878e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008790:	f04f 32ff 	mov.w	r2, #4294967295
 8008794:	61da      	str	r2, [r3, #28]
 8008796:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008798:	69da      	ldr	r2, [r3, #28]
 800879a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800879c:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800879e:	2304      	movs	r3, #4
 80087a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80087a4:	e177      	b.n	8008a96 <find_volume+0x6d6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80087a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087a8:	333c      	adds	r3, #60	; 0x3c
 80087aa:	330b      	adds	r3, #11
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7fc fead 	bl	800550c <ld_word>
 80087b2:	4603      	mov	r3, r0
 80087b4:	461a      	mov	r2, r3
 80087b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087b8:	899b      	ldrh	r3, [r3, #12]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d001      	beq.n	80087c2 <find_volume+0x402>
 80087be:	230d      	movs	r3, #13
 80087c0:	e181      	b.n	8008ac6 <find_volume+0x706>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80087c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087c4:	333c      	adds	r3, #60	; 0x3c
 80087c6:	3316      	adds	r3, #22
 80087c8:	4618      	mov	r0, r3
 80087ca:	f7fc fe9f 	bl	800550c <ld_word>
 80087ce:	4603      	mov	r3, r0
 80087d0:	657b      	str	r3, [r7, #84]	; 0x54
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80087d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d106      	bne.n	80087e6 <find_volume+0x426>
 80087d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087da:	333c      	adds	r3, #60	; 0x3c
 80087dc:	3324      	adds	r3, #36	; 0x24
 80087de:	4618      	mov	r0, r3
 80087e0:	f7fc feac 	bl	800553c <ld_dword>
 80087e4:	6578      	str	r0, [r7, #84]	; 0x54
		fs->fsize = fasize;
 80087e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80087ea:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80087ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087ee:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 80087f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087f4:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80087f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087f8:	789b      	ldrb	r3, [r3, #2]
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d005      	beq.n	800880a <find_volume+0x44a>
 80087fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008800:	789b      	ldrb	r3, [r3, #2]
 8008802:	2b02      	cmp	r3, #2
 8008804:	d001      	beq.n	800880a <find_volume+0x44a>
 8008806:	230d      	movs	r3, #13
 8008808:	e15d      	b.n	8008ac6 <find_volume+0x706>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800880a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800880c:	789b      	ldrb	r3, [r3, #2]
 800880e:	461a      	mov	r2, r3
 8008810:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008812:	fb02 f303 	mul.w	r3, r2, r3
 8008816:	657b      	str	r3, [r7, #84]	; 0x54

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800881a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800881e:	b29a      	uxth	r2, r3
 8008820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008822:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008826:	895b      	ldrh	r3, [r3, #10]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d008      	beq.n	800883e <find_volume+0x47e>
 800882c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800882e:	895b      	ldrh	r3, [r3, #10]
 8008830:	461a      	mov	r2, r3
 8008832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008834:	895b      	ldrh	r3, [r3, #10]
 8008836:	3b01      	subs	r3, #1
 8008838:	4013      	ands	r3, r2
 800883a:	2b00      	cmp	r3, #0
 800883c:	d001      	beq.n	8008842 <find_volume+0x482>
 800883e:	230d      	movs	r3, #13
 8008840:	e141      	b.n	8008ac6 <find_volume+0x706>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008842:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008844:	333c      	adds	r3, #60	; 0x3c
 8008846:	3311      	adds	r3, #17
 8008848:	4618      	mov	r0, r3
 800884a:	f7fc fe5f 	bl	800550c <ld_word>
 800884e:	4603      	mov	r3, r0
 8008850:	461a      	mov	r2, r3
 8008852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008854:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008858:	891b      	ldrh	r3, [r3, #8]
 800885a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800885c:	8992      	ldrh	r2, [r2, #12]
 800885e:	0952      	lsrs	r2, r2, #5
 8008860:	b292      	uxth	r2, r2
 8008862:	fbb3 f1f2 	udiv	r1, r3, r2
 8008866:	fb02 f201 	mul.w	r2, r2, r1
 800886a:	1a9b      	subs	r3, r3, r2
 800886c:	b29b      	uxth	r3, r3
 800886e:	2b00      	cmp	r3, #0
 8008870:	d001      	beq.n	8008876 <find_volume+0x4b6>
 8008872:	230d      	movs	r3, #13
 8008874:	e127      	b.n	8008ac6 <find_volume+0x706>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008878:	333c      	adds	r3, #60	; 0x3c
 800887a:	3313      	adds	r3, #19
 800887c:	4618      	mov	r0, r3
 800887e:	f7fc fe45 	bl	800550c <ld_word>
 8008882:	4603      	mov	r3, r0
 8008884:	653b      	str	r3, [r7, #80]	; 0x50
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008886:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008888:	2b00      	cmp	r3, #0
 800888a:	d106      	bne.n	800889a <find_volume+0x4da>
 800888c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800888e:	333c      	adds	r3, #60	; 0x3c
 8008890:	3320      	adds	r3, #32
 8008892:	4618      	mov	r0, r3
 8008894:	f7fc fe52 	bl	800553c <ld_dword>
 8008898:	6538      	str	r0, [r7, #80]	; 0x50

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800889a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800889c:	333c      	adds	r3, #60	; 0x3c
 800889e:	330e      	adds	r3, #14
 80088a0:	4618      	mov	r0, r3
 80088a2:	f7fc fe33 	bl	800550c <ld_word>
 80088a6:	4603      	mov	r3, r0
 80088a8:	86fb      	strh	r3, [r7, #54]	; 0x36
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80088aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d101      	bne.n	80088b4 <find_volume+0x4f4>
 80088b0:	230d      	movs	r3, #13
 80088b2:	e108      	b.n	8008ac6 <find_volume+0x706>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80088b4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80088b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088b8:	4413      	add	r3, r2
 80088ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088bc:	8911      	ldrh	r1, [r2, #8]
 80088be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088c0:	8992      	ldrh	r2, [r2, #12]
 80088c2:	0952      	lsrs	r2, r2, #5
 80088c4:	b292      	uxth	r2, r2
 80088c6:	fbb1 f2f2 	udiv	r2, r1, r2
 80088ca:	b292      	uxth	r2, r2
 80088cc:	4413      	add	r3, r2
 80088ce:	633b      	str	r3, [r7, #48]	; 0x30
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80088d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80088d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d201      	bcs.n	80088dc <find_volume+0x51c>
 80088d8:	230d      	movs	r3, #13
 80088da:	e0f4      	b.n	8008ac6 <find_volume+0x706>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80088dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80088de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e0:	1ad3      	subs	r3, r2, r3
 80088e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088e4:	8952      	ldrh	r2, [r2, #10]
 80088e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80088ea:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80088ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d101      	bne.n	80088f6 <find_volume+0x536>
 80088f2:	230d      	movs	r3, #13
 80088f4:	e0e7      	b.n	8008ac6 <find_volume+0x706>
		fmt = FS_FAT32;
 80088f6:	2303      	movs	r3, #3
 80088f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80088fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088fe:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008902:	4293      	cmp	r3, r2
 8008904:	d802      	bhi.n	800890c <find_volume+0x54c>
 8008906:	2302      	movs	r3, #2
 8008908:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800890c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800890e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008912:	4293      	cmp	r3, r2
 8008914:	d802      	bhi.n	800891c <find_volume+0x55c>
 8008916:	2301      	movs	r3, #1
 8008918:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800891c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800891e:	1c9a      	adds	r2, r3, #2
 8008920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008922:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8008924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008926:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008928:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800892a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800892c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800892e:	441a      	add	r2, r3
 8008930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008932:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8008934:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008938:	441a      	add	r2, r3
 800893a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800893c:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800893e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008942:	2b03      	cmp	r3, #3
 8008944:	d11e      	bne.n	8008984 <find_volume+0x5c4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008946:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008948:	333c      	adds	r3, #60	; 0x3c
 800894a:	332a      	adds	r3, #42	; 0x2a
 800894c:	4618      	mov	r0, r3
 800894e:	f7fc fddd 	bl	800550c <ld_word>
 8008952:	4603      	mov	r3, r0
 8008954:	2b00      	cmp	r3, #0
 8008956:	d001      	beq.n	800895c <find_volume+0x59c>
 8008958:	230d      	movs	r3, #13
 800895a:	e0b4      	b.n	8008ac6 <find_volume+0x706>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800895c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800895e:	891b      	ldrh	r3, [r3, #8]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d001      	beq.n	8008968 <find_volume+0x5a8>
 8008964:	230d      	movs	r3, #13
 8008966:	e0ae      	b.n	8008ac6 <find_volume+0x706>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800896a:	333c      	adds	r3, #60	; 0x3c
 800896c:	332c      	adds	r3, #44	; 0x2c
 800896e:	4618      	mov	r0, r3
 8008970:	f7fc fde4 	bl	800553c <ld_dword>
 8008974:	4602      	mov	r2, r0
 8008976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008978:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800897a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800897c:	6a1b      	ldr	r3, [r3, #32]
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008982:	e01f      	b.n	80089c4 <find_volume+0x604>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008986:	891b      	ldrh	r3, [r3, #8]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d101      	bne.n	8008990 <find_volume+0x5d0>
 800898c:	230d      	movs	r3, #13
 800898e:	e09a      	b.n	8008ac6 <find_volume+0x706>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008994:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008996:	441a      	add	r2, r3
 8008998:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800899a:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800899c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089a0:	2b02      	cmp	r3, #2
 80089a2:	d103      	bne.n	80089ac <find_volume+0x5ec>
 80089a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089a6:	6a1b      	ldr	r3, [r3, #32]
 80089a8:	005b      	lsls	r3, r3, #1
 80089aa:	e00a      	b.n	80089c2 <find_volume+0x602>
 80089ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089ae:	6a1a      	ldr	r2, [r3, #32]
 80089b0:	4613      	mov	r3, r2
 80089b2:	005b      	lsls	r3, r3, #1
 80089b4:	4413      	add	r3, r2
 80089b6:	085a      	lsrs	r2, r3, #1
 80089b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089ba:	6a1b      	ldr	r3, [r3, #32]
 80089bc:	f003 0301 	and.w	r3, r3, #1
 80089c0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80089c2:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80089c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089ca:	899b      	ldrh	r3, [r3, #12]
 80089cc:	4619      	mov	r1, r3
 80089ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089d0:	440b      	add	r3, r1
 80089d2:	3b01      	subs	r3, #1
 80089d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80089d6:	8989      	ldrh	r1, [r1, #12]
 80089d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80089dc:	429a      	cmp	r2, r3
 80089de:	d201      	bcs.n	80089e4 <find_volume+0x624>
 80089e0:	230d      	movs	r3, #13
 80089e2:	e070      	b.n	8008ac6 <find_volume+0x706>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80089e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089e6:	f04f 32ff 	mov.w	r2, #4294967295
 80089ea:	61da      	str	r2, [r3, #28]
 80089ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089ee:	69da      	ldr	r2, [r3, #28]
 80089f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089f2:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 80089f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089f6:	2280      	movs	r2, #128	; 0x80
 80089f8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80089fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089fe:	2b03      	cmp	r3, #3
 8008a00:	d149      	bne.n	8008a96 <find_volume+0x6d6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008a02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a04:	333c      	adds	r3, #60	; 0x3c
 8008a06:	3330      	adds	r3, #48	; 0x30
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7fc fd7f 	bl	800550c <ld_word>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d140      	bne.n	8008a96 <find_volume+0x6d6>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008a14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a16:	3301      	adds	r3, #1
 8008a18:	4619      	mov	r1, r3
 8008a1a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008a1c:	f7fd f96a 	bl	8005cf4 <move_window>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d137      	bne.n	8008a96 <find_volume+0x6d6>
		{
			fs->fsi_flag = 0;
 8008a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a28:	2200      	movs	r2, #0
 8008a2a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008a2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a2e:	333c      	adds	r3, #60	; 0x3c
 8008a30:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008a34:	4618      	mov	r0, r3
 8008a36:	f7fc fd69 	bl	800550c <ld_word>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d127      	bne.n	8008a96 <find_volume+0x6d6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a48:	333c      	adds	r3, #60	; 0x3c
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7fc fd76 	bl	800553c <ld_dword>
 8008a50:	4602      	mov	r2, r0
 8008a52:	4b1f      	ldr	r3, [pc, #124]	; (8008ad0 <find_volume+0x710>)
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d11e      	bne.n	8008a96 <find_volume+0x6d6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a5a:	333c      	adds	r3, #60	; 0x3c
 8008a5c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7fc fd6b 	bl	800553c <ld_dword>
 8008a66:	4602      	mov	r2, r0
 8008a68:	4b1a      	ldr	r3, [pc, #104]	; (8008ad4 <find_volume+0x714>)
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d113      	bne.n	8008a96 <find_volume+0x6d6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a70:	333c      	adds	r3, #60	; 0x3c
 8008a72:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7fc fd60 	bl	800553c <ld_dword>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a80:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008a82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a84:	333c      	adds	r3, #60	; 0x3c
 8008a86:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7fc fd56 	bl	800553c <ld_dword>
 8008a90:	4602      	mov	r2, r0
 8008a92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a94:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008a96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a98:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8008a9c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008a9e:	4b0e      	ldr	r3, [pc, #56]	; (8008ad8 <find_volume+0x718>)
 8008aa0:	881b      	ldrh	r3, [r3, #0]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	4b0c      	ldr	r3, [pc, #48]	; (8008ad8 <find_volume+0x718>)
 8008aa8:	801a      	strh	r2, [r3, #0]
 8008aaa:	4b0b      	ldr	r3, [pc, #44]	; (8008ad8 <find_volume+0x718>)
 8008aac:	881a      	ldrh	r2, [r3, #0]
 8008aae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ab0:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8008ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ab4:	4a09      	ldr	r2, [pc, #36]	; (8008adc <find_volume+0x71c>)
 8008ab6:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 8008ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008aba:	4a09      	ldr	r2, [pc, #36]	; (8008ae0 <find_volume+0x720>)
 8008abc:	615a      	str	r2, [r3, #20]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008abe:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008ac0:	f7fd f8b0 	bl	8005c24 <clear_lock>
#endif
	return FR_OK;
 8008ac4:	2300      	movs	r3, #0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3760      	adds	r7, #96	; 0x60
 8008aca:	46bd      	mov	sp, r7
 8008acc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8008ad0:	41615252 	.word	0x41615252
 8008ad4:	61417272 	.word	0x61417272
 8008ad8:	200000c8 	.word	0x200000c8
 8008adc:	2000014c 	.word	0x2000014c
 8008ae0:	200000ec 	.word	0x200000ec

08008ae4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008aee:	2309      	movs	r3, #9
 8008af0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d01c      	beq.n	8008b32 <validate+0x4e>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d018      	beq.n	8008b32 <validate+0x4e>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d013      	beq.n	8008b32 <validate+0x4e>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	889a      	ldrh	r2, [r3, #4]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	88db      	ldrh	r3, [r3, #6]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d10c      	bne.n	8008b32 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	785b      	ldrb	r3, [r3, #1]
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7fc fc56 	bl	80053d0 <disk_status>
 8008b24:	4603      	mov	r3, r0
 8008b26:	f003 0301 	and.w	r3, r3, #1
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d101      	bne.n	8008b32 <validate+0x4e>
			res = FR_OK;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008b32:	7bfb      	ldrb	r3, [r7, #15]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d102      	bne.n	8008b3e <validate+0x5a>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	e000      	b.n	8008b40 <validate+0x5c>
 8008b3e:	2300      	movs	r3, #0
 8008b40:	683a      	ldr	r2, [r7, #0]
 8008b42:	6013      	str	r3, [r2, #0]
	return res;
 8008b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
	...

08008b50 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b088      	sub	sp, #32
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008b62:	f107 0310 	add.w	r3, r7, #16
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7ff fb81 	bl	800826e <get_ldnumber>
 8008b6c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008b6e:	69fb      	ldr	r3, [r7, #28]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	da01      	bge.n	8008b78 <f_mount+0x28>
 8008b74:	230b      	movs	r3, #11
 8008b76:	e02b      	b.n	8008bd0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008b78:	4a17      	ldr	r2, [pc, #92]	; (8008bd8 <f_mount+0x88>)
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b80:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008b82:	69bb      	ldr	r3, [r7, #24]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d005      	beq.n	8008b94 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008b88:	69b8      	ldr	r0, [r7, #24]
 8008b8a:	f7fd f84b 	bl	8005c24 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008b8e:	69bb      	ldr	r3, [r7, #24]
 8008b90:	2200      	movs	r2, #0
 8008b92:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d002      	beq.n	8008ba0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008ba0:	68fa      	ldr	r2, [r7, #12]
 8008ba2:	490d      	ldr	r1, [pc, #52]	; (8008bd8 <f_mount+0x88>)
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d002      	beq.n	8008bb6 <f_mount+0x66>
 8008bb0:	79fb      	ldrb	r3, [r7, #7]
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d001      	beq.n	8008bba <f_mount+0x6a>
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	e00a      	b.n	8008bd0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008bba:	f107 010c 	add.w	r1, r7, #12
 8008bbe:	f107 0308 	add.w	r3, r7, #8
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7ff fbfb 	bl	80083c0 <find_volume>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3720      	adds	r7, #32
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	200000c4 	.word	0x200000c4

08008bdc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008bdc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008be0:	b0a2      	sub	sp, #136	; 0x88
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	60f8      	str	r0, [r7, #12]
 8008be6:	60b9      	str	r1, [r7, #8]
 8008be8:	4613      	mov	r3, r2
 8008bea:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d101      	bne.n	8008bf6 <f_open+0x1a>
 8008bf2:	2309      	movs	r3, #9
 8008bf4:	e2a8      	b.n	8009148 <f_open+0x56c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008bf6:	79fb      	ldrb	r3, [r7, #7]
 8008bf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bfc:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008bfe:	79fa      	ldrb	r2, [r7, #7]
 8008c00:	f107 0114 	add.w	r1, r7, #20
 8008c04:	f107 0308 	add.w	r3, r7, #8
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f7ff fbd9 	bl	80083c0 <find_volume>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	if (res == FR_OK) {
 8008c14:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	f040 828c 	bne.w	8009136 <f_open+0x55a>
		dj.obj.fs = fs;
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008c22:	68ba      	ldr	r2, [r7, #8]
 8008c24:	f107 0318 	add.w	r3, r7, #24
 8008c28:	4611      	mov	r1, r2
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7ff fa72 	bl	8008114 <follow_path>
 8008c30:	4603      	mov	r3, r0
 8008c32:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008c36:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d11a      	bne.n	8008c74 <f_open+0x98>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008c3e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8008c42:	b25b      	sxtb	r3, r3
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	da03      	bge.n	8008c50 <f_open+0x74>
				res = FR_INVALID_NAME;
 8008c48:	2306      	movs	r3, #6
 8008c4a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8008c4e:	e011      	b.n	8008c74 <f_open+0x98>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008c50:	79fb      	ldrb	r3, [r7, #7]
 8008c52:	f023 0301 	bic.w	r3, r3, #1
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	bf14      	ite	ne
 8008c5a:	2301      	movne	r3, #1
 8008c5c:	2300      	moveq	r3, #0
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	461a      	mov	r2, r3
 8008c62:	f107 0318 	add.w	r3, r7, #24
 8008c66:	4611      	mov	r1, r2
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f7fc fe93 	bl	8005994 <chk_lock>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008c74:	79fb      	ldrb	r3, [r7, #7]
 8008c76:	f003 031c 	and.w	r3, r3, #28
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	f000 8109 	beq.w	8008e92 <f_open+0x2b6>
			if (res != FR_OK) {					/* No file, create new */
 8008c80:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d017      	beq.n	8008cb8 <f_open+0xdc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008c88:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8008c8c:	2b04      	cmp	r3, #4
 8008c8e:	d10e      	bne.n	8008cae <f_open+0xd2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008c90:	f7fc fedc 	bl	8005a4c <enq_lock>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d006      	beq.n	8008ca8 <f_open+0xcc>
 8008c9a:	f107 0318 	add.w	r3, r7, #24
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7fe fed0 	bl	8007a44 <dir_register>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	e000      	b.n	8008caa <f_open+0xce>
 8008ca8:	2312      	movs	r3, #18
 8008caa:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008cae:	79fb      	ldrb	r3, [r7, #7]
 8008cb0:	f043 0308 	orr.w	r3, r3, #8
 8008cb4:	71fb      	strb	r3, [r7, #7]
 8008cb6:	e010      	b.n	8008cda <f_open+0xfe>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008cb8:	7fbb      	ldrb	r3, [r7, #30]
 8008cba:	f003 0311 	and.w	r3, r3, #17
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d003      	beq.n	8008cca <f_open+0xee>
					res = FR_DENIED;
 8008cc2:	2307      	movs	r3, #7
 8008cc4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8008cc8:	e007      	b.n	8008cda <f_open+0xfe>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008cca:	79fb      	ldrb	r3, [r7, #7]
 8008ccc:	f003 0304 	and.w	r3, r3, #4
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d002      	beq.n	8008cda <f_open+0xfe>
 8008cd4:	2308      	movs	r3, #8
 8008cd6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008cda:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	f040 80f1 	bne.w	8008ec6 <f_open+0x2ea>
 8008ce4:	79fb      	ldrb	r3, [r7, #7]
 8008ce6:	f003 0308 	and.w	r3, r3, #8
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	f000 80eb 	beq.w	8008ec6 <f_open+0x2ea>
				dw = GET_FATTIME();
 8008cf0:	f7fc f9e6 	bl	80050c0 <get_fattime>
 8008cf4:	6778      	str	r0, [r7, #116]	; 0x74
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	2b04      	cmp	r3, #4
 8008cfc:	f040 8082 	bne.w	8008e04 <f_open+0x228>
					/* Get current allocation info */
					fp->obj.fs = fs;
 8008d00:	697a      	ldr	r2, [r7, #20]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	695b      	ldr	r3, [r3, #20]
 8008d0a:	3334      	adds	r3, #52	; 0x34
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7fc fc15 	bl	800553c <ld_dword>
 8008d12:	4602      	mov	r2, r0
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	695b      	ldr	r3, [r3, #20]
 8008d1c:	3338      	adds	r3, #56	; 0x38
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7fc fc2f 	bl	8005582 <ld_qword>
 8008d24:	4603      	mov	r3, r0
 8008d26:	460c      	mov	r4, r1
 8008d28:	68fa      	ldr	r2, [r7, #12]
 8008d2a:	e9c2 3404 	strd	r3, r4, [r2, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	695b      	ldr	r3, [r3, #20]
 8008d32:	3321      	adds	r3, #33	; 0x21
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	f003 0302 	and.w	r3, r3, #2
 8008d3a:	b2da      	uxtb	r2, r3
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2200      	movs	r2, #0
 8008d44:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	695b      	ldr	r3, [r3, #20]
 8008d4a:	3308      	adds	r3, #8
 8008d4c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f7fc fcef 	bl	8005732 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	695b      	ldr	r3, [r3, #20]
 8008d58:	3314      	adds	r3, #20
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	695b      	ldr	r3, [r3, #20]
 8008d62:	330c      	adds	r3, #12
 8008d64:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7fc fce3 	bl	8005732 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	695b      	ldr	r3, [r3, #20]
 8008d70:	3315      	adds	r3, #21
 8008d72:	2200      	movs	r2, #0
 8008d74:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	695b      	ldr	r3, [r3, #20]
 8008d7a:	3304      	adds	r3, #4
 8008d7c:	2220      	movs	r2, #32
 8008d7e:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	695b      	ldr	r3, [r3, #20]
 8008d84:	3334      	adds	r3, #52	; 0x34
 8008d86:	2100      	movs	r1, #0
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f7fc fcd2 	bl	8005732 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	695b      	ldr	r3, [r3, #20]
 8008d92:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008d96:	f04f 0200 	mov.w	r2, #0
 8008d9a:	f04f 0300 	mov.w	r3, #0
 8008d9e:	4608      	mov	r0, r1
 8008da0:	f7fc fcf3 	bl	800578a <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	695b      	ldr	r3, [r3, #20]
 8008da8:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8008dac:	f04f 0200 	mov.w	r2, #0
 8008db0:	f04f 0300 	mov.w	r3, #0
 8008db4:	4608      	mov	r0, r1
 8008db6:	f7fc fce8 	bl	800578a <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	695b      	ldr	r3, [r3, #20]
 8008dbe:	3321      	adds	r3, #33	; 0x21
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 8008dc4:	f107 0318 	add.w	r3, r7, #24
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f7fe fb82 	bl	80074d2 <store_xdir>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 8008dd4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d174      	bne.n	8008ec6 <f_open+0x2ea>
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d070      	beq.n	8008ec6 <f_open+0x2ea>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8008de4:	68f8      	ldr	r0, [r7, #12]
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	2200      	movs	r2, #0
 8008dec:	4619      	mov	r1, r3
 8008dee:	f7fd fc11 	bl	8006614 <remove_chain>
 8008df2:	4603      	mov	r3, r0
 8008df4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	689a      	ldr	r2, [r3, #8]
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	3a01      	subs	r2, #1
 8008e00:	619a      	str	r2, [r3, #24]
 8008e02:	e060      	b.n	8008ec6 <f_open+0x2ea>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008e04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e06:	330e      	adds	r3, #14
 8008e08:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7fc fc91 	bl	8005732 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008e10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e12:	3316      	adds	r3, #22
 8008e14:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7fc fc8b 	bl	8005732 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008e1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e1e:	330b      	adds	r3, #11
 8008e20:	2220      	movs	r2, #32
 8008e22:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008e28:	4611      	mov	r1, r2
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7fd ffc4 	bl	8006db8 <ld_clust>
 8008e30:	6738      	str	r0, [r7, #112]	; 0x70
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008e36:	2200      	movs	r2, #0
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f7fd ffdc 	bl	8006df6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008e3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e40:	331c      	adds	r3, #28
 8008e42:	2100      	movs	r1, #0
 8008e44:	4618      	mov	r0, r3
 8008e46:	f7fc fc74 	bl	8005732 <st_dword>
					fs->wflag = 1;
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008e50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d037      	beq.n	8008ec6 <f_open+0x2ea>
						dw = fs->winsect;
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5a:	677b      	str	r3, [r7, #116]	; 0x74
						res = remove_chain(&dj.obj, cl, 0);
 8008e5c:	f107 0318 	add.w	r3, r7, #24
 8008e60:	2200      	movs	r2, #0
 8008e62:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8008e64:	4618      	mov	r0, r3
 8008e66:	f7fd fbd5 	bl	8006614 <remove_chain>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						if (res == FR_OK) {
 8008e70:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d126      	bne.n	8008ec6 <f_open+0x2ea>
							res = move_window(fs, dw);
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7fc ff39 	bl	8005cf4 <move_window>
 8008e82:	4603      	mov	r3, r0
 8008e84:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008e8c:	3a01      	subs	r2, #1
 8008e8e:	619a      	str	r2, [r3, #24]
 8008e90:	e019      	b.n	8008ec6 <f_open+0x2ea>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008e92:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d115      	bne.n	8008ec6 <f_open+0x2ea>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008e9a:	7fbb      	ldrb	r3, [r7, #30]
 8008e9c:	f003 0310 	and.w	r3, r3, #16
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d003      	beq.n	8008eac <f_open+0x2d0>
					res = FR_NO_FILE;
 8008ea4:	2304      	movs	r3, #4
 8008ea6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8008eaa:	e00c      	b.n	8008ec6 <f_open+0x2ea>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008eac:	79fb      	ldrb	r3, [r7, #7]
 8008eae:	f003 0302 	and.w	r3, r3, #2
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d007      	beq.n	8008ec6 <f_open+0x2ea>
 8008eb6:	7fbb      	ldrb	r3, [r7, #30]
 8008eb8:	f003 0301 	and.w	r3, r3, #1
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d002      	beq.n	8008ec6 <f_open+0x2ea>
						res = FR_DENIED;
 8008ec0:	2307      	movs	r3, #7
 8008ec2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					}
				}
			}
		}
		if (res == FR_OK) {
 8008ec6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d128      	bne.n	8008f20 <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008ece:	79fb      	ldrb	r3, [r7, #7]
 8008ed0:	f003 0308 	and.w	r3, r3, #8
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d003      	beq.n	8008ee0 <f_open+0x304>
				mode |= FA_MODIFIED;
 8008ed8:	79fb      	ldrb	r3, [r7, #7]
 8008eda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ede:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 8008ee8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008eee:	79fb      	ldrb	r3, [r7, #7]
 8008ef0:	f023 0301 	bic.w	r3, r3, #1
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	bf14      	ite	ne
 8008ef8:	2301      	movne	r3, #1
 8008efa:	2300      	moveq	r3, #0
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	461a      	mov	r2, r3
 8008f00:	f107 0318 	add.w	r3, r7, #24
 8008f04:	4611      	mov	r1, r2
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7fc fdc2 	bl	8005a90 <inc_lock>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d102      	bne.n	8008f20 <f_open+0x344>
 8008f1a:	2302      	movs	r3, #2
 8008f1c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008f20:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	f040 8106 	bne.w	8009136 <f_open+0x55a>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	2b04      	cmp	r3, #4
 8008f30:	d12b      	bne.n	8008f8a <f_open+0x3ae>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 8008f32:	6a3a      	ldr	r2, [r7, #32]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 8008f38:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8008f3c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008f40:	7ffa      	ldrb	r2, [r7, #31]
 8008f42:	431a      	orrs	r2, r3
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 8008f48:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	695b      	ldr	r3, [r3, #20]
 8008f52:	3334      	adds	r3, #52	; 0x34
 8008f54:	4618      	mov	r0, r3
 8008f56:	f7fc faf1 	bl	800553c <ld_dword>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	695b      	ldr	r3, [r3, #20]
 8008f64:	3338      	adds	r3, #56	; 0x38
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7fc fb0b 	bl	8005582 <ld_qword>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	460c      	mov	r4, r1
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	e9c2 3404 	strd	r3, r4, [r2, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	695b      	ldr	r3, [r3, #20]
 8008f7a:	3321      	adds	r3, #33	; 0x21
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	f003 0302 	and.w	r3, r3, #2
 8008f82:	b2da      	uxtb	r2, r3
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	71da      	strb	r2, [r3, #7]
 8008f88:	e013      	b.n	8008fb2 <f_open+0x3d6>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f8e:	4611      	mov	r1, r2
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7fd ff11 	bl	8006db8 <ld_clust>
 8008f96:	4602      	mov	r2, r0
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008f9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f9e:	331c      	adds	r3, #28
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f7fc facb 	bl	800553c <ld_dword>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	f04f 0400 	mov.w	r4, #0
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	e9c2 3404 	strd	r3, r4, [r2, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008fb8:	697a      	ldr	r2, [r7, #20]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	88da      	ldrh	r2, [r3, #6]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	79fa      	ldrb	r2, [r7, #7]
 8008fca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008fdc:	68fa      	ldr	r2, [r7, #12]
 8008fde:	f04f 0300 	mov.w	r3, #0
 8008fe2:	f04f 0400 	mov.w	r4, #0
 8008fe6:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	3354      	adds	r3, #84	; 0x54
 8008fee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008ff2:	2100      	movs	r1, #0
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7fc fc70 	bl	80058da <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008ffa:	79fb      	ldrb	r3, [r7, #7]
 8008ffc:	f003 0320 	and.w	r3, r3, #32
 8009000:	2b00      	cmp	r3, #0
 8009002:	f000 8098 	beq.w	8009136 <f_open+0x55a>
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800900c:	4323      	orrs	r3, r4
 800900e:	f000 8092 	beq.w	8009136 <f_open+0x55a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	895b      	ldrh	r3, [r3, #10]
 8009022:	461a      	mov	r2, r3
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	899b      	ldrh	r3, [r3, #12]
 8009028:	fb03 f302 	mul.w	r3, r3, r2
 800902c:	66fb      	str	r3, [r7, #108]	; 0x6c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800903c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 8009040:	e024      	b.n	800908c <f_open+0x4b0>
					clst = get_fat(&fp->obj, clst);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8009048:	4618      	mov	r0, r3
 800904a:	f7fc ff11 	bl	8005e70 <get_fat>
 800904e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
					if (clst <= 1) res = FR_INT_ERR;
 8009052:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009056:	2b01      	cmp	r3, #1
 8009058:	d802      	bhi.n	8009060 <f_open+0x484>
 800905a:	2302      	movs	r3, #2
 800905c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009060:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009068:	d102      	bne.n	8009070 <f_open+0x494>
 800906a:	2301      	movs	r3, #1
 800906c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009072:	469b      	mov	fp, r3
 8009074:	f04f 0c00 	mov.w	ip, #0
 8009078:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800907c:	460b      	mov	r3, r1
 800907e:	4614      	mov	r4, r2
 8009080:	ebb3 030b 	subs.w	r3, r3, fp
 8009084:	eb64 040c 	sbc.w	r4, r4, ip
 8009088:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 800908c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8009090:	2b00      	cmp	r3, #0
 8009092:	d109      	bne.n	80090a8 <f_open+0x4cc>
 8009094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009096:	4619      	mov	r1, r3
 8009098:	f04f 0200 	mov.w	r2, #0
 800909c:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80090a0:	42a2      	cmp	r2, r4
 80090a2:	bf08      	it	eq
 80090a4:	4299      	cmpeq	r1, r3
 80090a6:	d3cc      	bcc.n	8009042 <f_open+0x466>
				}
				fp->clust = clst;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80090ae:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80090b0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d13e      	bne.n	8009136 <f_open+0x55a>
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	899b      	ldrh	r3, [r3, #12]
 80090bc:	b29b      	uxth	r3, r3
 80090be:	f04f 0400 	mov.w	r4, #0
 80090c2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80090c6:	461a      	mov	r2, r3
 80090c8:	4623      	mov	r3, r4
 80090ca:	f7f7 f8f1 	bl	80002b0 <__aeabi_uldivmod>
 80090ce:	461c      	mov	r4, r3
 80090d0:	4613      	mov	r3, r2
 80090d2:	4323      	orrs	r3, r4
 80090d4:	d02f      	beq.n	8009136 <f_open+0x55a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80090dc:	4618      	mov	r0, r3
 80090de:	f7fc fea7 	bl	8005e30 <clust2sect>
 80090e2:	66b8      	str	r0, [r7, #104]	; 0x68
 80090e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d103      	bne.n	80090f2 <f_open+0x516>
						res = FR_INT_ERR;
 80090ea:	2302      	movs	r3, #2
 80090ec:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80090f0:	e021      	b.n	8009136 <f_open+0x55a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	899b      	ldrh	r3, [r3, #12]
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	f04f 0400 	mov.w	r4, #0
 80090fc:	461a      	mov	r2, r3
 80090fe:	4623      	mov	r3, r4
 8009100:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8009104:	f7f7 f8d4 	bl	80002b0 <__aeabi_uldivmod>
 8009108:	4603      	mov	r3, r0
 800910a:	460c      	mov	r4, r1
 800910c:	461a      	mov	r2, r3
 800910e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009110:	441a      	add	r2, r3
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	7858      	ldrb	r0, [r3, #1]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009124:	2301      	movs	r3, #1
 8009126:	f7fc f993 	bl	8005450 <disk_read>
 800912a:	4603      	mov	r3, r0
 800912c:	2b00      	cmp	r3, #0
 800912e:	d002      	beq.n	8009136 <f_open+0x55a>
 8009130:	2301      	movs	r3, #1
 8009132:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009136:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800913a:	2b00      	cmp	r3, #0
 800913c:	d002      	beq.n	8009144 <f_open+0x568>
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2200      	movs	r2, #0
 8009142:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009144:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8009148:	4618      	mov	r0, r3
 800914a:	3788      	adds	r7, #136	; 0x88
 800914c:	46bd      	mov	sp, r7
 800914e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08009152 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009152:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009154:	b08d      	sub	sp, #52	; 0x34
 8009156:	af00      	add	r7, sp, #0
 8009158:	60f8      	str	r0, [r7, #12]
 800915a:	60b9      	str	r1, [r7, #8]
 800915c:	607a      	str	r2, [r7, #4]
 800915e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	2200      	movs	r2, #0
 8009168:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f107 0210 	add.w	r2, r7, #16
 8009170:	4611      	mov	r1, r2
 8009172:	4618      	mov	r0, r3
 8009174:	f7ff fcb6 	bl	8008ae4 <validate>
 8009178:	4603      	mov	r3, r0
 800917a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800917e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009182:	2b00      	cmp	r3, #0
 8009184:	d108      	bne.n	8009198 <f_write+0x46>
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800918c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009190:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009194:	2b00      	cmp	r3, #0
 8009196:	d002      	beq.n	800919e <f_write+0x4c>
 8009198:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800919c:	e1ab      	b.n	80094f6 <f_write+0x3a4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80091a4:	f003 0302 	and.w	r3, r3, #2
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d101      	bne.n	80091b0 <f_write+0x5e>
 80091ac:	2307      	movs	r3, #7
 80091ae:	e1a2      	b.n	80094f6 <f_write+0x3a4>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	2b04      	cmp	r3, #4
 80091b6:	f000 818e 	beq.w	80094d6 <f_write+0x384>
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80091c0:	461a      	mov	r2, r3
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	441a      	add	r2, r3
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80091cc:	429a      	cmp	r2, r3
 80091ce:	f080 8182 	bcs.w	80094d6 <f_write+0x384>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80091d8:	43db      	mvns	r3, r3
 80091da:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80091dc:	e17b      	b.n	80094d6 <f_write+0x384>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	899b      	ldrh	r3, [r3, #12]
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	f04f 0400 	mov.w	r4, #0
 80091ee:	461a      	mov	r2, r3
 80091f0:	4623      	mov	r3, r4
 80091f2:	f7f7 f85d 	bl	80002b0 <__aeabi_uldivmod>
 80091f6:	461c      	mov	r4, r3
 80091f8:	4613      	mov	r3, r2
 80091fa:	4323      	orrs	r3, r4
 80091fc:	f040 810c 	bne.w	8009418 <f_write+0x2c6>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	899b      	ldrh	r3, [r3, #12]
 800920a:	b29b      	uxth	r3, r3
 800920c:	f04f 0400 	mov.w	r4, #0
 8009210:	461a      	mov	r2, r3
 8009212:	4623      	mov	r3, r4
 8009214:	f7f7 f84c 	bl	80002b0 <__aeabi_uldivmod>
 8009218:	4603      	mov	r3, r0
 800921a:	460c      	mov	r4, r1
 800921c:	461a      	mov	r2, r3
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	895b      	ldrh	r3, [r3, #10]
 8009222:	3b01      	subs	r3, #1
 8009224:	4013      	ands	r3, r2
 8009226:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009228:	69bb      	ldr	r3, [r7, #24]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d148      	bne.n	80092c0 <f_write+0x16e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8009234:	4323      	orrs	r3, r4
 8009236:	d10c      	bne.n	8009252 <f_write+0x100>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	689b      	ldr	r3, [r3, #8]
 800923c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800923e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009240:	2b00      	cmp	r3, #0
 8009242:	d11c      	bne.n	800927e <f_write+0x12c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2100      	movs	r1, #0
 8009248:	4618      	mov	r0, r3
 800924a:	f7fd fa97 	bl	800677c <create_chain>
 800924e:	62b8      	str	r0, [r7, #40]	; 0x28
 8009250:	e015      	b.n	800927e <f_write+0x12c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009256:	2b00      	cmp	r3, #0
 8009258:	d009      	beq.n	800926e <f_write+0x11c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8009260:	461a      	mov	r2, r3
 8009262:	4623      	mov	r3, r4
 8009264:	68f8      	ldr	r0, [r7, #12]
 8009266:	f7fd fb8a 	bl	800697e <clmt_clust>
 800926a:	62b8      	str	r0, [r7, #40]	; 0x28
 800926c:	e007      	b.n	800927e <f_write+0x12c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800926e:	68fa      	ldr	r2, [r7, #12]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009274:	4619      	mov	r1, r3
 8009276:	4610      	mov	r0, r2
 8009278:	f7fd fa80 	bl	800677c <create_chain>
 800927c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800927e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009280:	2b00      	cmp	r3, #0
 8009282:	f000 812d 	beq.w	80094e0 <f_write+0x38e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009288:	2b01      	cmp	r3, #1
 800928a:	d105      	bne.n	8009298 <f_write+0x146>
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2202      	movs	r2, #2
 8009290:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8009294:	2302      	movs	r3, #2
 8009296:	e12e      	b.n	80094f6 <f_write+0x3a4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800929e:	d105      	bne.n	80092ac <f_write+0x15a>
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2201      	movs	r2, #1
 80092a4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80092a8:	2301      	movs	r3, #1
 80092aa:	e124      	b.n	80094f6 <f_write+0x3a4>
				fp->clust = clst;			/* Update current cluster */
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092b0:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d102      	bne.n	80092c0 <f_write+0x16e>
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092be:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80092c6:	b25b      	sxtb	r3, r3
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	da1b      	bge.n	8009304 <f_write+0x1b2>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	7858      	ldrb	r0, [r3, #1]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092da:	2301      	movs	r3, #1
 80092dc:	f7fc f8d8 	bl	8005490 <disk_write>
 80092e0:	4603      	mov	r3, r0
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d005      	beq.n	80092f2 <f_write+0x1a0>
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2201      	movs	r2, #1
 80092ea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80092ee:	2301      	movs	r3, #1
 80092f0:	e101      	b.n	80094f6 <f_write+0x3a4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80092f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092fc:	b2da      	uxtb	r2, r3
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009304:	693a      	ldr	r2, [r7, #16]
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800930a:	4619      	mov	r1, r3
 800930c:	4610      	mov	r0, r2
 800930e:	f7fc fd8f 	bl	8005e30 <clust2sect>
 8009312:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d105      	bne.n	8009326 <f_write+0x1d4>
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2202      	movs	r2, #2
 800931e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8009322:	2302      	movs	r3, #2
 8009324:	e0e7      	b.n	80094f6 <f_write+0x3a4>
			sect += csect;
 8009326:	697a      	ldr	r2, [r7, #20]
 8009328:	69bb      	ldr	r3, [r7, #24]
 800932a:	4413      	add	r3, r2
 800932c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	899b      	ldrh	r3, [r3, #12]
 8009332:	461a      	mov	r2, r3
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	fbb3 f3f2 	udiv	r3, r3, r2
 800933a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800933c:	6a3b      	ldr	r3, [r7, #32]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d046      	beq.n	80093d0 <f_write+0x27e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009342:	69ba      	ldr	r2, [r7, #24]
 8009344:	6a3b      	ldr	r3, [r7, #32]
 8009346:	4413      	add	r3, r2
 8009348:	693a      	ldr	r2, [r7, #16]
 800934a:	8952      	ldrh	r2, [r2, #10]
 800934c:	4293      	cmp	r3, r2
 800934e:	d905      	bls.n	800935c <f_write+0x20a>
					cc = fs->csize - csect;
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	895b      	ldrh	r3, [r3, #10]
 8009354:	461a      	mov	r2, r3
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	1ad3      	subs	r3, r2, r3
 800935a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	7858      	ldrb	r0, [r3, #1]
 8009360:	6a3b      	ldr	r3, [r7, #32]
 8009362:	697a      	ldr	r2, [r7, #20]
 8009364:	69f9      	ldr	r1, [r7, #28]
 8009366:	f7fc f893 	bl	8005490 <disk_write>
 800936a:	4603      	mov	r3, r0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d005      	beq.n	800937c <f_write+0x22a>
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2201      	movs	r2, #1
 8009374:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8009378:	2301      	movs	r3, #1
 800937a:	e0bc      	b.n	80094f6 <f_write+0x3a4>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	1ad3      	subs	r3, r2, r3
 8009384:	6a3a      	ldr	r2, [r7, #32]
 8009386:	429a      	cmp	r2, r3
 8009388:	d91a      	bls.n	80093c0 <f_write+0x26e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	1ad3      	subs	r3, r2, r3
 8009398:	693a      	ldr	r2, [r7, #16]
 800939a:	8992      	ldrh	r2, [r2, #12]
 800939c:	fb02 f303 	mul.w	r3, r2, r3
 80093a0:	69fa      	ldr	r2, [r7, #28]
 80093a2:	18d1      	adds	r1, r2, r3
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	899b      	ldrh	r3, [r3, #12]
 80093a8:	461a      	mov	r2, r3
 80093aa:	f7fc fa75 	bl	8005898 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80093b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093b8:	b2da      	uxtb	r2, r3
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	899b      	ldrh	r3, [r3, #12]
 80093c4:	461a      	mov	r2, r3
 80093c6:	6a3b      	ldr	r3, [r7, #32]
 80093c8:	fb02 f303 	mul.w	r3, r2, r3
 80093cc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80093ce:	e058      	b.n	8009482 <f_write+0x330>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093d4:	697a      	ldr	r2, [r7, #20]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d01b      	beq.n	8009412 <f_write+0x2c0>
				fp->fptr < fp->obj.objsize &&
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80093e6:	42a2      	cmp	r2, r4
 80093e8:	bf08      	it	eq
 80093ea:	4299      	cmpeq	r1, r3
 80093ec:	d211      	bcs.n	8009412 <f_write+0x2c0>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	7858      	ldrb	r0, [r3, #1]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80093f8:	2301      	movs	r3, #1
 80093fa:	697a      	ldr	r2, [r7, #20]
 80093fc:	f7fc f828 	bl	8005450 <disk_read>
 8009400:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009402:	2b00      	cmp	r3, #0
 8009404:	d005      	beq.n	8009412 <f_write+0x2c0>
					ABORT(fs, FR_DISK_ERR);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2201      	movs	r2, #1
 800940a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800940e:	2301      	movs	r3, #1
 8009410:	e071      	b.n	80094f6 <f_write+0x3a4>
			}
#endif
			fp->sect = sect;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	697a      	ldr	r2, [r7, #20]
 8009416:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	899b      	ldrh	r3, [r3, #12]
 800941c:	4618      	mov	r0, r3
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8009424:	693a      	ldr	r2, [r7, #16]
 8009426:	8992      	ldrh	r2, [r2, #12]
 8009428:	fbb3 f1f2 	udiv	r1, r3, r2
 800942c:	fb02 f201 	mul.w	r2, r2, r1
 8009430:	1a9b      	subs	r3, r3, r2
 8009432:	1ac3      	subs	r3, r0, r3
 8009434:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	429a      	cmp	r2, r3
 800943c:	d901      	bls.n	8009442 <f_write+0x2f0>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f103 0554 	add.w	r5, r3, #84	; 0x54
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	899b      	ldrh	r3, [r3, #12]
 8009452:	b29b      	uxth	r3, r3
 8009454:	f04f 0400 	mov.w	r4, #0
 8009458:	461a      	mov	r2, r3
 800945a:	4623      	mov	r3, r4
 800945c:	f7f6 ff28 	bl	80002b0 <__aeabi_uldivmod>
 8009460:	461c      	mov	r4, r3
 8009462:	4613      	mov	r3, r2
 8009464:	442b      	add	r3, r5
 8009466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009468:	69f9      	ldr	r1, [r7, #28]
 800946a:	4618      	mov	r0, r3
 800946c:	f7fc fa14 	bl	8005898 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009476:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800947a:	b2da      	uxtb	r2, r3
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009482:	69fa      	ldr	r2, [r7, #28]
 8009484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009486:	4413      	add	r3, r2
 8009488:	61fb      	str	r3, [r7, #28]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8009490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009492:	461d      	mov	r5, r3
 8009494:	f04f 0600 	mov.w	r6, #0
 8009498:	186b      	adds	r3, r5, r1
 800949a:	eb46 0402 	adc.w	r4, r6, r2
 800949e:	68fa      	ldr	r2, [r7, #12]
 80094a0:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80094aa:	68fa      	ldr	r2, [r7, #12]
 80094ac:	e9d2 120e 	ldrd	r1, r2, [r2, #56]	; 0x38
 80094b0:	4294      	cmp	r4, r2
 80094b2:	bf08      	it	eq
 80094b4:	428b      	cmpeq	r3, r1
 80094b6:	d201      	bcs.n	80094bc <f_write+0x36a>
 80094b8:	460b      	mov	r3, r1
 80094ba:	4614      	mov	r4, r2
 80094bc:	68fa      	ldr	r2, [r7, #12]
 80094be:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c8:	441a      	add	r2, r3
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	601a      	str	r2, [r3, #0]
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d2:	1ad3      	subs	r3, r2, r3
 80094d4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	f47f ae80 	bne.w	80091de <f_write+0x8c>
 80094de:	e000      	b.n	80094e2 <f_write+0x390>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80094e0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80094e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094ec:	b2da      	uxtb	r2, r3
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 80094f4:	2300      	movs	r3, #0
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3734      	adds	r7, #52	; 0x34
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080094fe <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80094fe:	b590      	push	{r4, r7, lr}
 8009500:	b09b      	sub	sp, #108	; 0x6c
 8009502:	af00      	add	r7, sp, #0
 8009504:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800950c:	4611      	mov	r1, r2
 800950e:	4618      	mov	r0, r3
 8009510:	f7ff fae8 	bl	8008ae4 <validate>
 8009514:	4603      	mov	r3, r0
 8009516:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800951a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800951e:	2b00      	cmp	r3, #0
 8009520:	f040 8109 	bne.w	8009736 <f_sync+0x238>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800952a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800952e:	2b00      	cmp	r3, #0
 8009530:	f000 8101 	beq.w	8009736 <f_sync+0x238>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800953a:	b25b      	sxtb	r3, r3
 800953c:	2b00      	cmp	r3, #0
 800953e:	da17      	bge.n	8009570 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009540:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009542:	7858      	ldrb	r0, [r3, #1]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800954e:	2301      	movs	r3, #1
 8009550:	f7fb ff9e 	bl	8005490 <disk_write>
 8009554:	4603      	mov	r3, r0
 8009556:	2b00      	cmp	r3, #0
 8009558:	d001      	beq.n	800955e <f_sync+0x60>
 800955a:	2301      	movs	r3, #1
 800955c:	e0ed      	b.n	800973a <f_sync+0x23c>
				fp->flag &= (BYTE)~FA_DIRTY;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009568:	b2da      	uxtb	r2, r3
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009570:	f7fb fda6 	bl	80050c0 <get_fattime>
 8009574:	6638      	str	r0, [r7, #96]	; 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8009576:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	2b04      	cmp	r3, #4
 800957c:	f040 8090 	bne.w	80096a0 <f_sync+0x1a2>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	4618      	mov	r0, r3
 8009584:	f7fc ffe6 	bl	8006554 <fill_first_frag>
 8009588:	4603      	mov	r3, r0
 800958a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800958e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009592:	2b00      	cmp	r3, #0
 8009594:	d10a      	bne.n	80095ac <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800959c:	f04f 32ff 	mov.w	r2, #4294967295
 80095a0:	4619      	mov	r1, r3
 80095a2:	f7fd f806 	bl	80065b2 <fill_last_frag>
 80095a6:	4603      	mov	r3, r0
 80095a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 80095ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	f040 80c0 	bne.w	8009736 <f_sync+0x238>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	f107 0308 	add.w	r3, r7, #8
 80095bc:	4611      	mov	r1, r2
 80095be:	4618      	mov	r0, r3
 80095c0:	f7fd ff4a 	bl	8007458 <load_obj_dir>
 80095c4:	4603      	mov	r3, r0
 80095c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 80095ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	f040 80b1 	bne.w	8009736 <f_sync+0x238>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 80095d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80095d6:	695b      	ldr	r3, [r3, #20]
 80095d8:	3304      	adds	r3, #4
 80095da:	781a      	ldrb	r2, [r3, #0]
 80095dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80095de:	695b      	ldr	r3, [r3, #20]
 80095e0:	3304      	adds	r3, #4
 80095e2:	f042 0220 	orr.w	r2, r2, #32
 80095e6:	b2d2      	uxtb	r2, r2
 80095e8:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	79da      	ldrb	r2, [r3, #7]
 80095ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80095f0:	695b      	ldr	r3, [r3, #20]
 80095f2:	3321      	adds	r3, #33	; 0x21
 80095f4:	f042 0201 	orr.w	r2, r2, #1
 80095f8:	b2d2      	uxtb	r2, r2
 80095fa:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 80095fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80095fe:	695b      	ldr	r3, [r3, #20]
 8009600:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	4619      	mov	r1, r3
 800960a:	4610      	mov	r0, r2
 800960c:	f7fc f891 	bl	8005732 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 8009610:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009612:	695b      	ldr	r3, [r3, #20]
 8009614:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800961e:	461a      	mov	r2, r3
 8009620:	4623      	mov	r3, r4
 8009622:	4608      	mov	r0, r1
 8009624:	f7fc f8b1 	bl	800578a <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 8009628:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800962a:	695b      	ldr	r3, [r3, #20]
 800962c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8009636:	461a      	mov	r2, r3
 8009638:	4623      	mov	r3, r4
 800963a:	4608      	mov	r0, r1
 800963c:	f7fc f8a5 	bl	800578a <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8009640:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009642:	695b      	ldr	r3, [r3, #20]
 8009644:	330c      	adds	r3, #12
 8009646:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009648:	4618      	mov	r0, r3
 800964a:	f7fc f872 	bl	8005732 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800964e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009650:	695b      	ldr	r3, [r3, #20]
 8009652:	3315      	adds	r3, #21
 8009654:	2200      	movs	r2, #0
 8009656:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 8009658:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800965a:	695b      	ldr	r3, [r3, #20]
 800965c:	3310      	adds	r3, #16
 800965e:	2100      	movs	r1, #0
 8009660:	4618      	mov	r0, r3
 8009662:	f7fc f866 	bl	8005732 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 8009666:	f107 0308 	add.w	r3, r7, #8
 800966a:	4618      	mov	r0, r3
 800966c:	f7fd ff31 	bl	80074d2 <store_xdir>
 8009670:	4603      	mov	r3, r0
 8009672:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8009676:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800967a:	2b00      	cmp	r3, #0
 800967c:	d15b      	bne.n	8009736 <f_sync+0x238>
							res = sync_fs(fs);
 800967e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009680:	4618      	mov	r0, r3
 8009682:	f7fc fb65 	bl	8005d50 <sync_fs>
 8009686:	4603      	mov	r3, r0
 8009688:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009692:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009696:	b2da      	uxtb	r2, r3
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800969e:	e04a      	b.n	8009736 <f_sync+0x238>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80096a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096a6:	4619      	mov	r1, r3
 80096a8:	4610      	mov	r0, r2
 80096aa:	f7fc fb23 	bl	8005cf4 <move_window>
 80096ae:	4603      	mov	r3, r0
 80096b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 80096b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d13c      	bne.n	8009736 <f_sync+0x238>
					dir = fp->dir_ptr;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096c0:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80096c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096c4:	330b      	adds	r3, #11
 80096c6:	781a      	ldrb	r2, [r3, #0]
 80096c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096ca:	330b      	adds	r3, #11
 80096cc:	f042 0220 	orr.w	r2, r2, #32
 80096d0:	b2d2      	uxtb	r2, r2
 80096d2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6818      	ldr	r0, [r3, #0]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	461a      	mov	r2, r3
 80096de:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80096e0:	f7fd fb89 	bl	8006df6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80096e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096e6:	f103 021c 	add.w	r2, r3, #28
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80096f0:	4619      	mov	r1, r3
 80096f2:	4610      	mov	r0, r2
 80096f4:	f7fc f81d 	bl	8005732 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80096f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096fa:	3316      	adds	r3, #22
 80096fc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80096fe:	4618      	mov	r0, r3
 8009700:	f7fc f817 	bl	8005732 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009704:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009706:	3312      	adds	r3, #18
 8009708:	2100      	movs	r1, #0
 800970a:	4618      	mov	r0, r3
 800970c:	f7fb fff6 	bl	80056fc <st_word>
					fs->wflag = 1;
 8009710:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009712:	2201      	movs	r2, #1
 8009714:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009716:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009718:	4618      	mov	r0, r3
 800971a:	f7fc fb19 	bl	8005d50 <sync_fs>
 800971e:	4603      	mov	r3, r0
 8009720:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800972a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800972e:	b2da      	uxtb	r2, r3
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009736:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800973a:	4618      	mov	r0, r3
 800973c:	376c      	adds	r7, #108	; 0x6c
 800973e:	46bd      	mov	sp, r7
 8009740:	bd90      	pop	{r4, r7, pc}

08009742 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009742:	b580      	push	{r7, lr}
 8009744:	b084      	sub	sp, #16
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f7ff fed7 	bl	80094fe <f_sync>
 8009750:	4603      	mov	r3, r0
 8009752:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009754:	7bfb      	ldrb	r3, [r7, #15]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d118      	bne.n	800978c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f107 0208 	add.w	r2, r7, #8
 8009760:	4611      	mov	r1, r2
 8009762:	4618      	mov	r0, r3
 8009764:	f7ff f9be 	bl	8008ae4 <validate>
 8009768:	4603      	mov	r3, r0
 800976a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800976c:	7bfb      	ldrb	r3, [r7, #15]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d10c      	bne.n	800978c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009776:	4618      	mov	r0, r3
 8009778:	f7fc fa18 	bl	8005bac <dec_lock>
 800977c:	4603      	mov	r3, r0
 800977e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009780:	7bfb      	ldrb	r3, [r7, #15]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d102      	bne.n	800978c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2200      	movs	r2, #0
 800978a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800978c:	7bfb      	ldrb	r3, [r7, #15]
}
 800978e:	4618      	mov	r0, r3
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
	...

08009798 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009798:	b480      	push	{r7}
 800979a:	b087      	sub	sp, #28
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	4613      	mov	r3, r2
 80097a4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80097a6:	2301      	movs	r3, #1
 80097a8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80097aa:	2300      	movs	r3, #0
 80097ac:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80097ae:	4b1f      	ldr	r3, [pc, #124]	; (800982c <FATFS_LinkDriverEx+0x94>)
 80097b0:	7a5b      	ldrb	r3, [r3, #9]
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d131      	bne.n	800981c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80097b8:	4b1c      	ldr	r3, [pc, #112]	; (800982c <FATFS_LinkDriverEx+0x94>)
 80097ba:	7a5b      	ldrb	r3, [r3, #9]
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	461a      	mov	r2, r3
 80097c0:	4b1a      	ldr	r3, [pc, #104]	; (800982c <FATFS_LinkDriverEx+0x94>)
 80097c2:	2100      	movs	r1, #0
 80097c4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80097c6:	4b19      	ldr	r3, [pc, #100]	; (800982c <FATFS_LinkDriverEx+0x94>)
 80097c8:	7a5b      	ldrb	r3, [r3, #9]
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	4a17      	ldr	r2, [pc, #92]	; (800982c <FATFS_LinkDriverEx+0x94>)
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	4413      	add	r3, r2
 80097d2:	68fa      	ldr	r2, [r7, #12]
 80097d4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80097d6:	4b15      	ldr	r3, [pc, #84]	; (800982c <FATFS_LinkDriverEx+0x94>)
 80097d8:	7a5b      	ldrb	r3, [r3, #9]
 80097da:	b2db      	uxtb	r3, r3
 80097dc:	461a      	mov	r2, r3
 80097de:	4b13      	ldr	r3, [pc, #76]	; (800982c <FATFS_LinkDriverEx+0x94>)
 80097e0:	4413      	add	r3, r2
 80097e2:	79fa      	ldrb	r2, [r7, #7]
 80097e4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80097e6:	4b11      	ldr	r3, [pc, #68]	; (800982c <FATFS_LinkDriverEx+0x94>)
 80097e8:	7a5b      	ldrb	r3, [r3, #9]
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	1c5a      	adds	r2, r3, #1
 80097ee:	b2d1      	uxtb	r1, r2
 80097f0:	4a0e      	ldr	r2, [pc, #56]	; (800982c <FATFS_LinkDriverEx+0x94>)
 80097f2:	7251      	strb	r1, [r2, #9]
 80097f4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80097f6:	7dbb      	ldrb	r3, [r7, #22]
 80097f8:	3330      	adds	r3, #48	; 0x30
 80097fa:	b2da      	uxtb	r2, r3
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	3301      	adds	r3, #1
 8009804:	223a      	movs	r2, #58	; 0x3a
 8009806:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	3302      	adds	r3, #2
 800980c:	222f      	movs	r2, #47	; 0x2f
 800980e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	3303      	adds	r3, #3
 8009814:	2200      	movs	r2, #0
 8009816:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009818:	2300      	movs	r3, #0
 800981a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800981c:	7dfb      	ldrb	r3, [r7, #23]
}
 800981e:	4618      	mov	r0, r3
 8009820:	371c      	adds	r7, #28
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr
 800982a:	bf00      	nop
 800982c:	2000016c 	.word	0x2000016c

08009830 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800983a:	2200      	movs	r2, #0
 800983c:	6839      	ldr	r1, [r7, #0]
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f7ff ffaa 	bl	8009798 <FATFS_LinkDriverEx>
 8009844:	4603      	mov	r3, r0
}
 8009846:	4618      	mov	r0, r3
 8009848:	3708      	adds	r7, #8
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
	...

08009850 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8009850:	b480      	push	{r7}
 8009852:	b085      	sub	sp, #20
 8009854:	af00      	add	r7, sp, #0
 8009856:	4603      	mov	r3, r0
 8009858:	6039      	str	r1, [r7, #0]
 800985a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800985c:	88fb      	ldrh	r3, [r7, #6]
 800985e:	2b7f      	cmp	r3, #127	; 0x7f
 8009860:	d802      	bhi.n	8009868 <ff_convert+0x18>
		c = chr;
 8009862:	88fb      	ldrh	r3, [r7, #6]
 8009864:	81fb      	strh	r3, [r7, #14]
 8009866:	e025      	b.n	80098b4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d00b      	beq.n	8009886 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800986e:	88fb      	ldrh	r3, [r7, #6]
 8009870:	2bff      	cmp	r3, #255	; 0xff
 8009872:	d805      	bhi.n	8009880 <ff_convert+0x30>
 8009874:	88fb      	ldrh	r3, [r7, #6]
 8009876:	3b80      	subs	r3, #128	; 0x80
 8009878:	4a12      	ldr	r2, [pc, #72]	; (80098c4 <ff_convert+0x74>)
 800987a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800987e:	e000      	b.n	8009882 <ff_convert+0x32>
 8009880:	2300      	movs	r3, #0
 8009882:	81fb      	strh	r3, [r7, #14]
 8009884:	e016      	b.n	80098b4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8009886:	2300      	movs	r3, #0
 8009888:	81fb      	strh	r3, [r7, #14]
 800988a:	e009      	b.n	80098a0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800988c:	89fb      	ldrh	r3, [r7, #14]
 800988e:	4a0d      	ldr	r2, [pc, #52]	; (80098c4 <ff_convert+0x74>)
 8009890:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009894:	88fa      	ldrh	r2, [r7, #6]
 8009896:	429a      	cmp	r2, r3
 8009898:	d006      	beq.n	80098a8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800989a:	89fb      	ldrh	r3, [r7, #14]
 800989c:	3301      	adds	r3, #1
 800989e:	81fb      	strh	r3, [r7, #14]
 80098a0:	89fb      	ldrh	r3, [r7, #14]
 80098a2:	2b7f      	cmp	r3, #127	; 0x7f
 80098a4:	d9f2      	bls.n	800988c <ff_convert+0x3c>
 80098a6:	e000      	b.n	80098aa <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80098a8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80098aa:	89fb      	ldrh	r3, [r7, #14]
 80098ac:	3380      	adds	r3, #128	; 0x80
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	b2db      	uxtb	r3, r3
 80098b2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80098b4:	89fb      	ldrh	r3, [r7, #14]
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3714      	adds	r7, #20
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr
 80098c2:	bf00      	nop
 80098c4:	0800a3b4 	.word	0x0800a3b4

080098c8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b087      	sub	sp, #28
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	4603      	mov	r3, r0
 80098d0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80098d2:	88fb      	ldrh	r3, [r7, #6]
 80098d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098d8:	d201      	bcs.n	80098de <ff_wtoupper+0x16>
 80098da:	4b3e      	ldr	r3, [pc, #248]	; (80099d4 <ff_wtoupper+0x10c>)
 80098dc:	e000      	b.n	80098e0 <ff_wtoupper+0x18>
 80098de:	4b3e      	ldr	r3, [pc, #248]	; (80099d8 <ff_wtoupper+0x110>)
 80098e0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	1c9a      	adds	r2, r3, #2
 80098e6:	617a      	str	r2, [r7, #20]
 80098e8:	881b      	ldrh	r3, [r3, #0]
 80098ea:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80098ec:	8a7b      	ldrh	r3, [r7, #18]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d068      	beq.n	80099c4 <ff_wtoupper+0xfc>
 80098f2:	88fa      	ldrh	r2, [r7, #6]
 80098f4:	8a7b      	ldrh	r3, [r7, #18]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d364      	bcc.n	80099c4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	1c9a      	adds	r2, r3, #2
 80098fe:	617a      	str	r2, [r7, #20]
 8009900:	881b      	ldrh	r3, [r3, #0]
 8009902:	823b      	strh	r3, [r7, #16]
 8009904:	8a3b      	ldrh	r3, [r7, #16]
 8009906:	0a1b      	lsrs	r3, r3, #8
 8009908:	81fb      	strh	r3, [r7, #14]
 800990a:	8a3b      	ldrh	r3, [r7, #16]
 800990c:	b2db      	uxtb	r3, r3
 800990e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8009910:	88fa      	ldrh	r2, [r7, #6]
 8009912:	8a79      	ldrh	r1, [r7, #18]
 8009914:	8a3b      	ldrh	r3, [r7, #16]
 8009916:	440b      	add	r3, r1
 8009918:	429a      	cmp	r2, r3
 800991a:	da49      	bge.n	80099b0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800991c:	89fb      	ldrh	r3, [r7, #14]
 800991e:	2b08      	cmp	r3, #8
 8009920:	d84f      	bhi.n	80099c2 <ff_wtoupper+0xfa>
 8009922:	a201      	add	r2, pc, #4	; (adr r2, 8009928 <ff_wtoupper+0x60>)
 8009924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009928:	0800994d 	.word	0x0800994d
 800992c:	0800995f 	.word	0x0800995f
 8009930:	08009975 	.word	0x08009975
 8009934:	0800997d 	.word	0x0800997d
 8009938:	08009985 	.word	0x08009985
 800993c:	0800998d 	.word	0x0800998d
 8009940:	08009995 	.word	0x08009995
 8009944:	0800999d 	.word	0x0800999d
 8009948:	080099a5 	.word	0x080099a5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800994c:	88fa      	ldrh	r2, [r7, #6]
 800994e:	8a7b      	ldrh	r3, [r7, #18]
 8009950:	1ad3      	subs	r3, r2, r3
 8009952:	005b      	lsls	r3, r3, #1
 8009954:	697a      	ldr	r2, [r7, #20]
 8009956:	4413      	add	r3, r2
 8009958:	881b      	ldrh	r3, [r3, #0]
 800995a:	80fb      	strh	r3, [r7, #6]
 800995c:	e027      	b.n	80099ae <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800995e:	88fa      	ldrh	r2, [r7, #6]
 8009960:	8a7b      	ldrh	r3, [r7, #18]
 8009962:	1ad3      	subs	r3, r2, r3
 8009964:	b29b      	uxth	r3, r3
 8009966:	f003 0301 	and.w	r3, r3, #1
 800996a:	b29b      	uxth	r3, r3
 800996c:	88fa      	ldrh	r2, [r7, #6]
 800996e:	1ad3      	subs	r3, r2, r3
 8009970:	80fb      	strh	r3, [r7, #6]
 8009972:	e01c      	b.n	80099ae <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8009974:	88fb      	ldrh	r3, [r7, #6]
 8009976:	3b10      	subs	r3, #16
 8009978:	80fb      	strh	r3, [r7, #6]
 800997a:	e018      	b.n	80099ae <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800997c:	88fb      	ldrh	r3, [r7, #6]
 800997e:	3b20      	subs	r3, #32
 8009980:	80fb      	strh	r3, [r7, #6]
 8009982:	e014      	b.n	80099ae <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8009984:	88fb      	ldrh	r3, [r7, #6]
 8009986:	3b30      	subs	r3, #48	; 0x30
 8009988:	80fb      	strh	r3, [r7, #6]
 800998a:	e010      	b.n	80099ae <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800998c:	88fb      	ldrh	r3, [r7, #6]
 800998e:	3b1a      	subs	r3, #26
 8009990:	80fb      	strh	r3, [r7, #6]
 8009992:	e00c      	b.n	80099ae <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8009994:	88fb      	ldrh	r3, [r7, #6]
 8009996:	3308      	adds	r3, #8
 8009998:	80fb      	strh	r3, [r7, #6]
 800999a:	e008      	b.n	80099ae <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800999c:	88fb      	ldrh	r3, [r7, #6]
 800999e:	3b50      	subs	r3, #80	; 0x50
 80099a0:	80fb      	strh	r3, [r7, #6]
 80099a2:	e004      	b.n	80099ae <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80099a4:	88fb      	ldrh	r3, [r7, #6]
 80099a6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80099aa:	80fb      	strh	r3, [r7, #6]
 80099ac:	bf00      	nop
			}
			break;
 80099ae:	e008      	b.n	80099c2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80099b0:	89fb      	ldrh	r3, [r7, #14]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d195      	bne.n	80098e2 <ff_wtoupper+0x1a>
 80099b6:	8a3b      	ldrh	r3, [r7, #16]
 80099b8:	005b      	lsls	r3, r3, #1
 80099ba:	697a      	ldr	r2, [r7, #20]
 80099bc:	4413      	add	r3, r2
 80099be:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80099c0:	e78f      	b.n	80098e2 <ff_wtoupper+0x1a>
			break;
 80099c2:	bf00      	nop
	}

	return chr;
 80099c4:	88fb      	ldrh	r3, [r7, #6]
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	371c      	adds	r7, #28
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr
 80099d2:	bf00      	nop
 80099d4:	0800a4b4 	.word	0x0800a4b4
 80099d8:	0800a6a8 	.word	0x0800a6a8

080099dc <__errno>:
 80099dc:	4b01      	ldr	r3, [pc, #4]	; (80099e4 <__errno+0x8>)
 80099de:	6818      	ldr	r0, [r3, #0]
 80099e0:	4770      	bx	lr
 80099e2:	bf00      	nop
 80099e4:	2000000c 	.word	0x2000000c

080099e8 <__libc_init_array>:
 80099e8:	b570      	push	{r4, r5, r6, lr}
 80099ea:	4e0d      	ldr	r6, [pc, #52]	; (8009a20 <__libc_init_array+0x38>)
 80099ec:	4c0d      	ldr	r4, [pc, #52]	; (8009a24 <__libc_init_array+0x3c>)
 80099ee:	1ba4      	subs	r4, r4, r6
 80099f0:	10a4      	asrs	r4, r4, #2
 80099f2:	2500      	movs	r5, #0
 80099f4:	42a5      	cmp	r5, r4
 80099f6:	d109      	bne.n	8009a0c <__libc_init_array+0x24>
 80099f8:	4e0b      	ldr	r6, [pc, #44]	; (8009a28 <__libc_init_array+0x40>)
 80099fa:	4c0c      	ldr	r4, [pc, #48]	; (8009a2c <__libc_init_array+0x44>)
 80099fc:	f000 fc26 	bl	800a24c <_init>
 8009a00:	1ba4      	subs	r4, r4, r6
 8009a02:	10a4      	asrs	r4, r4, #2
 8009a04:	2500      	movs	r5, #0
 8009a06:	42a5      	cmp	r5, r4
 8009a08:	d105      	bne.n	8009a16 <__libc_init_array+0x2e>
 8009a0a:	bd70      	pop	{r4, r5, r6, pc}
 8009a0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a10:	4798      	blx	r3
 8009a12:	3501      	adds	r5, #1
 8009a14:	e7ee      	b.n	80099f4 <__libc_init_array+0xc>
 8009a16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a1a:	4798      	blx	r3
 8009a1c:	3501      	adds	r5, #1
 8009a1e:	e7f2      	b.n	8009a06 <__libc_init_array+0x1e>
 8009a20:	0800a7a0 	.word	0x0800a7a0
 8009a24:	0800a7a0 	.word	0x0800a7a0
 8009a28:	0800a7a0 	.word	0x0800a7a0
 8009a2c:	0800a7a4 	.word	0x0800a7a4

08009a30 <memset>:
 8009a30:	4402      	add	r2, r0
 8009a32:	4603      	mov	r3, r0
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d100      	bne.n	8009a3a <memset+0xa>
 8009a38:	4770      	bx	lr
 8009a3a:	f803 1b01 	strb.w	r1, [r3], #1
 8009a3e:	e7f9      	b.n	8009a34 <memset+0x4>

08009a40 <siprintf>:
 8009a40:	b40e      	push	{r1, r2, r3}
 8009a42:	b500      	push	{lr}
 8009a44:	b09c      	sub	sp, #112	; 0x70
 8009a46:	ab1d      	add	r3, sp, #116	; 0x74
 8009a48:	9002      	str	r0, [sp, #8]
 8009a4a:	9006      	str	r0, [sp, #24]
 8009a4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009a50:	4809      	ldr	r0, [pc, #36]	; (8009a78 <siprintf+0x38>)
 8009a52:	9107      	str	r1, [sp, #28]
 8009a54:	9104      	str	r1, [sp, #16]
 8009a56:	4909      	ldr	r1, [pc, #36]	; (8009a7c <siprintf+0x3c>)
 8009a58:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a5c:	9105      	str	r1, [sp, #20]
 8009a5e:	6800      	ldr	r0, [r0, #0]
 8009a60:	9301      	str	r3, [sp, #4]
 8009a62:	a902      	add	r1, sp, #8
 8009a64:	f000 f866 	bl	8009b34 <_svfiprintf_r>
 8009a68:	9b02      	ldr	r3, [sp, #8]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	701a      	strb	r2, [r3, #0]
 8009a6e:	b01c      	add	sp, #112	; 0x70
 8009a70:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a74:	b003      	add	sp, #12
 8009a76:	4770      	bx	lr
 8009a78:	2000000c 	.word	0x2000000c
 8009a7c:	ffff0208 	.word	0xffff0208

08009a80 <__ssputs_r>:
 8009a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a84:	688e      	ldr	r6, [r1, #8]
 8009a86:	429e      	cmp	r6, r3
 8009a88:	4682      	mov	sl, r0
 8009a8a:	460c      	mov	r4, r1
 8009a8c:	4690      	mov	r8, r2
 8009a8e:	4699      	mov	r9, r3
 8009a90:	d837      	bhi.n	8009b02 <__ssputs_r+0x82>
 8009a92:	898a      	ldrh	r2, [r1, #12]
 8009a94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009a98:	d031      	beq.n	8009afe <__ssputs_r+0x7e>
 8009a9a:	6825      	ldr	r5, [r4, #0]
 8009a9c:	6909      	ldr	r1, [r1, #16]
 8009a9e:	1a6f      	subs	r7, r5, r1
 8009aa0:	6965      	ldr	r5, [r4, #20]
 8009aa2:	2302      	movs	r3, #2
 8009aa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009aa8:	fb95 f5f3 	sdiv	r5, r5, r3
 8009aac:	f109 0301 	add.w	r3, r9, #1
 8009ab0:	443b      	add	r3, r7
 8009ab2:	429d      	cmp	r5, r3
 8009ab4:	bf38      	it	cc
 8009ab6:	461d      	movcc	r5, r3
 8009ab8:	0553      	lsls	r3, r2, #21
 8009aba:	d530      	bpl.n	8009b1e <__ssputs_r+0x9e>
 8009abc:	4629      	mov	r1, r5
 8009abe:	f000 fb2b 	bl	800a118 <_malloc_r>
 8009ac2:	4606      	mov	r6, r0
 8009ac4:	b950      	cbnz	r0, 8009adc <__ssputs_r+0x5c>
 8009ac6:	230c      	movs	r3, #12
 8009ac8:	f8ca 3000 	str.w	r3, [sl]
 8009acc:	89a3      	ldrh	r3, [r4, #12]
 8009ace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ad2:	81a3      	strh	r3, [r4, #12]
 8009ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009adc:	463a      	mov	r2, r7
 8009ade:	6921      	ldr	r1, [r4, #16]
 8009ae0:	f000 faa8 	bl	800a034 <memcpy>
 8009ae4:	89a3      	ldrh	r3, [r4, #12]
 8009ae6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aee:	81a3      	strh	r3, [r4, #12]
 8009af0:	6126      	str	r6, [r4, #16]
 8009af2:	6165      	str	r5, [r4, #20]
 8009af4:	443e      	add	r6, r7
 8009af6:	1bed      	subs	r5, r5, r7
 8009af8:	6026      	str	r6, [r4, #0]
 8009afa:	60a5      	str	r5, [r4, #8]
 8009afc:	464e      	mov	r6, r9
 8009afe:	454e      	cmp	r6, r9
 8009b00:	d900      	bls.n	8009b04 <__ssputs_r+0x84>
 8009b02:	464e      	mov	r6, r9
 8009b04:	4632      	mov	r2, r6
 8009b06:	4641      	mov	r1, r8
 8009b08:	6820      	ldr	r0, [r4, #0]
 8009b0a:	f000 fa9e 	bl	800a04a <memmove>
 8009b0e:	68a3      	ldr	r3, [r4, #8]
 8009b10:	1b9b      	subs	r3, r3, r6
 8009b12:	60a3      	str	r3, [r4, #8]
 8009b14:	6823      	ldr	r3, [r4, #0]
 8009b16:	441e      	add	r6, r3
 8009b18:	6026      	str	r6, [r4, #0]
 8009b1a:	2000      	movs	r0, #0
 8009b1c:	e7dc      	b.n	8009ad8 <__ssputs_r+0x58>
 8009b1e:	462a      	mov	r2, r5
 8009b20:	f000 fb54 	bl	800a1cc <_realloc_r>
 8009b24:	4606      	mov	r6, r0
 8009b26:	2800      	cmp	r0, #0
 8009b28:	d1e2      	bne.n	8009af0 <__ssputs_r+0x70>
 8009b2a:	6921      	ldr	r1, [r4, #16]
 8009b2c:	4650      	mov	r0, sl
 8009b2e:	f000 faa5 	bl	800a07c <_free_r>
 8009b32:	e7c8      	b.n	8009ac6 <__ssputs_r+0x46>

08009b34 <_svfiprintf_r>:
 8009b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b38:	461d      	mov	r5, r3
 8009b3a:	898b      	ldrh	r3, [r1, #12]
 8009b3c:	061f      	lsls	r7, r3, #24
 8009b3e:	b09d      	sub	sp, #116	; 0x74
 8009b40:	4680      	mov	r8, r0
 8009b42:	460c      	mov	r4, r1
 8009b44:	4616      	mov	r6, r2
 8009b46:	d50f      	bpl.n	8009b68 <_svfiprintf_r+0x34>
 8009b48:	690b      	ldr	r3, [r1, #16]
 8009b4a:	b96b      	cbnz	r3, 8009b68 <_svfiprintf_r+0x34>
 8009b4c:	2140      	movs	r1, #64	; 0x40
 8009b4e:	f000 fae3 	bl	800a118 <_malloc_r>
 8009b52:	6020      	str	r0, [r4, #0]
 8009b54:	6120      	str	r0, [r4, #16]
 8009b56:	b928      	cbnz	r0, 8009b64 <_svfiprintf_r+0x30>
 8009b58:	230c      	movs	r3, #12
 8009b5a:	f8c8 3000 	str.w	r3, [r8]
 8009b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b62:	e0c8      	b.n	8009cf6 <_svfiprintf_r+0x1c2>
 8009b64:	2340      	movs	r3, #64	; 0x40
 8009b66:	6163      	str	r3, [r4, #20]
 8009b68:	2300      	movs	r3, #0
 8009b6a:	9309      	str	r3, [sp, #36]	; 0x24
 8009b6c:	2320      	movs	r3, #32
 8009b6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b72:	2330      	movs	r3, #48	; 0x30
 8009b74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b78:	9503      	str	r5, [sp, #12]
 8009b7a:	f04f 0b01 	mov.w	fp, #1
 8009b7e:	4637      	mov	r7, r6
 8009b80:	463d      	mov	r5, r7
 8009b82:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009b86:	b10b      	cbz	r3, 8009b8c <_svfiprintf_r+0x58>
 8009b88:	2b25      	cmp	r3, #37	; 0x25
 8009b8a:	d13e      	bne.n	8009c0a <_svfiprintf_r+0xd6>
 8009b8c:	ebb7 0a06 	subs.w	sl, r7, r6
 8009b90:	d00b      	beq.n	8009baa <_svfiprintf_r+0x76>
 8009b92:	4653      	mov	r3, sl
 8009b94:	4632      	mov	r2, r6
 8009b96:	4621      	mov	r1, r4
 8009b98:	4640      	mov	r0, r8
 8009b9a:	f7ff ff71 	bl	8009a80 <__ssputs_r>
 8009b9e:	3001      	adds	r0, #1
 8009ba0:	f000 80a4 	beq.w	8009cec <_svfiprintf_r+0x1b8>
 8009ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ba6:	4453      	add	r3, sl
 8009ba8:	9309      	str	r3, [sp, #36]	; 0x24
 8009baa:	783b      	ldrb	r3, [r7, #0]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	f000 809d 	beq.w	8009cec <_svfiprintf_r+0x1b8>
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8009bb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bbc:	9304      	str	r3, [sp, #16]
 8009bbe:	9307      	str	r3, [sp, #28]
 8009bc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009bc4:	931a      	str	r3, [sp, #104]	; 0x68
 8009bc6:	462f      	mov	r7, r5
 8009bc8:	2205      	movs	r2, #5
 8009bca:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009bce:	4850      	ldr	r0, [pc, #320]	; (8009d10 <_svfiprintf_r+0x1dc>)
 8009bd0:	f7f6 fb1e 	bl	8000210 <memchr>
 8009bd4:	9b04      	ldr	r3, [sp, #16]
 8009bd6:	b9d0      	cbnz	r0, 8009c0e <_svfiprintf_r+0xda>
 8009bd8:	06d9      	lsls	r1, r3, #27
 8009bda:	bf44      	itt	mi
 8009bdc:	2220      	movmi	r2, #32
 8009bde:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009be2:	071a      	lsls	r2, r3, #28
 8009be4:	bf44      	itt	mi
 8009be6:	222b      	movmi	r2, #43	; 0x2b
 8009be8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009bec:	782a      	ldrb	r2, [r5, #0]
 8009bee:	2a2a      	cmp	r2, #42	; 0x2a
 8009bf0:	d015      	beq.n	8009c1e <_svfiprintf_r+0xea>
 8009bf2:	9a07      	ldr	r2, [sp, #28]
 8009bf4:	462f      	mov	r7, r5
 8009bf6:	2000      	movs	r0, #0
 8009bf8:	250a      	movs	r5, #10
 8009bfa:	4639      	mov	r1, r7
 8009bfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c00:	3b30      	subs	r3, #48	; 0x30
 8009c02:	2b09      	cmp	r3, #9
 8009c04:	d94d      	bls.n	8009ca2 <_svfiprintf_r+0x16e>
 8009c06:	b1b8      	cbz	r0, 8009c38 <_svfiprintf_r+0x104>
 8009c08:	e00f      	b.n	8009c2a <_svfiprintf_r+0xf6>
 8009c0a:	462f      	mov	r7, r5
 8009c0c:	e7b8      	b.n	8009b80 <_svfiprintf_r+0x4c>
 8009c0e:	4a40      	ldr	r2, [pc, #256]	; (8009d10 <_svfiprintf_r+0x1dc>)
 8009c10:	1a80      	subs	r0, r0, r2
 8009c12:	fa0b f000 	lsl.w	r0, fp, r0
 8009c16:	4318      	orrs	r0, r3
 8009c18:	9004      	str	r0, [sp, #16]
 8009c1a:	463d      	mov	r5, r7
 8009c1c:	e7d3      	b.n	8009bc6 <_svfiprintf_r+0x92>
 8009c1e:	9a03      	ldr	r2, [sp, #12]
 8009c20:	1d11      	adds	r1, r2, #4
 8009c22:	6812      	ldr	r2, [r2, #0]
 8009c24:	9103      	str	r1, [sp, #12]
 8009c26:	2a00      	cmp	r2, #0
 8009c28:	db01      	blt.n	8009c2e <_svfiprintf_r+0xfa>
 8009c2a:	9207      	str	r2, [sp, #28]
 8009c2c:	e004      	b.n	8009c38 <_svfiprintf_r+0x104>
 8009c2e:	4252      	negs	r2, r2
 8009c30:	f043 0302 	orr.w	r3, r3, #2
 8009c34:	9207      	str	r2, [sp, #28]
 8009c36:	9304      	str	r3, [sp, #16]
 8009c38:	783b      	ldrb	r3, [r7, #0]
 8009c3a:	2b2e      	cmp	r3, #46	; 0x2e
 8009c3c:	d10c      	bne.n	8009c58 <_svfiprintf_r+0x124>
 8009c3e:	787b      	ldrb	r3, [r7, #1]
 8009c40:	2b2a      	cmp	r3, #42	; 0x2a
 8009c42:	d133      	bne.n	8009cac <_svfiprintf_r+0x178>
 8009c44:	9b03      	ldr	r3, [sp, #12]
 8009c46:	1d1a      	adds	r2, r3, #4
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	9203      	str	r2, [sp, #12]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	bfb8      	it	lt
 8009c50:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c54:	3702      	adds	r7, #2
 8009c56:	9305      	str	r3, [sp, #20]
 8009c58:	4d2e      	ldr	r5, [pc, #184]	; (8009d14 <_svfiprintf_r+0x1e0>)
 8009c5a:	7839      	ldrb	r1, [r7, #0]
 8009c5c:	2203      	movs	r2, #3
 8009c5e:	4628      	mov	r0, r5
 8009c60:	f7f6 fad6 	bl	8000210 <memchr>
 8009c64:	b138      	cbz	r0, 8009c76 <_svfiprintf_r+0x142>
 8009c66:	2340      	movs	r3, #64	; 0x40
 8009c68:	1b40      	subs	r0, r0, r5
 8009c6a:	fa03 f000 	lsl.w	r0, r3, r0
 8009c6e:	9b04      	ldr	r3, [sp, #16]
 8009c70:	4303      	orrs	r3, r0
 8009c72:	3701      	adds	r7, #1
 8009c74:	9304      	str	r3, [sp, #16]
 8009c76:	7839      	ldrb	r1, [r7, #0]
 8009c78:	4827      	ldr	r0, [pc, #156]	; (8009d18 <_svfiprintf_r+0x1e4>)
 8009c7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c7e:	2206      	movs	r2, #6
 8009c80:	1c7e      	adds	r6, r7, #1
 8009c82:	f7f6 fac5 	bl	8000210 <memchr>
 8009c86:	2800      	cmp	r0, #0
 8009c88:	d038      	beq.n	8009cfc <_svfiprintf_r+0x1c8>
 8009c8a:	4b24      	ldr	r3, [pc, #144]	; (8009d1c <_svfiprintf_r+0x1e8>)
 8009c8c:	bb13      	cbnz	r3, 8009cd4 <_svfiprintf_r+0x1a0>
 8009c8e:	9b03      	ldr	r3, [sp, #12]
 8009c90:	3307      	adds	r3, #7
 8009c92:	f023 0307 	bic.w	r3, r3, #7
 8009c96:	3308      	adds	r3, #8
 8009c98:	9303      	str	r3, [sp, #12]
 8009c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c9c:	444b      	add	r3, r9
 8009c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8009ca0:	e76d      	b.n	8009b7e <_svfiprintf_r+0x4a>
 8009ca2:	fb05 3202 	mla	r2, r5, r2, r3
 8009ca6:	2001      	movs	r0, #1
 8009ca8:	460f      	mov	r7, r1
 8009caa:	e7a6      	b.n	8009bfa <_svfiprintf_r+0xc6>
 8009cac:	2300      	movs	r3, #0
 8009cae:	3701      	adds	r7, #1
 8009cb0:	9305      	str	r3, [sp, #20]
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	250a      	movs	r5, #10
 8009cb6:	4638      	mov	r0, r7
 8009cb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cbc:	3a30      	subs	r2, #48	; 0x30
 8009cbe:	2a09      	cmp	r2, #9
 8009cc0:	d903      	bls.n	8009cca <_svfiprintf_r+0x196>
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d0c8      	beq.n	8009c58 <_svfiprintf_r+0x124>
 8009cc6:	9105      	str	r1, [sp, #20]
 8009cc8:	e7c6      	b.n	8009c58 <_svfiprintf_r+0x124>
 8009cca:	fb05 2101 	mla	r1, r5, r1, r2
 8009cce:	2301      	movs	r3, #1
 8009cd0:	4607      	mov	r7, r0
 8009cd2:	e7f0      	b.n	8009cb6 <_svfiprintf_r+0x182>
 8009cd4:	ab03      	add	r3, sp, #12
 8009cd6:	9300      	str	r3, [sp, #0]
 8009cd8:	4622      	mov	r2, r4
 8009cda:	4b11      	ldr	r3, [pc, #68]	; (8009d20 <_svfiprintf_r+0x1ec>)
 8009cdc:	a904      	add	r1, sp, #16
 8009cde:	4640      	mov	r0, r8
 8009ce0:	f3af 8000 	nop.w
 8009ce4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009ce8:	4681      	mov	r9, r0
 8009cea:	d1d6      	bne.n	8009c9a <_svfiprintf_r+0x166>
 8009cec:	89a3      	ldrh	r3, [r4, #12]
 8009cee:	065b      	lsls	r3, r3, #25
 8009cf0:	f53f af35 	bmi.w	8009b5e <_svfiprintf_r+0x2a>
 8009cf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cf6:	b01d      	add	sp, #116	; 0x74
 8009cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cfc:	ab03      	add	r3, sp, #12
 8009cfe:	9300      	str	r3, [sp, #0]
 8009d00:	4622      	mov	r2, r4
 8009d02:	4b07      	ldr	r3, [pc, #28]	; (8009d20 <_svfiprintf_r+0x1ec>)
 8009d04:	a904      	add	r1, sp, #16
 8009d06:	4640      	mov	r0, r8
 8009d08:	f000 f882 	bl	8009e10 <_printf_i>
 8009d0c:	e7ea      	b.n	8009ce4 <_svfiprintf_r+0x1b0>
 8009d0e:	bf00      	nop
 8009d10:	0800a764 	.word	0x0800a764
 8009d14:	0800a76a 	.word	0x0800a76a
 8009d18:	0800a76e 	.word	0x0800a76e
 8009d1c:	00000000 	.word	0x00000000
 8009d20:	08009a81 	.word	0x08009a81

08009d24 <_printf_common>:
 8009d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d28:	4691      	mov	r9, r2
 8009d2a:	461f      	mov	r7, r3
 8009d2c:	688a      	ldr	r2, [r1, #8]
 8009d2e:	690b      	ldr	r3, [r1, #16]
 8009d30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d34:	4293      	cmp	r3, r2
 8009d36:	bfb8      	it	lt
 8009d38:	4613      	movlt	r3, r2
 8009d3a:	f8c9 3000 	str.w	r3, [r9]
 8009d3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d42:	4606      	mov	r6, r0
 8009d44:	460c      	mov	r4, r1
 8009d46:	b112      	cbz	r2, 8009d4e <_printf_common+0x2a>
 8009d48:	3301      	adds	r3, #1
 8009d4a:	f8c9 3000 	str.w	r3, [r9]
 8009d4e:	6823      	ldr	r3, [r4, #0]
 8009d50:	0699      	lsls	r1, r3, #26
 8009d52:	bf42      	ittt	mi
 8009d54:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009d58:	3302      	addmi	r3, #2
 8009d5a:	f8c9 3000 	strmi.w	r3, [r9]
 8009d5e:	6825      	ldr	r5, [r4, #0]
 8009d60:	f015 0506 	ands.w	r5, r5, #6
 8009d64:	d107      	bne.n	8009d76 <_printf_common+0x52>
 8009d66:	f104 0a19 	add.w	sl, r4, #25
 8009d6a:	68e3      	ldr	r3, [r4, #12]
 8009d6c:	f8d9 2000 	ldr.w	r2, [r9]
 8009d70:	1a9b      	subs	r3, r3, r2
 8009d72:	42ab      	cmp	r3, r5
 8009d74:	dc28      	bgt.n	8009dc8 <_printf_common+0xa4>
 8009d76:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009d7a:	6822      	ldr	r2, [r4, #0]
 8009d7c:	3300      	adds	r3, #0
 8009d7e:	bf18      	it	ne
 8009d80:	2301      	movne	r3, #1
 8009d82:	0692      	lsls	r2, r2, #26
 8009d84:	d42d      	bmi.n	8009de2 <_printf_common+0xbe>
 8009d86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d8a:	4639      	mov	r1, r7
 8009d8c:	4630      	mov	r0, r6
 8009d8e:	47c0      	blx	r8
 8009d90:	3001      	adds	r0, #1
 8009d92:	d020      	beq.n	8009dd6 <_printf_common+0xb2>
 8009d94:	6823      	ldr	r3, [r4, #0]
 8009d96:	68e5      	ldr	r5, [r4, #12]
 8009d98:	f8d9 2000 	ldr.w	r2, [r9]
 8009d9c:	f003 0306 	and.w	r3, r3, #6
 8009da0:	2b04      	cmp	r3, #4
 8009da2:	bf08      	it	eq
 8009da4:	1aad      	subeq	r5, r5, r2
 8009da6:	68a3      	ldr	r3, [r4, #8]
 8009da8:	6922      	ldr	r2, [r4, #16]
 8009daa:	bf0c      	ite	eq
 8009dac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009db0:	2500      	movne	r5, #0
 8009db2:	4293      	cmp	r3, r2
 8009db4:	bfc4      	itt	gt
 8009db6:	1a9b      	subgt	r3, r3, r2
 8009db8:	18ed      	addgt	r5, r5, r3
 8009dba:	f04f 0900 	mov.w	r9, #0
 8009dbe:	341a      	adds	r4, #26
 8009dc0:	454d      	cmp	r5, r9
 8009dc2:	d11a      	bne.n	8009dfa <_printf_common+0xd6>
 8009dc4:	2000      	movs	r0, #0
 8009dc6:	e008      	b.n	8009dda <_printf_common+0xb6>
 8009dc8:	2301      	movs	r3, #1
 8009dca:	4652      	mov	r2, sl
 8009dcc:	4639      	mov	r1, r7
 8009dce:	4630      	mov	r0, r6
 8009dd0:	47c0      	blx	r8
 8009dd2:	3001      	adds	r0, #1
 8009dd4:	d103      	bne.n	8009dde <_printf_common+0xba>
 8009dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8009dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dde:	3501      	adds	r5, #1
 8009de0:	e7c3      	b.n	8009d6a <_printf_common+0x46>
 8009de2:	18e1      	adds	r1, r4, r3
 8009de4:	1c5a      	adds	r2, r3, #1
 8009de6:	2030      	movs	r0, #48	; 0x30
 8009de8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009dec:	4422      	add	r2, r4
 8009dee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009df2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009df6:	3302      	adds	r3, #2
 8009df8:	e7c5      	b.n	8009d86 <_printf_common+0x62>
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	4622      	mov	r2, r4
 8009dfe:	4639      	mov	r1, r7
 8009e00:	4630      	mov	r0, r6
 8009e02:	47c0      	blx	r8
 8009e04:	3001      	adds	r0, #1
 8009e06:	d0e6      	beq.n	8009dd6 <_printf_common+0xb2>
 8009e08:	f109 0901 	add.w	r9, r9, #1
 8009e0c:	e7d8      	b.n	8009dc0 <_printf_common+0x9c>
	...

08009e10 <_printf_i>:
 8009e10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e14:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009e18:	460c      	mov	r4, r1
 8009e1a:	7e09      	ldrb	r1, [r1, #24]
 8009e1c:	b085      	sub	sp, #20
 8009e1e:	296e      	cmp	r1, #110	; 0x6e
 8009e20:	4617      	mov	r7, r2
 8009e22:	4606      	mov	r6, r0
 8009e24:	4698      	mov	r8, r3
 8009e26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e28:	f000 80b3 	beq.w	8009f92 <_printf_i+0x182>
 8009e2c:	d822      	bhi.n	8009e74 <_printf_i+0x64>
 8009e2e:	2963      	cmp	r1, #99	; 0x63
 8009e30:	d036      	beq.n	8009ea0 <_printf_i+0x90>
 8009e32:	d80a      	bhi.n	8009e4a <_printf_i+0x3a>
 8009e34:	2900      	cmp	r1, #0
 8009e36:	f000 80b9 	beq.w	8009fac <_printf_i+0x19c>
 8009e3a:	2958      	cmp	r1, #88	; 0x58
 8009e3c:	f000 8083 	beq.w	8009f46 <_printf_i+0x136>
 8009e40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e44:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009e48:	e032      	b.n	8009eb0 <_printf_i+0xa0>
 8009e4a:	2964      	cmp	r1, #100	; 0x64
 8009e4c:	d001      	beq.n	8009e52 <_printf_i+0x42>
 8009e4e:	2969      	cmp	r1, #105	; 0x69
 8009e50:	d1f6      	bne.n	8009e40 <_printf_i+0x30>
 8009e52:	6820      	ldr	r0, [r4, #0]
 8009e54:	6813      	ldr	r3, [r2, #0]
 8009e56:	0605      	lsls	r5, r0, #24
 8009e58:	f103 0104 	add.w	r1, r3, #4
 8009e5c:	d52a      	bpl.n	8009eb4 <_printf_i+0xa4>
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	6011      	str	r1, [r2, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	da03      	bge.n	8009e6e <_printf_i+0x5e>
 8009e66:	222d      	movs	r2, #45	; 0x2d
 8009e68:	425b      	negs	r3, r3
 8009e6a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009e6e:	486f      	ldr	r0, [pc, #444]	; (800a02c <_printf_i+0x21c>)
 8009e70:	220a      	movs	r2, #10
 8009e72:	e039      	b.n	8009ee8 <_printf_i+0xd8>
 8009e74:	2973      	cmp	r1, #115	; 0x73
 8009e76:	f000 809d 	beq.w	8009fb4 <_printf_i+0x1a4>
 8009e7a:	d808      	bhi.n	8009e8e <_printf_i+0x7e>
 8009e7c:	296f      	cmp	r1, #111	; 0x6f
 8009e7e:	d020      	beq.n	8009ec2 <_printf_i+0xb2>
 8009e80:	2970      	cmp	r1, #112	; 0x70
 8009e82:	d1dd      	bne.n	8009e40 <_printf_i+0x30>
 8009e84:	6823      	ldr	r3, [r4, #0]
 8009e86:	f043 0320 	orr.w	r3, r3, #32
 8009e8a:	6023      	str	r3, [r4, #0]
 8009e8c:	e003      	b.n	8009e96 <_printf_i+0x86>
 8009e8e:	2975      	cmp	r1, #117	; 0x75
 8009e90:	d017      	beq.n	8009ec2 <_printf_i+0xb2>
 8009e92:	2978      	cmp	r1, #120	; 0x78
 8009e94:	d1d4      	bne.n	8009e40 <_printf_i+0x30>
 8009e96:	2378      	movs	r3, #120	; 0x78
 8009e98:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e9c:	4864      	ldr	r0, [pc, #400]	; (800a030 <_printf_i+0x220>)
 8009e9e:	e055      	b.n	8009f4c <_printf_i+0x13c>
 8009ea0:	6813      	ldr	r3, [r2, #0]
 8009ea2:	1d19      	adds	r1, r3, #4
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	6011      	str	r1, [r2, #0]
 8009ea8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009eac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	e08c      	b.n	8009fce <_printf_i+0x1be>
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	6011      	str	r1, [r2, #0]
 8009eb8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009ebc:	bf18      	it	ne
 8009ebe:	b21b      	sxthne	r3, r3
 8009ec0:	e7cf      	b.n	8009e62 <_printf_i+0x52>
 8009ec2:	6813      	ldr	r3, [r2, #0]
 8009ec4:	6825      	ldr	r5, [r4, #0]
 8009ec6:	1d18      	adds	r0, r3, #4
 8009ec8:	6010      	str	r0, [r2, #0]
 8009eca:	0628      	lsls	r0, r5, #24
 8009ecc:	d501      	bpl.n	8009ed2 <_printf_i+0xc2>
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	e002      	b.n	8009ed8 <_printf_i+0xc8>
 8009ed2:	0668      	lsls	r0, r5, #25
 8009ed4:	d5fb      	bpl.n	8009ece <_printf_i+0xbe>
 8009ed6:	881b      	ldrh	r3, [r3, #0]
 8009ed8:	4854      	ldr	r0, [pc, #336]	; (800a02c <_printf_i+0x21c>)
 8009eda:	296f      	cmp	r1, #111	; 0x6f
 8009edc:	bf14      	ite	ne
 8009ede:	220a      	movne	r2, #10
 8009ee0:	2208      	moveq	r2, #8
 8009ee2:	2100      	movs	r1, #0
 8009ee4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ee8:	6865      	ldr	r5, [r4, #4]
 8009eea:	60a5      	str	r5, [r4, #8]
 8009eec:	2d00      	cmp	r5, #0
 8009eee:	f2c0 8095 	blt.w	800a01c <_printf_i+0x20c>
 8009ef2:	6821      	ldr	r1, [r4, #0]
 8009ef4:	f021 0104 	bic.w	r1, r1, #4
 8009ef8:	6021      	str	r1, [r4, #0]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d13d      	bne.n	8009f7a <_printf_i+0x16a>
 8009efe:	2d00      	cmp	r5, #0
 8009f00:	f040 808e 	bne.w	800a020 <_printf_i+0x210>
 8009f04:	4665      	mov	r5, ip
 8009f06:	2a08      	cmp	r2, #8
 8009f08:	d10b      	bne.n	8009f22 <_printf_i+0x112>
 8009f0a:	6823      	ldr	r3, [r4, #0]
 8009f0c:	07db      	lsls	r3, r3, #31
 8009f0e:	d508      	bpl.n	8009f22 <_printf_i+0x112>
 8009f10:	6923      	ldr	r3, [r4, #16]
 8009f12:	6862      	ldr	r2, [r4, #4]
 8009f14:	429a      	cmp	r2, r3
 8009f16:	bfde      	ittt	le
 8009f18:	2330      	movle	r3, #48	; 0x30
 8009f1a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f1e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009f22:	ebac 0305 	sub.w	r3, ip, r5
 8009f26:	6123      	str	r3, [r4, #16]
 8009f28:	f8cd 8000 	str.w	r8, [sp]
 8009f2c:	463b      	mov	r3, r7
 8009f2e:	aa03      	add	r2, sp, #12
 8009f30:	4621      	mov	r1, r4
 8009f32:	4630      	mov	r0, r6
 8009f34:	f7ff fef6 	bl	8009d24 <_printf_common>
 8009f38:	3001      	adds	r0, #1
 8009f3a:	d14d      	bne.n	8009fd8 <_printf_i+0x1c8>
 8009f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f40:	b005      	add	sp, #20
 8009f42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f46:	4839      	ldr	r0, [pc, #228]	; (800a02c <_printf_i+0x21c>)
 8009f48:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009f4c:	6813      	ldr	r3, [r2, #0]
 8009f4e:	6821      	ldr	r1, [r4, #0]
 8009f50:	1d1d      	adds	r5, r3, #4
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	6015      	str	r5, [r2, #0]
 8009f56:	060a      	lsls	r2, r1, #24
 8009f58:	d50b      	bpl.n	8009f72 <_printf_i+0x162>
 8009f5a:	07ca      	lsls	r2, r1, #31
 8009f5c:	bf44      	itt	mi
 8009f5e:	f041 0120 	orrmi.w	r1, r1, #32
 8009f62:	6021      	strmi	r1, [r4, #0]
 8009f64:	b91b      	cbnz	r3, 8009f6e <_printf_i+0x15e>
 8009f66:	6822      	ldr	r2, [r4, #0]
 8009f68:	f022 0220 	bic.w	r2, r2, #32
 8009f6c:	6022      	str	r2, [r4, #0]
 8009f6e:	2210      	movs	r2, #16
 8009f70:	e7b7      	b.n	8009ee2 <_printf_i+0xd2>
 8009f72:	064d      	lsls	r5, r1, #25
 8009f74:	bf48      	it	mi
 8009f76:	b29b      	uxthmi	r3, r3
 8009f78:	e7ef      	b.n	8009f5a <_printf_i+0x14a>
 8009f7a:	4665      	mov	r5, ip
 8009f7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f80:	fb02 3311 	mls	r3, r2, r1, r3
 8009f84:	5cc3      	ldrb	r3, [r0, r3]
 8009f86:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009f8a:	460b      	mov	r3, r1
 8009f8c:	2900      	cmp	r1, #0
 8009f8e:	d1f5      	bne.n	8009f7c <_printf_i+0x16c>
 8009f90:	e7b9      	b.n	8009f06 <_printf_i+0xf6>
 8009f92:	6813      	ldr	r3, [r2, #0]
 8009f94:	6825      	ldr	r5, [r4, #0]
 8009f96:	6961      	ldr	r1, [r4, #20]
 8009f98:	1d18      	adds	r0, r3, #4
 8009f9a:	6010      	str	r0, [r2, #0]
 8009f9c:	0628      	lsls	r0, r5, #24
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	d501      	bpl.n	8009fa6 <_printf_i+0x196>
 8009fa2:	6019      	str	r1, [r3, #0]
 8009fa4:	e002      	b.n	8009fac <_printf_i+0x19c>
 8009fa6:	066a      	lsls	r2, r5, #25
 8009fa8:	d5fb      	bpl.n	8009fa2 <_printf_i+0x192>
 8009faa:	8019      	strh	r1, [r3, #0]
 8009fac:	2300      	movs	r3, #0
 8009fae:	6123      	str	r3, [r4, #16]
 8009fb0:	4665      	mov	r5, ip
 8009fb2:	e7b9      	b.n	8009f28 <_printf_i+0x118>
 8009fb4:	6813      	ldr	r3, [r2, #0]
 8009fb6:	1d19      	adds	r1, r3, #4
 8009fb8:	6011      	str	r1, [r2, #0]
 8009fba:	681d      	ldr	r5, [r3, #0]
 8009fbc:	6862      	ldr	r2, [r4, #4]
 8009fbe:	2100      	movs	r1, #0
 8009fc0:	4628      	mov	r0, r5
 8009fc2:	f7f6 f925 	bl	8000210 <memchr>
 8009fc6:	b108      	cbz	r0, 8009fcc <_printf_i+0x1bc>
 8009fc8:	1b40      	subs	r0, r0, r5
 8009fca:	6060      	str	r0, [r4, #4]
 8009fcc:	6863      	ldr	r3, [r4, #4]
 8009fce:	6123      	str	r3, [r4, #16]
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fd6:	e7a7      	b.n	8009f28 <_printf_i+0x118>
 8009fd8:	6923      	ldr	r3, [r4, #16]
 8009fda:	462a      	mov	r2, r5
 8009fdc:	4639      	mov	r1, r7
 8009fde:	4630      	mov	r0, r6
 8009fe0:	47c0      	blx	r8
 8009fe2:	3001      	adds	r0, #1
 8009fe4:	d0aa      	beq.n	8009f3c <_printf_i+0x12c>
 8009fe6:	6823      	ldr	r3, [r4, #0]
 8009fe8:	079b      	lsls	r3, r3, #30
 8009fea:	d413      	bmi.n	800a014 <_printf_i+0x204>
 8009fec:	68e0      	ldr	r0, [r4, #12]
 8009fee:	9b03      	ldr	r3, [sp, #12]
 8009ff0:	4298      	cmp	r0, r3
 8009ff2:	bfb8      	it	lt
 8009ff4:	4618      	movlt	r0, r3
 8009ff6:	e7a3      	b.n	8009f40 <_printf_i+0x130>
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	464a      	mov	r2, r9
 8009ffc:	4639      	mov	r1, r7
 8009ffe:	4630      	mov	r0, r6
 800a000:	47c0      	blx	r8
 800a002:	3001      	adds	r0, #1
 800a004:	d09a      	beq.n	8009f3c <_printf_i+0x12c>
 800a006:	3501      	adds	r5, #1
 800a008:	68e3      	ldr	r3, [r4, #12]
 800a00a:	9a03      	ldr	r2, [sp, #12]
 800a00c:	1a9b      	subs	r3, r3, r2
 800a00e:	42ab      	cmp	r3, r5
 800a010:	dcf2      	bgt.n	8009ff8 <_printf_i+0x1e8>
 800a012:	e7eb      	b.n	8009fec <_printf_i+0x1dc>
 800a014:	2500      	movs	r5, #0
 800a016:	f104 0919 	add.w	r9, r4, #25
 800a01a:	e7f5      	b.n	800a008 <_printf_i+0x1f8>
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d1ac      	bne.n	8009f7a <_printf_i+0x16a>
 800a020:	7803      	ldrb	r3, [r0, #0]
 800a022:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a026:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a02a:	e76c      	b.n	8009f06 <_printf_i+0xf6>
 800a02c:	0800a775 	.word	0x0800a775
 800a030:	0800a786 	.word	0x0800a786

0800a034 <memcpy>:
 800a034:	b510      	push	{r4, lr}
 800a036:	1e43      	subs	r3, r0, #1
 800a038:	440a      	add	r2, r1
 800a03a:	4291      	cmp	r1, r2
 800a03c:	d100      	bne.n	800a040 <memcpy+0xc>
 800a03e:	bd10      	pop	{r4, pc}
 800a040:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a044:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a048:	e7f7      	b.n	800a03a <memcpy+0x6>

0800a04a <memmove>:
 800a04a:	4288      	cmp	r0, r1
 800a04c:	b510      	push	{r4, lr}
 800a04e:	eb01 0302 	add.w	r3, r1, r2
 800a052:	d807      	bhi.n	800a064 <memmove+0x1a>
 800a054:	1e42      	subs	r2, r0, #1
 800a056:	4299      	cmp	r1, r3
 800a058:	d00a      	beq.n	800a070 <memmove+0x26>
 800a05a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a05e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a062:	e7f8      	b.n	800a056 <memmove+0xc>
 800a064:	4283      	cmp	r3, r0
 800a066:	d9f5      	bls.n	800a054 <memmove+0xa>
 800a068:	1881      	adds	r1, r0, r2
 800a06a:	1ad2      	subs	r2, r2, r3
 800a06c:	42d3      	cmn	r3, r2
 800a06e:	d100      	bne.n	800a072 <memmove+0x28>
 800a070:	bd10      	pop	{r4, pc}
 800a072:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a076:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a07a:	e7f7      	b.n	800a06c <memmove+0x22>

0800a07c <_free_r>:
 800a07c:	b538      	push	{r3, r4, r5, lr}
 800a07e:	4605      	mov	r5, r0
 800a080:	2900      	cmp	r1, #0
 800a082:	d045      	beq.n	800a110 <_free_r+0x94>
 800a084:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a088:	1f0c      	subs	r4, r1, #4
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	bfb8      	it	lt
 800a08e:	18e4      	addlt	r4, r4, r3
 800a090:	f000 f8d2 	bl	800a238 <__malloc_lock>
 800a094:	4a1f      	ldr	r2, [pc, #124]	; (800a114 <_free_r+0x98>)
 800a096:	6813      	ldr	r3, [r2, #0]
 800a098:	4610      	mov	r0, r2
 800a09a:	b933      	cbnz	r3, 800a0aa <_free_r+0x2e>
 800a09c:	6063      	str	r3, [r4, #4]
 800a09e:	6014      	str	r4, [r2, #0]
 800a0a0:	4628      	mov	r0, r5
 800a0a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0a6:	f000 b8c8 	b.w	800a23a <__malloc_unlock>
 800a0aa:	42a3      	cmp	r3, r4
 800a0ac:	d90c      	bls.n	800a0c8 <_free_r+0x4c>
 800a0ae:	6821      	ldr	r1, [r4, #0]
 800a0b0:	1862      	adds	r2, r4, r1
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	bf04      	itt	eq
 800a0b6:	681a      	ldreq	r2, [r3, #0]
 800a0b8:	685b      	ldreq	r3, [r3, #4]
 800a0ba:	6063      	str	r3, [r4, #4]
 800a0bc:	bf04      	itt	eq
 800a0be:	1852      	addeq	r2, r2, r1
 800a0c0:	6022      	streq	r2, [r4, #0]
 800a0c2:	6004      	str	r4, [r0, #0]
 800a0c4:	e7ec      	b.n	800a0a0 <_free_r+0x24>
 800a0c6:	4613      	mov	r3, r2
 800a0c8:	685a      	ldr	r2, [r3, #4]
 800a0ca:	b10a      	cbz	r2, 800a0d0 <_free_r+0x54>
 800a0cc:	42a2      	cmp	r2, r4
 800a0ce:	d9fa      	bls.n	800a0c6 <_free_r+0x4a>
 800a0d0:	6819      	ldr	r1, [r3, #0]
 800a0d2:	1858      	adds	r0, r3, r1
 800a0d4:	42a0      	cmp	r0, r4
 800a0d6:	d10b      	bne.n	800a0f0 <_free_r+0x74>
 800a0d8:	6820      	ldr	r0, [r4, #0]
 800a0da:	4401      	add	r1, r0
 800a0dc:	1858      	adds	r0, r3, r1
 800a0de:	4282      	cmp	r2, r0
 800a0e0:	6019      	str	r1, [r3, #0]
 800a0e2:	d1dd      	bne.n	800a0a0 <_free_r+0x24>
 800a0e4:	6810      	ldr	r0, [r2, #0]
 800a0e6:	6852      	ldr	r2, [r2, #4]
 800a0e8:	605a      	str	r2, [r3, #4]
 800a0ea:	4401      	add	r1, r0
 800a0ec:	6019      	str	r1, [r3, #0]
 800a0ee:	e7d7      	b.n	800a0a0 <_free_r+0x24>
 800a0f0:	d902      	bls.n	800a0f8 <_free_r+0x7c>
 800a0f2:	230c      	movs	r3, #12
 800a0f4:	602b      	str	r3, [r5, #0]
 800a0f6:	e7d3      	b.n	800a0a0 <_free_r+0x24>
 800a0f8:	6820      	ldr	r0, [r4, #0]
 800a0fa:	1821      	adds	r1, r4, r0
 800a0fc:	428a      	cmp	r2, r1
 800a0fe:	bf04      	itt	eq
 800a100:	6811      	ldreq	r1, [r2, #0]
 800a102:	6852      	ldreq	r2, [r2, #4]
 800a104:	6062      	str	r2, [r4, #4]
 800a106:	bf04      	itt	eq
 800a108:	1809      	addeq	r1, r1, r0
 800a10a:	6021      	streq	r1, [r4, #0]
 800a10c:	605c      	str	r4, [r3, #4]
 800a10e:	e7c7      	b.n	800a0a0 <_free_r+0x24>
 800a110:	bd38      	pop	{r3, r4, r5, pc}
 800a112:	bf00      	nop
 800a114:	20000178 	.word	0x20000178

0800a118 <_malloc_r>:
 800a118:	b570      	push	{r4, r5, r6, lr}
 800a11a:	1ccd      	adds	r5, r1, #3
 800a11c:	f025 0503 	bic.w	r5, r5, #3
 800a120:	3508      	adds	r5, #8
 800a122:	2d0c      	cmp	r5, #12
 800a124:	bf38      	it	cc
 800a126:	250c      	movcc	r5, #12
 800a128:	2d00      	cmp	r5, #0
 800a12a:	4606      	mov	r6, r0
 800a12c:	db01      	blt.n	800a132 <_malloc_r+0x1a>
 800a12e:	42a9      	cmp	r1, r5
 800a130:	d903      	bls.n	800a13a <_malloc_r+0x22>
 800a132:	230c      	movs	r3, #12
 800a134:	6033      	str	r3, [r6, #0]
 800a136:	2000      	movs	r0, #0
 800a138:	bd70      	pop	{r4, r5, r6, pc}
 800a13a:	f000 f87d 	bl	800a238 <__malloc_lock>
 800a13e:	4a21      	ldr	r2, [pc, #132]	; (800a1c4 <_malloc_r+0xac>)
 800a140:	6814      	ldr	r4, [r2, #0]
 800a142:	4621      	mov	r1, r4
 800a144:	b991      	cbnz	r1, 800a16c <_malloc_r+0x54>
 800a146:	4c20      	ldr	r4, [pc, #128]	; (800a1c8 <_malloc_r+0xb0>)
 800a148:	6823      	ldr	r3, [r4, #0]
 800a14a:	b91b      	cbnz	r3, 800a154 <_malloc_r+0x3c>
 800a14c:	4630      	mov	r0, r6
 800a14e:	f000 f863 	bl	800a218 <_sbrk_r>
 800a152:	6020      	str	r0, [r4, #0]
 800a154:	4629      	mov	r1, r5
 800a156:	4630      	mov	r0, r6
 800a158:	f000 f85e 	bl	800a218 <_sbrk_r>
 800a15c:	1c43      	adds	r3, r0, #1
 800a15e:	d124      	bne.n	800a1aa <_malloc_r+0x92>
 800a160:	230c      	movs	r3, #12
 800a162:	6033      	str	r3, [r6, #0]
 800a164:	4630      	mov	r0, r6
 800a166:	f000 f868 	bl	800a23a <__malloc_unlock>
 800a16a:	e7e4      	b.n	800a136 <_malloc_r+0x1e>
 800a16c:	680b      	ldr	r3, [r1, #0]
 800a16e:	1b5b      	subs	r3, r3, r5
 800a170:	d418      	bmi.n	800a1a4 <_malloc_r+0x8c>
 800a172:	2b0b      	cmp	r3, #11
 800a174:	d90f      	bls.n	800a196 <_malloc_r+0x7e>
 800a176:	600b      	str	r3, [r1, #0]
 800a178:	50cd      	str	r5, [r1, r3]
 800a17a:	18cc      	adds	r4, r1, r3
 800a17c:	4630      	mov	r0, r6
 800a17e:	f000 f85c 	bl	800a23a <__malloc_unlock>
 800a182:	f104 000b 	add.w	r0, r4, #11
 800a186:	1d23      	adds	r3, r4, #4
 800a188:	f020 0007 	bic.w	r0, r0, #7
 800a18c:	1ac3      	subs	r3, r0, r3
 800a18e:	d0d3      	beq.n	800a138 <_malloc_r+0x20>
 800a190:	425a      	negs	r2, r3
 800a192:	50e2      	str	r2, [r4, r3]
 800a194:	e7d0      	b.n	800a138 <_malloc_r+0x20>
 800a196:	428c      	cmp	r4, r1
 800a198:	684b      	ldr	r3, [r1, #4]
 800a19a:	bf16      	itet	ne
 800a19c:	6063      	strne	r3, [r4, #4]
 800a19e:	6013      	streq	r3, [r2, #0]
 800a1a0:	460c      	movne	r4, r1
 800a1a2:	e7eb      	b.n	800a17c <_malloc_r+0x64>
 800a1a4:	460c      	mov	r4, r1
 800a1a6:	6849      	ldr	r1, [r1, #4]
 800a1a8:	e7cc      	b.n	800a144 <_malloc_r+0x2c>
 800a1aa:	1cc4      	adds	r4, r0, #3
 800a1ac:	f024 0403 	bic.w	r4, r4, #3
 800a1b0:	42a0      	cmp	r0, r4
 800a1b2:	d005      	beq.n	800a1c0 <_malloc_r+0xa8>
 800a1b4:	1a21      	subs	r1, r4, r0
 800a1b6:	4630      	mov	r0, r6
 800a1b8:	f000 f82e 	bl	800a218 <_sbrk_r>
 800a1bc:	3001      	adds	r0, #1
 800a1be:	d0cf      	beq.n	800a160 <_malloc_r+0x48>
 800a1c0:	6025      	str	r5, [r4, #0]
 800a1c2:	e7db      	b.n	800a17c <_malloc_r+0x64>
 800a1c4:	20000178 	.word	0x20000178
 800a1c8:	2000017c 	.word	0x2000017c

0800a1cc <_realloc_r>:
 800a1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ce:	4607      	mov	r7, r0
 800a1d0:	4614      	mov	r4, r2
 800a1d2:	460e      	mov	r6, r1
 800a1d4:	b921      	cbnz	r1, 800a1e0 <_realloc_r+0x14>
 800a1d6:	4611      	mov	r1, r2
 800a1d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a1dc:	f7ff bf9c 	b.w	800a118 <_malloc_r>
 800a1e0:	b922      	cbnz	r2, 800a1ec <_realloc_r+0x20>
 800a1e2:	f7ff ff4b 	bl	800a07c <_free_r>
 800a1e6:	4625      	mov	r5, r4
 800a1e8:	4628      	mov	r0, r5
 800a1ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1ec:	f000 f826 	bl	800a23c <_malloc_usable_size_r>
 800a1f0:	42a0      	cmp	r0, r4
 800a1f2:	d20f      	bcs.n	800a214 <_realloc_r+0x48>
 800a1f4:	4621      	mov	r1, r4
 800a1f6:	4638      	mov	r0, r7
 800a1f8:	f7ff ff8e 	bl	800a118 <_malloc_r>
 800a1fc:	4605      	mov	r5, r0
 800a1fe:	2800      	cmp	r0, #0
 800a200:	d0f2      	beq.n	800a1e8 <_realloc_r+0x1c>
 800a202:	4631      	mov	r1, r6
 800a204:	4622      	mov	r2, r4
 800a206:	f7ff ff15 	bl	800a034 <memcpy>
 800a20a:	4631      	mov	r1, r6
 800a20c:	4638      	mov	r0, r7
 800a20e:	f7ff ff35 	bl	800a07c <_free_r>
 800a212:	e7e9      	b.n	800a1e8 <_realloc_r+0x1c>
 800a214:	4635      	mov	r5, r6
 800a216:	e7e7      	b.n	800a1e8 <_realloc_r+0x1c>

0800a218 <_sbrk_r>:
 800a218:	b538      	push	{r3, r4, r5, lr}
 800a21a:	4c06      	ldr	r4, [pc, #24]	; (800a234 <_sbrk_r+0x1c>)
 800a21c:	2300      	movs	r3, #0
 800a21e:	4605      	mov	r5, r0
 800a220:	4608      	mov	r0, r1
 800a222:	6023      	str	r3, [r4, #0]
 800a224:	f7f6 fea4 	bl	8000f70 <_sbrk>
 800a228:	1c43      	adds	r3, r0, #1
 800a22a:	d102      	bne.n	800a232 <_sbrk_r+0x1a>
 800a22c:	6823      	ldr	r3, [r4, #0]
 800a22e:	b103      	cbz	r3, 800a232 <_sbrk_r+0x1a>
 800a230:	602b      	str	r3, [r5, #0]
 800a232:	bd38      	pop	{r3, r4, r5, pc}
 800a234:	20003370 	.word	0x20003370

0800a238 <__malloc_lock>:
 800a238:	4770      	bx	lr

0800a23a <__malloc_unlock>:
 800a23a:	4770      	bx	lr

0800a23c <_malloc_usable_size_r>:
 800a23c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a240:	1f18      	subs	r0, r3, #4
 800a242:	2b00      	cmp	r3, #0
 800a244:	bfbc      	itt	lt
 800a246:	580b      	ldrlt	r3, [r1, r0]
 800a248:	18c0      	addlt	r0, r0, r3
 800a24a:	4770      	bx	lr

0800a24c <_init>:
 800a24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a24e:	bf00      	nop
 800a250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a252:	bc08      	pop	{r3}
 800a254:	469e      	mov	lr, r3
 800a256:	4770      	bx	lr

0800a258 <_fini>:
 800a258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a25a:	bf00      	nop
 800a25c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a25e:	bc08      	pop	{r3}
 800a260:	469e      	mov	lr, r3
 800a262:	4770      	bx	lr
